// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _gather_HH_
#define _gather_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct gather : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<64> > to_V_din;
    sc_in< sc_logic > to_V_full_n;
    sc_out< sc_logic > to_V_write;
    sc_in< sc_lv<64> > from0_V_dout;
    sc_in< sc_logic > from0_V_empty_n;
    sc_out< sc_logic > from0_V_read;
    sc_in< sc_lv<64> > from1_V_dout;
    sc_in< sc_logic > from1_V_empty_n;
    sc_out< sc_logic > from1_V_read;
    sc_in< sc_lv<32> > data_count_dout;
    sc_in< sc_logic > data_count_empty_n;
    sc_out< sc_logic > data_count_read;
    sc_out< sc_lv<32> > data_count_out_din;
    sc_in< sc_logic > data_count_out_full_n;
    sc_out< sc_logic > data_count_out_write;


    // Module declarations
    gather(sc_module_name name);
    SC_HAS_PROCESS(gather);

    ~gather();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > to_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > tmp_reg_204;
    sc_signal< sc_lv<1> > tmp_1_reg_208;
    sc_signal< sc_logic > from0_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_i_fu_167_p2;
    sc_signal< sc_lv<1> > tmp_nbreadreq_fu_124_p3;
    sc_signal< sc_lv<1> > tmp_1_nbreadreq_fu_132_p3;
    sc_signal< sc_logic > from1_V_blk_n;
    sc_signal< sc_logic > data_count_blk_n;
    sc_signal< sc_logic > data_count_out_blk_n;
    sc_signal< sc_lv<32> > data_count_read_reg_196;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_predicate_op22_read_state2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_predicate_op30_write_state3;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<64> > tmp_4_fu_172_p2;
    sc_signal< sc_lv<64> > tmp_4_reg_212;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > i_1_fu_106;
    sc_signal< sc_lv<32> > i_fu_178_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_predicate_op22_read_state2();
    void thread_ap_predicate_op30_write_state3();
    void thread_ap_ready();
    void thread_data_count_blk_n();
    void thread_data_count_out_blk_n();
    void thread_data_count_out_din();
    void thread_data_count_out_write();
    void thread_data_count_read();
    void thread_from0_V_blk_n();
    void thread_from0_V_read();
    void thread_from1_V_blk_n();
    void thread_from1_V_read();
    void thread_i_fu_178_p2();
    void thread_tmp_1_nbreadreq_fu_132_p3();
    void thread_tmp_4_fu_172_p2();
    void thread_tmp_i_fu_167_p2();
    void thread_tmp_nbreadreq_fu_124_p3();
    void thread_to_V_blk_n();
    void thread_to_V_din();
    void thread_to_V_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
