// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "load5.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic load5::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic load5::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> load5::ap_ST_fsm_state1 = "1";
const sc_lv<9> load5::ap_ST_fsm_state2 = "10";
const sc_lv<9> load5::ap_ST_fsm_state3 = "100";
const sc_lv<9> load5::ap_ST_fsm_state4 = "1000";
const sc_lv<9> load5::ap_ST_fsm_state5 = "10000";
const sc_lv<9> load5::ap_ST_fsm_state6 = "100000";
const sc_lv<9> load5::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> load5::ap_ST_fsm_pp0_stage0 = "10000000";
const sc_lv<9> load5::ap_ST_fsm_state11 = "100000000";
const bool load5::ap_const_boolean_1 = true;
const sc_lv<32> load5::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<64> load5::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> load5::ap_const_lv1_0 = "0";
const sc_lv<3> load5::ap_const_lv3_0 = "000";
const sc_lv<2> load5::ap_const_lv2_0 = "00";
const sc_lv<4> load5::ap_const_lv4_0 = "0000";
const sc_lv<8> load5::ap_const_lv8_0 = "00000000";
const bool load5::ap_const_boolean_0 = false;
const sc_lv<32> load5::ap_const_lv32_7 = "111";
const sc_lv<32> load5::ap_const_lv32_6 = "110";
const sc_lv<1> load5::ap_const_lv1_1 = "1";
const sc_lv<32> load5::ap_const_lv32_3 = "11";
const sc_lv<32> load5::ap_const_lv32_3F = "111111";
const sc_lv<32> load5::ap_const_lv32_1 = "1";
const sc_lv<32> load5::ap_const_lv32_8 = "1000";

load5::load5(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( to_V_full_n );
    sensitive << ( m_axi_from_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_i_reg_212 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( to_V_full_n );
    sensitive << ( m_axi_from_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_i_reg_212 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( to_V_full_n );
    sensitive << ( m_axi_from_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_i_reg_212 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter2);
    sensitive << ( to_V_full_n );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 );

    SC_METHOD(thread_ap_block_state7);
    sensitive << ( data_count_out_full_n );
    sensitive << ( output_ddr0_out_full_n );

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter1);
    sensitive << ( m_axi_from_RVALID );
    sensitive << ( exitcond_i_i_i_reg_212 );

    SC_METHOD(thread_ap_condition_166);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_sig_ioackin_m_axi_from_ARREADY );

    SC_METHOD(thread_ap_condition_312);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( m_axi_from_ARREADY );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state8);
    sensitive << ( exitcond_i_i_i_fu_188_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_from_ARREADY);
    sensitive << ( m_axi_from_ARREADY );
    sensitive << ( ap_reg_ioackin_m_axi_from_ARREADY );

    SC_METHOD(thread_data_count_out_blk_n);
    sensitive << ( data_count_out_full_n );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_data_count_out_din);
    sensitive << ( data_count );
    sensitive << ( data_count_out_full_n );
    sensitive << ( output_ddr0_out_full_n );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_data_count_out_write);
    sensitive << ( data_count_out_full_n );
    sensitive << ( output_ddr0_out_full_n );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_exitcond_i_i_i_fu_188_p2);
    sensitive << ( data_count );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_i_i_i_reg_156 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_from_blk_n_AR);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_from_ARREADY );

    SC_METHOD(thread_from_blk_n_R);
    sensitive << ( m_axi_from_RVALID );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_i_i_reg_212 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_from_offset1_i_i_fu_167_p4);
    sensitive << ( from_offset );

    SC_METHOD(thread_i_fu_193_p2);
    sensitive << ( i_i_i_i_reg_156 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_m_axi_from_ARADDR);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_4_i_i_fu_177_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_from_ARREADY );

    SC_METHOD(thread_m_axi_from_ARBURST);

    SC_METHOD(thread_m_axi_from_ARCACHE);

    SC_METHOD(thread_m_axi_from_ARID);

    SC_METHOD(thread_m_axi_from_ARLEN);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data_count );
    sensitive << ( ap_reg_ioackin_m_axi_from_ARREADY );

    SC_METHOD(thread_m_axi_from_ARLOCK);

    SC_METHOD(thread_m_axi_from_ARPROT);

    SC_METHOD(thread_m_axi_from_ARQOS);

    SC_METHOD(thread_m_axi_from_ARREGION);

    SC_METHOD(thread_m_axi_from_ARSIZE);

    SC_METHOD(thread_m_axi_from_ARUSER);

    SC_METHOD(thread_m_axi_from_ARVALID);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_reg_ioackin_m_axi_from_ARREADY );

    SC_METHOD(thread_m_axi_from_AWADDR);

    SC_METHOD(thread_m_axi_from_AWBURST);

    SC_METHOD(thread_m_axi_from_AWCACHE);

    SC_METHOD(thread_m_axi_from_AWID);

    SC_METHOD(thread_m_axi_from_AWLEN);

    SC_METHOD(thread_m_axi_from_AWLOCK);

    SC_METHOD(thread_m_axi_from_AWPROT);

    SC_METHOD(thread_m_axi_from_AWQOS);

    SC_METHOD(thread_m_axi_from_AWREGION);

    SC_METHOD(thread_m_axi_from_AWSIZE);

    SC_METHOD(thread_m_axi_from_AWUSER);

    SC_METHOD(thread_m_axi_from_AWVALID);

    SC_METHOD(thread_m_axi_from_BREADY);

    SC_METHOD(thread_m_axi_from_RREADY);
    sensitive << ( exitcond_i_i_i_reg_212 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_from_WDATA);

    SC_METHOD(thread_m_axi_from_WID);

    SC_METHOD(thread_m_axi_from_WLAST);

    SC_METHOD(thread_m_axi_from_WSTRB);

    SC_METHOD(thread_m_axi_from_WUSER);

    SC_METHOD(thread_m_axi_from_WVALID);

    SC_METHOD(thread_output_ddr0_out_blk_n);
    sensitive << ( output_ddr0_out_full_n );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_output_ddr0_out_din);
    sensitive << ( data_count_out_full_n );
    sensitive << ( output_ddr0 );
    sensitive << ( output_ddr0_out_full_n );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_output_ddr0_out_write);
    sensitive << ( data_count_out_full_n );
    sensitive << ( output_ddr0_out_full_n );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( real_start_status_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( start_control_reg );

    SC_METHOD(thread_tmp_4_i_i_fu_177_p1);
    sensitive << ( from_offset1_i_i_fu_167_p4 );

    SC_METHOD(thread_to_V_blk_n);
    sensitive << ( to_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 );

    SC_METHOD(thread_to_V_din);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 );
    sensitive << ( tmp_reg_221 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_to_V_write);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data_count_out_full_n );
    sensitive << ( output_ddr0_out_full_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_sig_ioackin_m_axi_from_ARREADY );
    sensitive << ( exitcond_i_i_i_fu_188_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    real_start_status_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000000001";
    start_once_reg = SC_LOGIC_0;
    start_control_reg = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_from_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "load5_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, to_V_din, "(port)to_V_din");
    sc_trace(mVcdFile, to_V_full_n, "(port)to_V_full_n");
    sc_trace(mVcdFile, to_V_write, "(port)to_V_write");
    sc_trace(mVcdFile, m_axi_from_AWVALID, "(port)m_axi_from_AWVALID");
    sc_trace(mVcdFile, m_axi_from_AWREADY, "(port)m_axi_from_AWREADY");
    sc_trace(mVcdFile, m_axi_from_AWADDR, "(port)m_axi_from_AWADDR");
    sc_trace(mVcdFile, m_axi_from_AWID, "(port)m_axi_from_AWID");
    sc_trace(mVcdFile, m_axi_from_AWLEN, "(port)m_axi_from_AWLEN");
    sc_trace(mVcdFile, m_axi_from_AWSIZE, "(port)m_axi_from_AWSIZE");
    sc_trace(mVcdFile, m_axi_from_AWBURST, "(port)m_axi_from_AWBURST");
    sc_trace(mVcdFile, m_axi_from_AWLOCK, "(port)m_axi_from_AWLOCK");
    sc_trace(mVcdFile, m_axi_from_AWCACHE, "(port)m_axi_from_AWCACHE");
    sc_trace(mVcdFile, m_axi_from_AWPROT, "(port)m_axi_from_AWPROT");
    sc_trace(mVcdFile, m_axi_from_AWQOS, "(port)m_axi_from_AWQOS");
    sc_trace(mVcdFile, m_axi_from_AWREGION, "(port)m_axi_from_AWREGION");
    sc_trace(mVcdFile, m_axi_from_AWUSER, "(port)m_axi_from_AWUSER");
    sc_trace(mVcdFile, m_axi_from_WVALID, "(port)m_axi_from_WVALID");
    sc_trace(mVcdFile, m_axi_from_WREADY, "(port)m_axi_from_WREADY");
    sc_trace(mVcdFile, m_axi_from_WDATA, "(port)m_axi_from_WDATA");
    sc_trace(mVcdFile, m_axi_from_WSTRB, "(port)m_axi_from_WSTRB");
    sc_trace(mVcdFile, m_axi_from_WLAST, "(port)m_axi_from_WLAST");
    sc_trace(mVcdFile, m_axi_from_WID, "(port)m_axi_from_WID");
    sc_trace(mVcdFile, m_axi_from_WUSER, "(port)m_axi_from_WUSER");
    sc_trace(mVcdFile, m_axi_from_ARVALID, "(port)m_axi_from_ARVALID");
    sc_trace(mVcdFile, m_axi_from_ARREADY, "(port)m_axi_from_ARREADY");
    sc_trace(mVcdFile, m_axi_from_ARADDR, "(port)m_axi_from_ARADDR");
    sc_trace(mVcdFile, m_axi_from_ARID, "(port)m_axi_from_ARID");
    sc_trace(mVcdFile, m_axi_from_ARLEN, "(port)m_axi_from_ARLEN");
    sc_trace(mVcdFile, m_axi_from_ARSIZE, "(port)m_axi_from_ARSIZE");
    sc_trace(mVcdFile, m_axi_from_ARBURST, "(port)m_axi_from_ARBURST");
    sc_trace(mVcdFile, m_axi_from_ARLOCK, "(port)m_axi_from_ARLOCK");
    sc_trace(mVcdFile, m_axi_from_ARCACHE, "(port)m_axi_from_ARCACHE");
    sc_trace(mVcdFile, m_axi_from_ARPROT, "(port)m_axi_from_ARPROT");
    sc_trace(mVcdFile, m_axi_from_ARQOS, "(port)m_axi_from_ARQOS");
    sc_trace(mVcdFile, m_axi_from_ARREGION, "(port)m_axi_from_ARREGION");
    sc_trace(mVcdFile, m_axi_from_ARUSER, "(port)m_axi_from_ARUSER");
    sc_trace(mVcdFile, m_axi_from_RVALID, "(port)m_axi_from_RVALID");
    sc_trace(mVcdFile, m_axi_from_RREADY, "(port)m_axi_from_RREADY");
    sc_trace(mVcdFile, m_axi_from_RDATA, "(port)m_axi_from_RDATA");
    sc_trace(mVcdFile, m_axi_from_RLAST, "(port)m_axi_from_RLAST");
    sc_trace(mVcdFile, m_axi_from_RID, "(port)m_axi_from_RID");
    sc_trace(mVcdFile, m_axi_from_RUSER, "(port)m_axi_from_RUSER");
    sc_trace(mVcdFile, m_axi_from_RRESP, "(port)m_axi_from_RRESP");
    sc_trace(mVcdFile, m_axi_from_BVALID, "(port)m_axi_from_BVALID");
    sc_trace(mVcdFile, m_axi_from_BREADY, "(port)m_axi_from_BREADY");
    sc_trace(mVcdFile, m_axi_from_BRESP, "(port)m_axi_from_BRESP");
    sc_trace(mVcdFile, m_axi_from_BID, "(port)m_axi_from_BID");
    sc_trace(mVcdFile, m_axi_from_BUSER, "(port)m_axi_from_BUSER");
    sc_trace(mVcdFile, from_offset, "(port)from_offset");
    sc_trace(mVcdFile, data_count, "(port)data_count");
    sc_trace(mVcdFile, data_count_out_din, "(port)data_count_out_din");
    sc_trace(mVcdFile, data_count_out_full_n, "(port)data_count_out_full_n");
    sc_trace(mVcdFile, data_count_out_write, "(port)data_count_out_write");
    sc_trace(mVcdFile, output_ddr0, "(port)output_ddr0");
    sc_trace(mVcdFile, output_ddr0_out_din, "(port)output_ddr0_out_din");
    sc_trace(mVcdFile, output_ddr0_out_full_n, "(port)output_ddr0_out_full_n");
    sc_trace(mVcdFile, output_ddr0_out_write, "(port)output_ddr0_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, real_start_status_reg, "real_start_status_reg");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, start_control_reg, "start_control_reg");
    sc_trace(mVcdFile, to_V_blk_n, "to_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_i_i_i_reg_212, "exitcond_i_i_i_reg_212");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212, "ap_reg_pp0_iter1_exitcond_i_i_i_reg_212");
    sc_trace(mVcdFile, from_blk_n_AR, "from_blk_n_AR");
    sc_trace(mVcdFile, from_blk_n_R, "from_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, data_count_out_blk_n, "data_count_out_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, output_ddr0_out_blk_n, "output_ddr0_out_blk_n");
    sc_trace(mVcdFile, i_i_i_i_reg_156, "i_i_i_i_reg_156");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_from_ARREADY, "ap_sig_ioackin_m_axi_from_ARREADY");
    sc_trace(mVcdFile, exitcond_i_i_i_fu_188_p2, "exitcond_i_i_i_fu_188_p2");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter0, "ap_block_state8_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter1, "ap_block_state9_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter2, "ap_block_state10_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_193_p2, "i_fu_193_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_reg_221, "tmp_reg_221");
    sc_trace(mVcdFile, ap_block_state7, "ap_block_state7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state8, "ap_condition_pp0_exit_iter0_state8");
    sc_trace(mVcdFile, tmp_4_i_i_fu_177_p1, "tmp_4_i_i_fu_177_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_from_ARREADY, "ap_reg_ioackin_m_axi_from_ARREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, from_offset1_i_i_fu_167_p4, "from_offset1_i_i_fu_167_p4");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_312, "ap_condition_312");
    sc_trace(mVcdFile, ap_condition_166, "ap_condition_166");
#endif

    }
}

load5::~load5() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void load5::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state8.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, output_ddr0_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_out_full_n.read())))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state8.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state8.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, output_ddr0_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_out_full_n.read())))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_from_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ap_condition_166.read(), ap_const_boolean_1)) {
                ap_reg_ioackin_m_axi_from_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_condition_312.read(), ap_const_boolean_1)) {
                ap_reg_ioackin_m_axi_from_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_i_fu_188_p2.read()))) {
        i_i_i_i_reg_156 = i_fu_193_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, output_ddr0_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_out_full_n.read())))) {
        i_i_i_i_reg_156 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        real_start_status_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(start_full_n.read(), ap_const_logic_1)) {
            real_start_status_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read()))) {
            real_start_status_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_control_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read()) || 
              esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read())))) {
            start_control_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, start_control_reg.read())) {
            start_control_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, real_start.read())) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 = exitcond_i_i_i_reg_212.read();
        exitcond_i_i_i_reg_212 = exitcond_i_i_i_fu_188_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_i_reg_212.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_221 = m_axi_from_RDATA.read();
    }
}

void load5::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[7];
}

void load5::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void load5::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[8];
}

void load5::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void load5::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load5::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_i_reg_212.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_from_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, to_V_full_n.read())));
}

void load5::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_i_reg_212.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_from_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, to_V_full_n.read())));
}

void load5::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_i_reg_212.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_from_RVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, to_V_full_n.read())));
}

void load5::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void load5::thread_ap_block_state10_pp0_stage0_iter2() {
    ap_block_state10_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212.read()) && esl_seteq<1,1,1>(ap_const_logic_0, to_V_full_n.read()));
}

void load5::thread_ap_block_state7() {
    ap_block_state7 = (esl_seteq<1,1,1>(ap_const_logic_0, output_ddr0_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_out_full_n.read()));
}

void load5::thread_ap_block_state8_pp0_stage0_iter0() {
    ap_block_state8_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void load5::thread_ap_block_state9_pp0_stage0_iter1() {
    ap_block_state9_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_i_reg_212.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_from_RVALID.read()));
}

void load5::thread_ap_condition_166() {
    ap_condition_166 = !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_from_ARREADY.read()));
}

void load5::thread_ap_condition_312() {
    ap_condition_312 = (!(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, m_axi_from_ARREADY.read()));
}

void load5::thread_ap_condition_pp0_exit_iter0_state8() {
    if (esl_seteq<1,1,1>(exitcond_i_i_i_fu_188_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state8 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state8 = ap_const_logic_0;
    }
}

void load5::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void load5::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void load5::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void load5::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void load5::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void load5::thread_ap_sig_ioackin_m_axi_from_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_from_ARREADY.read())) {
        ap_sig_ioackin_m_axi_from_ARREADY = m_axi_from_ARREADY.read();
    } else {
        ap_sig_ioackin_m_axi_from_ARREADY = ap_const_logic_1;
    }
}

void load5::thread_data_count_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        data_count_out_blk_n = data_count_out_full_n.read();
    } else {
        data_count_out_blk_n = ap_const_logic_1;
    }
}

void load5::thread_data_count_out_din() {
    data_count_out_din = data_count.read();
}

void load5::thread_data_count_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, output_ddr0_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_out_full_n.read())))) {
        data_count_out_write = ap_const_logic_1;
    } else {
        data_count_out_write = ap_const_logic_0;
    }
}

void load5::thread_exitcond_i_i_i_fu_188_p2() {
    exitcond_i_i_i_fu_188_p2 = (!i_i_i_i_reg_156.read().is_01() || !data_count.read().is_01())? sc_lv<1>(): sc_lv<1>(i_i_i_i_reg_156.read() == data_count.read());
}

void load5::thread_from_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        from_blk_n_AR = m_axi_from_ARREADY.read();
    } else {
        from_blk_n_AR = ap_const_logic_1;
    }
}

void load5::thread_from_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_i_reg_212.read()))) {
        from_blk_n_R = m_axi_from_RVALID.read();
    } else {
        from_blk_n_R = ap_const_logic_1;
    }
}

void load5::thread_from_offset1_i_i_fu_167_p4() {
    from_offset1_i_i_fu_167_p4 = from_offset.read().range(63, 3);
}

void load5::thread_i_fu_193_p2() {
    i_fu_193_p2 = (!i_i_i_i_reg_156.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_i_i_i_reg_156.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void load5::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void load5::thread_m_axi_from_ARADDR() {
    m_axi_from_ARADDR = tmp_4_i_i_fu_177_p1.read();
}

void load5::thread_m_axi_from_ARBURST() {
    m_axi_from_ARBURST = ap_const_lv2_0;
}

void load5::thread_m_axi_from_ARCACHE() {
    m_axi_from_ARCACHE = ap_const_lv4_0;
}

void load5::thread_m_axi_from_ARID() {
    m_axi_from_ARID = ap_const_lv1_0;
}

void load5::thread_m_axi_from_ARLEN() {
    m_axi_from_ARLEN = data_count.read();
}

void load5::thread_m_axi_from_ARLOCK() {
    m_axi_from_ARLOCK = ap_const_lv2_0;
}

void load5::thread_m_axi_from_ARPROT() {
    m_axi_from_ARPROT = ap_const_lv3_0;
}

void load5::thread_m_axi_from_ARQOS() {
    m_axi_from_ARQOS = ap_const_lv4_0;
}

void load5::thread_m_axi_from_ARREGION() {
    m_axi_from_ARREGION = ap_const_lv4_0;
}

void load5::thread_m_axi_from_ARSIZE() {
    m_axi_from_ARSIZE = ap_const_lv3_0;
}

void load5::thread_m_axi_from_ARUSER() {
    m_axi_from_ARUSER = ap_const_lv1_0;
}

void load5::thread_m_axi_from_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_from_ARREADY.read()))) {
        m_axi_from_ARVALID = ap_const_logic_1;
    } else {
        m_axi_from_ARVALID = ap_const_logic_0;
    }
}

void load5::thread_m_axi_from_AWADDR() {
    m_axi_from_AWADDR = ap_const_lv64_0;
}

void load5::thread_m_axi_from_AWBURST() {
    m_axi_from_AWBURST = ap_const_lv2_0;
}

void load5::thread_m_axi_from_AWCACHE() {
    m_axi_from_AWCACHE = ap_const_lv4_0;
}

void load5::thread_m_axi_from_AWID() {
    m_axi_from_AWID = ap_const_lv1_0;
}

void load5::thread_m_axi_from_AWLEN() {
    m_axi_from_AWLEN = ap_const_lv32_0;
}

void load5::thread_m_axi_from_AWLOCK() {
    m_axi_from_AWLOCK = ap_const_lv2_0;
}

void load5::thread_m_axi_from_AWPROT() {
    m_axi_from_AWPROT = ap_const_lv3_0;
}

void load5::thread_m_axi_from_AWQOS() {
    m_axi_from_AWQOS = ap_const_lv4_0;
}

void load5::thread_m_axi_from_AWREGION() {
    m_axi_from_AWREGION = ap_const_lv4_0;
}

void load5::thread_m_axi_from_AWSIZE() {
    m_axi_from_AWSIZE = ap_const_lv3_0;
}

void load5::thread_m_axi_from_AWUSER() {
    m_axi_from_AWUSER = ap_const_lv1_0;
}

void load5::thread_m_axi_from_AWVALID() {
    m_axi_from_AWVALID = ap_const_logic_0;
}

void load5::thread_m_axi_from_BREADY() {
    m_axi_from_BREADY = ap_const_logic_0;
}

void load5::thread_m_axi_from_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_i_reg_212.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_from_RREADY = ap_const_logic_1;
    } else {
        m_axi_from_RREADY = ap_const_logic_0;
    }
}

void load5::thread_m_axi_from_WDATA() {
    m_axi_from_WDATA = ap_const_lv64_0;
}

void load5::thread_m_axi_from_WID() {
    m_axi_from_WID = ap_const_lv1_0;
}

void load5::thread_m_axi_from_WLAST() {
    m_axi_from_WLAST = ap_const_logic_0;
}

void load5::thread_m_axi_from_WSTRB() {
    m_axi_from_WSTRB = ap_const_lv8_0;
}

void load5::thread_m_axi_from_WUSER() {
    m_axi_from_WUSER = ap_const_lv1_0;
}

void load5::thread_m_axi_from_WVALID() {
    m_axi_from_WVALID = ap_const_logic_0;
}

void load5::thread_output_ddr0_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        output_ddr0_out_blk_n = output_ddr0_out_full_n.read();
    } else {
        output_ddr0_out_blk_n = ap_const_logic_1;
    }
}

void load5::thread_output_ddr0_out_din() {
    output_ddr0_out_din = output_ddr0.read();
}

void load5::thread_output_ddr0_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, output_ddr0_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_out_full_n.read())))) {
        output_ddr0_out_write = ap_const_logic_1;
    } else {
        output_ddr0_out_write = ap_const_logic_0;
    }
}

void load5::thread_real_start() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, real_start_status_reg.read())) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void load5::thread_start_out() {
    start_out = real_start.read();
}

void load5::thread_start_write() {
    start_write = start_control_reg.read();
}

void load5::thread_tmp_4_i_i_fu_177_p1() {
    tmp_4_i_i_fu_177_p1 = esl_zext<64,61>(from_offset1_i_i_fu_167_p4.read());
}

void load5::thread_to_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212.read()))) {
        to_V_blk_n = to_V_full_n.read();
    } else {
        to_V_blk_n = ap_const_logic_1;
    }
}

void load5::thread_to_V_din() {
    to_V_din = tmp_reg_221.read();
}

void load5::thread_to_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        to_V_write = ap_const_logic_1;
    } else {
        to_V_write = ap_const_logic_0;
    }
}

void load5::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_from_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, output_ddr0_out_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_i_i_i_fu_188_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(exitcond_i_i_i_fu_188_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

}

