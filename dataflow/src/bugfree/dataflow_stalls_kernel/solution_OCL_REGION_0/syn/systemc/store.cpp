// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "store.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic store::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic store::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> store::ap_ST_fsm_state1 = "1";
const sc_lv<8> store::ap_ST_fsm_state2 = "10";
const sc_lv<8> store::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<8> store::ap_ST_fsm_state6 = "1000";
const sc_lv<8> store::ap_ST_fsm_state7 = "10000";
const sc_lv<8> store::ap_ST_fsm_state8 = "100000";
const sc_lv<8> store::ap_ST_fsm_state9 = "1000000";
const sc_lv<8> store::ap_ST_fsm_state10 = "10000000";
const sc_lv<32> store::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool store::ap_const_boolean_1 = true;
const sc_lv<64> store::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> store::ap_const_lv1_0 = "0";
const sc_lv<3> store::ap_const_lv3_0 = "000";
const sc_lv<2> store::ap_const_lv2_0 = "00";
const sc_lv<4> store::ap_const_lv4_0 = "0000";
const sc_lv<32> store::ap_const_lv32_1 = "1";
const bool store::ap_const_boolean_0 = false;
const sc_lv<32> store::ap_const_lv32_7 = "111";
const sc_lv<32> store::ap_const_lv32_2 = "10";
const sc_lv<1> store::ap_const_lv1_1 = "1";
const sc_lv<8> store::ap_const_lv8_FF = "11111111";
const sc_lv<32> store::ap_const_lv32_3 = "11";
const sc_lv<32> store::ap_const_lv32_3F = "111111";

store::store(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( from_V_empty_n );
    sensitive << ( exitcond_i_i_reg_190 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( from_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_reg_190 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( from_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond_i_i_reg_190 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( to_offset_empty_n );
    sensitive << ( data_count_empty_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( from_V_empty_n );
    sensitive << ( exitcond_i_i_reg_190 );

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_reg_190 );
    sensitive << ( ap_sig_ioackin_m_axi_to_r_WREADY );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_i_i_fu_162_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( m_axi_to_r_BVALID );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_to_r_BVALID );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_to_r_AWREADY);
    sensitive << ( m_axi_to_r_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_to_r_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_to_r_WREADY);
    sensitive << ( m_axi_to_r_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_to_r_WREADY );

    SC_METHOD(thread_data_count_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data_count_empty_n );

    SC_METHOD(thread_data_count_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( to_offset_empty_n );
    sensitive << ( data_count_empty_n );

    SC_METHOD(thread_exitcond_i_i_fu_162_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( i_i_i_reg_131 );
    sensitive << ( data_count_read_reg_178 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_from_V_blk_n);
    sensitive << ( from_V_empty_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_i_reg_190 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_from_V_read);
    sensitive << ( exitcond_i_i_reg_190 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_i_fu_167_p2);
    sensitive << ( i_i_i_reg_131 );

    SC_METHOD(thread_m_axi_to_r_ARADDR);

    SC_METHOD(thread_m_axi_to_r_ARBURST);

    SC_METHOD(thread_m_axi_to_r_ARCACHE);

    SC_METHOD(thread_m_axi_to_r_ARID);

    SC_METHOD(thread_m_axi_to_r_ARLEN);

    SC_METHOD(thread_m_axi_to_r_ARLOCK);

    SC_METHOD(thread_m_axi_to_r_ARPROT);

    SC_METHOD(thread_m_axi_to_r_ARQOS);

    SC_METHOD(thread_m_axi_to_r_ARREGION);

    SC_METHOD(thread_m_axi_to_r_ARSIZE);

    SC_METHOD(thread_m_axi_to_r_ARUSER);

    SC_METHOD(thread_m_axi_to_r_ARVALID);

    SC_METHOD(thread_m_axi_to_r_AWADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_i_fu_152_p1 );
    sensitive << ( ap_reg_ioackin_m_axi_to_r_AWREADY );

    SC_METHOD(thread_m_axi_to_r_AWBURST);

    SC_METHOD(thread_m_axi_to_r_AWCACHE);

    SC_METHOD(thread_m_axi_to_r_AWID);

    SC_METHOD(thread_m_axi_to_r_AWLEN);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( data_count_read_reg_178 );
    sensitive << ( ap_reg_ioackin_m_axi_to_r_AWREADY );

    SC_METHOD(thread_m_axi_to_r_AWLOCK);

    SC_METHOD(thread_m_axi_to_r_AWPROT);

    SC_METHOD(thread_m_axi_to_r_AWQOS);

    SC_METHOD(thread_m_axi_to_r_AWREGION);

    SC_METHOD(thread_m_axi_to_r_AWSIZE);

    SC_METHOD(thread_m_axi_to_r_AWUSER);

    SC_METHOD(thread_m_axi_to_r_AWVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_m_axi_to_r_AWREADY );

    SC_METHOD(thread_m_axi_to_r_BREADY);
    sensitive << ( m_axi_to_r_BVALID );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_m_axi_to_r_RREADY);

    SC_METHOD(thread_m_axi_to_r_WDATA);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_reg_190 );
    sensitive << ( tmp_reg_199 );
    sensitive << ( ap_reg_ioackin_m_axi_to_r_WREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_to_r_WID);

    SC_METHOD(thread_m_axi_to_r_WLAST);

    SC_METHOD(thread_m_axi_to_r_WSTRB);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_reg_190 );
    sensitive << ( ap_reg_ioackin_m_axi_to_r_WREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_to_r_WUSER);

    SC_METHOD(thread_m_axi_to_r_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_reg_190 );
    sensitive << ( ap_reg_ioackin_m_axi_to_r_WREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_tmp_1_i_fu_152_p1);
    sensitive << ( to_offset1_i_reg_173 );

    SC_METHOD(thread_to_offset_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( to_offset_empty_n );

    SC_METHOD(thread_to_offset_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( to_offset_empty_n );
    sensitive << ( data_count_empty_n );

    SC_METHOD(thread_to_r_blk_n_AW);
    sensitive << ( m_axi_to_r_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_to_r_blk_n_B);
    sensitive << ( m_axi_to_r_BVALID );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_to_r_blk_n_W);
    sensitive << ( m_axi_to_r_WREADY );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_i_reg_190 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_to_r_BVALID );
    sensitive << ( to_offset_empty_n );
    sensitive << ( data_count_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_sig_ioackin_m_axi_to_r_AWREADY );
    sensitive << ( exitcond_i_i_fu_162_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00000001";
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_to_r_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_to_r_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "store_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, m_axi_to_r_AWVALID, "(port)m_axi_to_r_AWVALID");
    sc_trace(mVcdFile, m_axi_to_r_AWREADY, "(port)m_axi_to_r_AWREADY");
    sc_trace(mVcdFile, m_axi_to_r_AWADDR, "(port)m_axi_to_r_AWADDR");
    sc_trace(mVcdFile, m_axi_to_r_AWID, "(port)m_axi_to_r_AWID");
    sc_trace(mVcdFile, m_axi_to_r_AWLEN, "(port)m_axi_to_r_AWLEN");
    sc_trace(mVcdFile, m_axi_to_r_AWSIZE, "(port)m_axi_to_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_to_r_AWBURST, "(port)m_axi_to_r_AWBURST");
    sc_trace(mVcdFile, m_axi_to_r_AWLOCK, "(port)m_axi_to_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_to_r_AWCACHE, "(port)m_axi_to_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_to_r_AWPROT, "(port)m_axi_to_r_AWPROT");
    sc_trace(mVcdFile, m_axi_to_r_AWQOS, "(port)m_axi_to_r_AWQOS");
    sc_trace(mVcdFile, m_axi_to_r_AWREGION, "(port)m_axi_to_r_AWREGION");
    sc_trace(mVcdFile, m_axi_to_r_AWUSER, "(port)m_axi_to_r_AWUSER");
    sc_trace(mVcdFile, m_axi_to_r_WVALID, "(port)m_axi_to_r_WVALID");
    sc_trace(mVcdFile, m_axi_to_r_WREADY, "(port)m_axi_to_r_WREADY");
    sc_trace(mVcdFile, m_axi_to_r_WDATA, "(port)m_axi_to_r_WDATA");
    sc_trace(mVcdFile, m_axi_to_r_WSTRB, "(port)m_axi_to_r_WSTRB");
    sc_trace(mVcdFile, m_axi_to_r_WLAST, "(port)m_axi_to_r_WLAST");
    sc_trace(mVcdFile, m_axi_to_r_WID, "(port)m_axi_to_r_WID");
    sc_trace(mVcdFile, m_axi_to_r_WUSER, "(port)m_axi_to_r_WUSER");
    sc_trace(mVcdFile, m_axi_to_r_ARVALID, "(port)m_axi_to_r_ARVALID");
    sc_trace(mVcdFile, m_axi_to_r_ARREADY, "(port)m_axi_to_r_ARREADY");
    sc_trace(mVcdFile, m_axi_to_r_ARADDR, "(port)m_axi_to_r_ARADDR");
    sc_trace(mVcdFile, m_axi_to_r_ARID, "(port)m_axi_to_r_ARID");
    sc_trace(mVcdFile, m_axi_to_r_ARLEN, "(port)m_axi_to_r_ARLEN");
    sc_trace(mVcdFile, m_axi_to_r_ARSIZE, "(port)m_axi_to_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_to_r_ARBURST, "(port)m_axi_to_r_ARBURST");
    sc_trace(mVcdFile, m_axi_to_r_ARLOCK, "(port)m_axi_to_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_to_r_ARCACHE, "(port)m_axi_to_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_to_r_ARPROT, "(port)m_axi_to_r_ARPROT");
    sc_trace(mVcdFile, m_axi_to_r_ARQOS, "(port)m_axi_to_r_ARQOS");
    sc_trace(mVcdFile, m_axi_to_r_ARREGION, "(port)m_axi_to_r_ARREGION");
    sc_trace(mVcdFile, m_axi_to_r_ARUSER, "(port)m_axi_to_r_ARUSER");
    sc_trace(mVcdFile, m_axi_to_r_RVALID, "(port)m_axi_to_r_RVALID");
    sc_trace(mVcdFile, m_axi_to_r_RREADY, "(port)m_axi_to_r_RREADY");
    sc_trace(mVcdFile, m_axi_to_r_RDATA, "(port)m_axi_to_r_RDATA");
    sc_trace(mVcdFile, m_axi_to_r_RLAST, "(port)m_axi_to_r_RLAST");
    sc_trace(mVcdFile, m_axi_to_r_RID, "(port)m_axi_to_r_RID");
    sc_trace(mVcdFile, m_axi_to_r_RUSER, "(port)m_axi_to_r_RUSER");
    sc_trace(mVcdFile, m_axi_to_r_RRESP, "(port)m_axi_to_r_RRESP");
    sc_trace(mVcdFile, m_axi_to_r_BVALID, "(port)m_axi_to_r_BVALID");
    sc_trace(mVcdFile, m_axi_to_r_BREADY, "(port)m_axi_to_r_BREADY");
    sc_trace(mVcdFile, m_axi_to_r_BRESP, "(port)m_axi_to_r_BRESP");
    sc_trace(mVcdFile, m_axi_to_r_BID, "(port)m_axi_to_r_BID");
    sc_trace(mVcdFile, m_axi_to_r_BUSER, "(port)m_axi_to_r_BUSER");
    sc_trace(mVcdFile, to_offset_dout, "(port)to_offset_dout");
    sc_trace(mVcdFile, to_offset_empty_n, "(port)to_offset_empty_n");
    sc_trace(mVcdFile, to_offset_read, "(port)to_offset_read");
    sc_trace(mVcdFile, from_V_dout, "(port)from_V_dout");
    sc_trace(mVcdFile, from_V_empty_n, "(port)from_V_empty_n");
    sc_trace(mVcdFile, from_V_read, "(port)from_V_read");
    sc_trace(mVcdFile, data_count_dout, "(port)data_count_dout");
    sc_trace(mVcdFile, data_count_empty_n, "(port)data_count_empty_n");
    sc_trace(mVcdFile, data_count_read, "(port)data_count_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, to_r_blk_n_AW, "to_r_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, to_r_blk_n_W, "to_r_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_i_i_reg_190, "exitcond_i_i_reg_190");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_exitcond_i_i_reg_190, "ap_reg_pp0_iter1_exitcond_i_i_reg_190");
    sc_trace(mVcdFile, to_r_blk_n_B, "to_r_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, to_offset_blk_n, "to_offset_blk_n");
    sc_trace(mVcdFile, from_V_blk_n, "from_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, data_count_blk_n, "data_count_blk_n");
    sc_trace(mVcdFile, i_i_i_reg_131, "i_i_i_reg_131");
    sc_trace(mVcdFile, to_offset1_i_reg_173, "to_offset1_i_reg_173");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, data_count_read_reg_178, "data_count_read_reg_178");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_to_r_AWREADY, "ap_sig_ioackin_m_axi_to_r_AWREADY");
    sc_trace(mVcdFile, exitcond_i_i_fu_162_p2, "exitcond_i_i_fu_162_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter2, "ap_block_state5_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_to_r_WREADY, "ap_sig_ioackin_m_axi_to_r_WREADY");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_167_p2, "i_fu_167_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_reg_199, "tmp_reg_199");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, tmp_1_i_fu_152_p1, "tmp_1_i_fu_152_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_to_r_AWREADY, "ap_reg_ioackin_m_axi_to_r_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_to_r_WREADY, "ap_reg_ioackin_m_axi_to_r_WREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

store::~store() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void store::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                    esl_seteq<1,1,1>(m_axi_to_r_BVALID.read(), ap_const_logic_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_to_r_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_to_r_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_to_r_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_to_r_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_to_r_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_to_r_AWREADY.read())) {
                ap_reg_ioackin_m_axi_to_r_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_to_r_WREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_i_reg_190.read()))) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_to_r_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axi_to_r_WREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_m_axi_to_r_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_fu_162_p2.read()))) {
        i_i_i_reg_131 = i_fu_167_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_to_r_AWREADY.read(), ap_const_logic_1))) {
        i_i_i_reg_131 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_exitcond_i_i_reg_190 = exitcond_i_i_reg_190.read();
        exitcond_i_i_reg_190 = exitcond_i_i_fu_162_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, to_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_empty_n.read())))) {
        data_count_read_reg_178 = data_count_dout.read();
        to_offset1_i_reg_173 = to_offset_dout.read().range(63, 3);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_190.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_199 = from_V_dout.read();
    }
}

void store::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void store::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void store::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[7];
}

void store::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void store::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void store::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_190.read()) && esl_seteq<1,1,1>(ap_const_logic_0, from_V_empty_n.read()));
}

void store::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_190.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())));
}

void store::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_190.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, from_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())));
}

void store::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, to_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_empty_n.read()));
}

void store::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void store::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_190.read()) && esl_seteq<1,1,1>(ap_const_logic_0, from_V_empty_n.read()));
}

void store::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_i_reg_190.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_to_r_WREADY.read()));
}

void store::thread_ap_block_state5_pp0_stage0_iter2() {
    ap_block_state5_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void store::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(exitcond_i_i_fu_162_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void store::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(m_axi_to_r_BVALID.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void store::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void store::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void store::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void store::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(m_axi_to_r_BVALID.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void store::thread_ap_sig_ioackin_m_axi_to_r_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_to_r_AWREADY.read())) {
        ap_sig_ioackin_m_axi_to_r_AWREADY = m_axi_to_r_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_to_r_AWREADY = ap_const_logic_1;
    }
}

void store::thread_ap_sig_ioackin_m_axi_to_r_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_to_r_WREADY.read())) {
        ap_sig_ioackin_m_axi_to_r_WREADY = m_axi_to_r_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_to_r_WREADY = ap_const_logic_1;
    }
}

void store::thread_data_count_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        data_count_blk_n = data_count_empty_n.read();
    } else {
        data_count_blk_n = ap_const_logic_1;
    }
}

void store::thread_data_count_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, to_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_empty_n.read())))) {
        data_count_read = ap_const_logic_1;
    } else {
        data_count_read = ap_const_logic_0;
    }
}

void store::thread_exitcond_i_i_fu_162_p2() {
    exitcond_i_i_fu_162_p2 = (!i_i_i_reg_131.read().is_01() || !data_count_read_reg_178.read().is_01())? sc_lv<1>(): sc_lv<1>(i_i_i_reg_131.read() == data_count_read_reg_178.read());
}

void store::thread_from_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_190.read()))) {
        from_V_blk_n = from_V_empty_n.read();
    } else {
        from_V_blk_n = ap_const_logic_1;
    }
}

void store::thread_from_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_i_reg_190.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        from_V_read = ap_const_logic_1;
    } else {
        from_V_read = ap_const_logic_0;
    }
}

void store::thread_i_fu_167_p2() {
    i_fu_167_p2 = (!i_i_i_reg_131.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_i_i_reg_131.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void store::thread_m_axi_to_r_ARADDR() {
    m_axi_to_r_ARADDR = ap_const_lv64_0;
}

void store::thread_m_axi_to_r_ARBURST() {
    m_axi_to_r_ARBURST = ap_const_lv2_0;
}

void store::thread_m_axi_to_r_ARCACHE() {
    m_axi_to_r_ARCACHE = ap_const_lv4_0;
}

void store::thread_m_axi_to_r_ARID() {
    m_axi_to_r_ARID = ap_const_lv1_0;
}

void store::thread_m_axi_to_r_ARLEN() {
    m_axi_to_r_ARLEN = ap_const_lv32_0;
}

void store::thread_m_axi_to_r_ARLOCK() {
    m_axi_to_r_ARLOCK = ap_const_lv2_0;
}

void store::thread_m_axi_to_r_ARPROT() {
    m_axi_to_r_ARPROT = ap_const_lv3_0;
}

void store::thread_m_axi_to_r_ARQOS() {
    m_axi_to_r_ARQOS = ap_const_lv4_0;
}

void store::thread_m_axi_to_r_ARREGION() {
    m_axi_to_r_ARREGION = ap_const_lv4_0;
}

void store::thread_m_axi_to_r_ARSIZE() {
    m_axi_to_r_ARSIZE = ap_const_lv3_0;
}

void store::thread_m_axi_to_r_ARUSER() {
    m_axi_to_r_ARUSER = ap_const_lv1_0;
}

void store::thread_m_axi_to_r_ARVALID() {
    m_axi_to_r_ARVALID = ap_const_logic_0;
}

void store::thread_m_axi_to_r_AWADDR() {
    m_axi_to_r_AWADDR = tmp_1_i_fu_152_p1.read();
}

void store::thread_m_axi_to_r_AWBURST() {
    m_axi_to_r_AWBURST = ap_const_lv2_0;
}

void store::thread_m_axi_to_r_AWCACHE() {
    m_axi_to_r_AWCACHE = ap_const_lv4_0;
}

void store::thread_m_axi_to_r_AWID() {
    m_axi_to_r_AWID = ap_const_lv1_0;
}

void store::thread_m_axi_to_r_AWLEN() {
    m_axi_to_r_AWLEN = data_count_read_reg_178.read();
}

void store::thread_m_axi_to_r_AWLOCK() {
    m_axi_to_r_AWLOCK = ap_const_lv2_0;
}

void store::thread_m_axi_to_r_AWPROT() {
    m_axi_to_r_AWPROT = ap_const_lv3_0;
}

void store::thread_m_axi_to_r_AWQOS() {
    m_axi_to_r_AWQOS = ap_const_lv4_0;
}

void store::thread_m_axi_to_r_AWREGION() {
    m_axi_to_r_AWREGION = ap_const_lv4_0;
}

void store::thread_m_axi_to_r_AWSIZE() {
    m_axi_to_r_AWSIZE = ap_const_lv3_0;
}

void store::thread_m_axi_to_r_AWUSER() {
    m_axi_to_r_AWUSER = ap_const_lv1_0;
}

void store::thread_m_axi_to_r_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_to_r_AWREADY.read()))) {
        m_axi_to_r_AWVALID = ap_const_logic_1;
    } else {
        m_axi_to_r_AWVALID = ap_const_logic_0;
    }
}

void store::thread_m_axi_to_r_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
         esl_seteq<1,1,1>(m_axi_to_r_BVALID.read(), ap_const_logic_1))) {
        m_axi_to_r_BREADY = ap_const_logic_1;
    } else {
        m_axi_to_r_BREADY = ap_const_logic_0;
    }
}

void store::thread_m_axi_to_r_RREADY() {
    m_axi_to_r_RREADY = ap_const_logic_0;
}

void store::thread_m_axi_to_r_WDATA() {
    m_axi_to_r_WDATA = tmp_reg_199.read();
}

void store::thread_m_axi_to_r_WID() {
    m_axi_to_r_WID = ap_const_lv1_0;
}

void store::thread_m_axi_to_r_WLAST() {
    m_axi_to_r_WLAST = ap_const_logic_0;
}

void store::thread_m_axi_to_r_WSTRB() {
    m_axi_to_r_WSTRB = ap_const_lv8_FF;
}

void store::thread_m_axi_to_r_WUSER() {
    m_axi_to_r_WUSER = ap_const_lv1_0;
}

void store::thread_m_axi_to_r_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_i_reg_190.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_to_r_WREADY.read()))) {
        m_axi_to_r_WVALID = ap_const_logic_1;
    } else {
        m_axi_to_r_WVALID = ap_const_logic_0;
    }
}

void store::thread_tmp_1_i_fu_152_p1() {
    tmp_1_i_fu_152_p1 = esl_zext<64,61>(to_offset1_i_reg_173.read());
}

void store::thread_to_offset_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        to_offset_blk_n = to_offset_empty_n.read();
    } else {
        to_offset_blk_n = ap_const_logic_1;
    }
}

void store::thread_to_offset_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, to_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_empty_n.read())))) {
        to_offset_read = ap_const_logic_1;
    } else {
        to_offset_read = ap_const_logic_0;
    }
}

void store::thread_to_r_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        to_r_blk_n_AW = m_axi_to_r_AWREADY.read();
    } else {
        to_r_blk_n_AW = ap_const_logic_1;
    }
}

void store::thread_to_r_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        to_r_blk_n_B = m_axi_to_r_BVALID.read();
    } else {
        to_r_blk_n_B = ap_const_logic_1;
    }
}

void store::thread_to_r_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_i_reg_190.read()))) {
        to_r_blk_n_W = m_axi_to_r_WREADY.read();
    } else {
        to_r_blk_n_W = ap_const_logic_1;
    }
}

void store::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, to_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, data_count_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_to_r_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_i_i_fu_162_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(exitcond_i_i_fu_162_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(m_axi_to_r_BVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

