// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load5 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        to_V_din,
        to_V_full_n,
        to_V_write,
        m_axi_from_AWVALID,
        m_axi_from_AWREADY,
        m_axi_from_AWADDR,
        m_axi_from_AWID,
        m_axi_from_AWLEN,
        m_axi_from_AWSIZE,
        m_axi_from_AWBURST,
        m_axi_from_AWLOCK,
        m_axi_from_AWCACHE,
        m_axi_from_AWPROT,
        m_axi_from_AWQOS,
        m_axi_from_AWREGION,
        m_axi_from_AWUSER,
        m_axi_from_WVALID,
        m_axi_from_WREADY,
        m_axi_from_WDATA,
        m_axi_from_WSTRB,
        m_axi_from_WLAST,
        m_axi_from_WID,
        m_axi_from_WUSER,
        m_axi_from_ARVALID,
        m_axi_from_ARREADY,
        m_axi_from_ARADDR,
        m_axi_from_ARID,
        m_axi_from_ARLEN,
        m_axi_from_ARSIZE,
        m_axi_from_ARBURST,
        m_axi_from_ARLOCK,
        m_axi_from_ARCACHE,
        m_axi_from_ARPROT,
        m_axi_from_ARQOS,
        m_axi_from_ARREGION,
        m_axi_from_ARUSER,
        m_axi_from_RVALID,
        m_axi_from_RREADY,
        m_axi_from_RDATA,
        m_axi_from_RLAST,
        m_axi_from_RID,
        m_axi_from_RUSER,
        m_axi_from_RRESP,
        m_axi_from_BVALID,
        m_axi_from_BREADY,
        m_axi_from_BRESP,
        m_axi_from_BID,
        m_axi_from_BUSER,
        from_offset,
        data_count,
        data_count_out_din,
        data_count_out_full_n,
        data_count_out_write,
        output_ddr0,
        output_ddr0_out_din,
        output_ddr0_out_full_n,
        output_ddr0_out_write
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_pp0_stage0 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
output  [63:0] to_V_din;
input   to_V_full_n;
output   to_V_write;
output   m_axi_from_AWVALID;
input   m_axi_from_AWREADY;
output  [63:0] m_axi_from_AWADDR;
output  [0:0] m_axi_from_AWID;
output  [31:0] m_axi_from_AWLEN;
output  [2:0] m_axi_from_AWSIZE;
output  [1:0] m_axi_from_AWBURST;
output  [1:0] m_axi_from_AWLOCK;
output  [3:0] m_axi_from_AWCACHE;
output  [2:0] m_axi_from_AWPROT;
output  [3:0] m_axi_from_AWQOS;
output  [3:0] m_axi_from_AWREGION;
output  [0:0] m_axi_from_AWUSER;
output   m_axi_from_WVALID;
input   m_axi_from_WREADY;
output  [63:0] m_axi_from_WDATA;
output  [7:0] m_axi_from_WSTRB;
output   m_axi_from_WLAST;
output  [0:0] m_axi_from_WID;
output  [0:0] m_axi_from_WUSER;
output   m_axi_from_ARVALID;
input   m_axi_from_ARREADY;
output  [63:0] m_axi_from_ARADDR;
output  [0:0] m_axi_from_ARID;
output  [31:0] m_axi_from_ARLEN;
output  [2:0] m_axi_from_ARSIZE;
output  [1:0] m_axi_from_ARBURST;
output  [1:0] m_axi_from_ARLOCK;
output  [3:0] m_axi_from_ARCACHE;
output  [2:0] m_axi_from_ARPROT;
output  [3:0] m_axi_from_ARQOS;
output  [3:0] m_axi_from_ARREGION;
output  [0:0] m_axi_from_ARUSER;
input   m_axi_from_RVALID;
output   m_axi_from_RREADY;
input  [63:0] m_axi_from_RDATA;
input   m_axi_from_RLAST;
input  [0:0] m_axi_from_RID;
input  [0:0] m_axi_from_RUSER;
input  [1:0] m_axi_from_RRESP;
input   m_axi_from_BVALID;
output   m_axi_from_BREADY;
input  [1:0] m_axi_from_BRESP;
input  [0:0] m_axi_from_BID;
input  [0:0] m_axi_from_BUSER;
input  [63:0] from_offset;
input  [31:0] data_count;
output  [31:0] data_count_out_din;
input   data_count_out_full_n;
output   data_count_out_write;
input  [63:0] output_ddr0;
output  [63:0] output_ddr0_out_din;
input   output_ddr0_out_full_n;
output   output_ddr0_out_write;

reg ap_done;
reg ap_idle;
reg to_V_write;
reg m_axi_from_ARVALID;
reg m_axi_from_RREADY;
reg data_count_out_write;
reg output_ddr0_out_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    to_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_i_i_reg_212;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_i_i_reg_212;
reg    from_blk_n_AR;
reg    from_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    data_count_out_blk_n;
wire    ap_CS_fsm_state7;
reg    output_ddr0_out_blk_n;
reg   [31:0] i_i_i_i_reg_156;
reg    ap_block_state1;
reg    ap_sig_ioackin_m_axi_from_ARREADY;
wire   [0:0] exitcond_i_i_i_fu_188_p2;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_fu_193_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [63:0] tmp_reg_221;
reg    ap_block_state7;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire   [63:0] tmp_4_i_i_fu_177_p1;
reg    ap_reg_ioackin_m_axi_from_ARREADY;
reg    ap_block_pp0_stage0_01001;
wire   [60:0] from_offset1_i_i_fu_167_p4;
wire    ap_CS_fsm_state11;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_312;
reg    ap_condition_166;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_m_axi_from_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & ~((1'b0 == output_ddr0_out_full_n) | (1'b0 == data_count_out_full_n)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state8 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state7) & ~((1'b0 == output_ddr0_out_full_n) | (1'b0 == data_count_out_full_n)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_from_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ap_condition_166 == 1'b1)) begin
                ap_reg_ioackin_m_axi_from_ARREADY <= 1'b0;
            end else if ((ap_condition_312 == 1'b1)) begin
                ap_reg_ioackin_m_axi_from_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_i_i_i_fu_188_p2))) begin
        i_i_i_i_reg_156 <= i_fu_193_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & ~((1'b0 == output_ddr0_out_full_n) | (1'b0 == data_count_out_full_n)))) begin
        i_i_i_i_reg_156 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 <= exitcond_i_i_i_reg_212;
        exitcond_i_i_i_reg_212 <= exitcond_i_i_i_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_i_i_i_reg_212) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        tmp_reg_221 <= m_axi_from_RDATA;
    end
end

always @ (*) begin
    if ((exitcond_i_i_i_fu_188_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_from_ARREADY)) begin
        ap_sig_ioackin_m_axi_from_ARREADY = m_axi_from_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_from_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        data_count_out_blk_n = data_count_out_full_n;
    end else begin
        data_count_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~((1'b0 == output_ddr0_out_full_n) | (1'b0 == data_count_out_full_n)))) begin
        data_count_out_write = 1'b1;
    end else begin
        data_count_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        from_blk_n_AR = m_axi_from_ARREADY;
    end else begin
        from_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_i_reg_212))) begin
        from_blk_n_R = m_axi_from_RVALID;
    end else begin
        from_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)) & (1'b0 == ap_reg_ioackin_m_axi_from_ARREADY))) begin
        m_axi_from_ARVALID = 1'b1;
    end else begin
        m_axi_from_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_i_reg_212) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        m_axi_from_RREADY = 1'b1;
    end else begin
        m_axi_from_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_ddr0_out_blk_n = output_ddr0_out_full_n;
    end else begin
        output_ddr0_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~((1'b0 == output_ddr0_out_full_n) | (1'b0 == data_count_out_full_n)))) begin
        output_ddr0_out_write = 1'b1;
    end else begin
        output_ddr0_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_i_i_i_reg_212))) begin
        to_V_blk_n = to_V_full_n;
    end else begin
        to_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_i_i_i_reg_212) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        to_V_write = 1'b1;
    end else begin
        to_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == ap_sig_ioackin_m_axi_from_ARREADY)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ~((1'b0 == output_ddr0_out_full_n) | (1'b0 == data_count_out_full_n)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (exitcond_i_i_i_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (exitcond_i_i_i_fu_188_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_i_reg_212) & (1'b0 == m_axi_from_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_i_i_i_reg_212) & (1'b0 == to_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_i_reg_212) & (1'b0 == m_axi_from_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_i_i_i_reg_212) & (1'b0 == to_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_i_i_i_reg_212) & (1'b0 == m_axi_from_RVALID)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_i_i_i_reg_212) & (1'b0 == to_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter2 = ((1'd0 == ap_reg_pp0_iter1_exitcond_i_i_i_reg_212) & (1'b0 == to_V_full_n));
end

always @ (*) begin
    ap_block_state7 = ((1'b0 == output_ddr0_out_full_n) | (1'b0 == data_count_out_full_n));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((1'd0 == exitcond_i_i_i_reg_212) & (1'b0 == m_axi_from_RVALID));
end

always @ (*) begin
    ap_condition_166 = ~((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == ap_sig_ioackin_m_axi_from_ARREADY));
end

always @ (*) begin
    ap_condition_312 = (~((1'b0 == real_start) | (ap_done_reg == 1'b1)) & (1'b1 == m_axi_from_ARREADY));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign data_count_out_din = data_count;

assign exitcond_i_i_i_fu_188_p2 = ((i_i_i_i_reg_156 == data_count) ? 1'b1 : 1'b0);

assign from_offset1_i_i_fu_167_p4 = {{from_offset[63:3]}};

assign i_fu_193_p2 = (i_i_i_i_reg_156 + 32'd1);

assign m_axi_from_ARADDR = tmp_4_i_i_fu_177_p1;

assign m_axi_from_ARBURST = 2'd0;

assign m_axi_from_ARCACHE = 4'd0;

assign m_axi_from_ARID = 1'd0;

assign m_axi_from_ARLEN = data_count;

assign m_axi_from_ARLOCK = 2'd0;

assign m_axi_from_ARPROT = 3'd0;

assign m_axi_from_ARQOS = 4'd0;

assign m_axi_from_ARREGION = 4'd0;

assign m_axi_from_ARSIZE = 3'd0;

assign m_axi_from_ARUSER = 1'd0;

assign m_axi_from_AWADDR = 64'd0;

assign m_axi_from_AWBURST = 2'd0;

assign m_axi_from_AWCACHE = 4'd0;

assign m_axi_from_AWID = 1'd0;

assign m_axi_from_AWLEN = 32'd0;

assign m_axi_from_AWLOCK = 2'd0;

assign m_axi_from_AWPROT = 3'd0;

assign m_axi_from_AWQOS = 4'd0;

assign m_axi_from_AWREGION = 4'd0;

assign m_axi_from_AWSIZE = 3'd0;

assign m_axi_from_AWUSER = 1'd0;

assign m_axi_from_AWVALID = 1'b0;

assign m_axi_from_BREADY = 1'b0;

assign m_axi_from_WDATA = 64'd0;

assign m_axi_from_WID = 1'd0;

assign m_axi_from_WLAST = 1'b0;

assign m_axi_from_WSTRB = 8'd0;

assign m_axi_from_WUSER = 1'd0;

assign m_axi_from_WVALID = 1'b0;

assign output_ddr0_out_din = output_ddr0;

assign start_out = real_start;

assign start_write = start_control_reg;

assign tmp_4_i_i_fu_177_p1 = from_offset1_i_i_fu_167_p4;

assign to_V_din = tmp_reg_221;

endmodule //load5
