-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity load5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    to_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    to_V_full_n : IN STD_LOGIC;
    to_V_write : OUT STD_LOGIC;
    m_axi_from_AWVALID : OUT STD_LOGIC;
    m_axi_from_AWREADY : IN STD_LOGIC;
    m_axi_from_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_from_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_from_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_from_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_from_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_from_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_from_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_from_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_from_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_from_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_from_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_from_WVALID : OUT STD_LOGIC;
    m_axi_from_WREADY : IN STD_LOGIC;
    m_axi_from_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_from_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_from_WLAST : OUT STD_LOGIC;
    m_axi_from_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_from_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_from_ARVALID : OUT STD_LOGIC;
    m_axi_from_ARREADY : IN STD_LOGIC;
    m_axi_from_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_from_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_from_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_from_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_from_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_from_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_from_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_from_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_from_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_from_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_from_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_from_RVALID : IN STD_LOGIC;
    m_axi_from_RREADY : OUT STD_LOGIC;
    m_axi_from_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_from_RLAST : IN STD_LOGIC;
    m_axi_from_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_from_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_from_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_from_BVALID : IN STD_LOGIC;
    m_axi_from_BREADY : OUT STD_LOGIC;
    m_axi_from_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_from_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_from_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    from_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    data_count : IN STD_LOGIC_VECTOR (31 downto 0);
    data_count_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_count_out_full_n : IN STD_LOGIC;
    data_count_out_write : OUT STD_LOGIC;
    output_ddr0 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_ddr0_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_ddr0_out_full_n : IN STD_LOGIC;
    output_ddr0_out_write : OUT STD_LOGIC );
end;


architecture behav of load5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal to_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_i_i_reg_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 : STD_LOGIC_VECTOR (0 downto 0);
    signal from_blk_n_AR : STD_LOGIC;
    signal from_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal data_count_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal output_ddr0_out_blk_n : STD_LOGIC;
    signal i_i_i_i_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_from_ARREADY : STD_LOGIC;
    signal exitcond_i_i_i_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_reg_221 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal tmp_4_i_i_fu_177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_from_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal from_offset1_i_i_fu_167_p4 : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_312 : BOOLEAN;
    signal ap_condition_166 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = output_ddr0_out_full_n) or (ap_const_logic_0 = data_count_out_full_n))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state8 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = output_ddr0_out_full_n) or (ap_const_logic_0 = data_count_out_full_n))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_from_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_from_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ap_condition_166 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_m_axi_from_ARREADY <= ap_const_logic_0;
                    elsif ((ap_condition_312 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_m_axi_from_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if ((start_full_n = ap_const_logic_1)) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_0 = start_full_n) and (ap_const_logic_1 = internal_ap_ready))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = start_control_reg)) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_0 = ap_start)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_i_i_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_i_i_i_fu_188_p2))) then 
                i_i_i_i_reg_156 <= i_fu_193_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = output_ddr0_out_full_n) or (ap_const_logic_0 = data_count_out_full_n))))) then 
                i_i_i_i_reg_156 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_i_i_i_reg_212 <= exitcond_i_i_i_reg_212;
                exitcond_i_i_i_reg_212 <= exitcond_i_i_i_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_i_i_i_reg_212) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                tmp_reg_221 <= m_axi_from_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_count_out_full_n, output_ddr0_out_full_n, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state7, ap_sig_ioackin_m_axi_from_ARREADY, exitcond_i_i_i_fu_188_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_from_ARREADY))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = output_ddr0_out_full_n) or (ap_const_logic_0 = data_count_out_full_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (exitcond_i_i_i_fu_188_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (exitcond_i_i_i_fu_188_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(to_V_full_n, m_axi_from_RVALID, ap_enable_reg_pp0_iter2, exitcond_i_i_i_reg_212, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_i_i_i_reg_212) and (ap_const_logic_0 = m_axi_from_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_i_i_i_reg_212) and (ap_const_logic_0 = to_V_full_n)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(to_V_full_n, m_axi_from_RVALID, ap_enable_reg_pp0_iter2, exitcond_i_i_i_reg_212, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_i_i_i_reg_212) and (ap_const_logic_0 = m_axi_from_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_i_i_i_reg_212) and (ap_const_logic_0 = to_V_full_n)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(to_V_full_n, m_axi_from_RVALID, ap_enable_reg_pp0_iter2, exitcond_i_i_i_reg_212, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_i_i_i_reg_212) and (ap_const_logic_0 = m_axi_from_RVALID)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_i_i_i_reg_212) and (ap_const_logic_0 = to_V_full_n)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter2_assign_proc : process(to_V_full_n, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212)
    begin
                ap_block_state10_pp0_stage0_iter2 <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_i_i_i_reg_212) and (ap_const_logic_0 = to_V_full_n));
    end process;


    ap_block_state7_assign_proc : process(data_count_out_full_n, output_ddr0_out_full_n)
    begin
                ap_block_state7 <= ((ap_const_logic_0 = output_ddr0_out_full_n) or (ap_const_logic_0 = data_count_out_full_n));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter1_assign_proc : process(m_axi_from_RVALID, exitcond_i_i_i_reg_212)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((ap_const_lv1_0 = exitcond_i_i_i_reg_212) and (ap_const_logic_0 = m_axi_from_RVALID));
    end process;


    ap_condition_166_assign_proc : process(real_start, ap_done_reg, ap_sig_ioackin_m_axi_from_ARREADY)
    begin
                ap_condition_166 <= not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_from_ARREADY)));
    end process;


    ap_condition_312_assign_proc : process(real_start, ap_done_reg, m_axi_from_ARREADY)
    begin
                ap_condition_312 <= (not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = m_axi_from_ARREADY));
    end process;


    ap_condition_pp0_exit_iter0_state8_assign_proc : process(exitcond_i_i_i_fu_188_p2)
    begin
        if ((exitcond_i_i_i_fu_188_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_sig_ioackin_m_axi_from_ARREADY_assign_proc : process(m_axi_from_ARREADY, ap_reg_ioackin_m_axi_from_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_from_ARREADY)) then 
            ap_sig_ioackin_m_axi_from_ARREADY <= m_axi_from_ARREADY;
        else 
            ap_sig_ioackin_m_axi_from_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    data_count_out_blk_n_assign_proc : process(data_count_out_full_n, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_count_out_blk_n <= data_count_out_full_n;
        else 
            data_count_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_count_out_din <= data_count;

    data_count_out_write_assign_proc : process(data_count_out_full_n, output_ddr0_out_full_n, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = output_ddr0_out_full_n) or (ap_const_logic_0 = data_count_out_full_n))))) then 
            data_count_out_write <= ap_const_logic_1;
        else 
            data_count_out_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_i_i_fu_188_p2 <= "1" when (i_i_i_i_reg_156 = data_count) else "0";

    from_blk_n_AR_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, m_axi_from_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            from_blk_n_AR <= m_axi_from_ARREADY;
        else 
            from_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    from_blk_n_R_assign_proc : process(m_axi_from_RVALID, ap_block_pp0_stage0, exitcond_i_i_i_reg_212, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_i_i_i_reg_212))) then 
            from_blk_n_R <= m_axi_from_RVALID;
        else 
            from_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    from_offset1_i_i_fu_167_p4 <= from_offset(63 downto 3);
    i_fu_193_p2 <= std_logic_vector(unsigned(i_i_i_i_reg_156) + unsigned(ap_const_lv32_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_from_ARADDR <= tmp_4_i_i_fu_177_p1;
    m_axi_from_ARBURST <= ap_const_lv2_0;
    m_axi_from_ARCACHE <= ap_const_lv4_0;
    m_axi_from_ARID <= ap_const_lv1_0;
    m_axi_from_ARLEN <= data_count;
    m_axi_from_ARLOCK <= ap_const_lv2_0;
    m_axi_from_ARPROT <= ap_const_lv3_0;
    m_axi_from_ARQOS <= ap_const_lv4_0;
    m_axi_from_ARREGION <= ap_const_lv4_0;
    m_axi_from_ARSIZE <= ap_const_lv3_0;
    m_axi_from_ARUSER <= ap_const_lv1_0;

    m_axi_from_ARVALID_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ap_reg_ioackin_m_axi_from_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_from_ARREADY))) then 
            m_axi_from_ARVALID <= ap_const_logic_1;
        else 
            m_axi_from_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_from_AWADDR <= ap_const_lv64_0;
    m_axi_from_AWBURST <= ap_const_lv2_0;
    m_axi_from_AWCACHE <= ap_const_lv4_0;
    m_axi_from_AWID <= ap_const_lv1_0;
    m_axi_from_AWLEN <= ap_const_lv32_0;
    m_axi_from_AWLOCK <= ap_const_lv2_0;
    m_axi_from_AWPROT <= ap_const_lv3_0;
    m_axi_from_AWQOS <= ap_const_lv4_0;
    m_axi_from_AWREGION <= ap_const_lv4_0;
    m_axi_from_AWSIZE <= ap_const_lv3_0;
    m_axi_from_AWUSER <= ap_const_lv1_0;
    m_axi_from_AWVALID <= ap_const_logic_0;
    m_axi_from_BREADY <= ap_const_logic_0;

    m_axi_from_RREADY_assign_proc : process(exitcond_i_i_i_reg_212, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_i_i_i_reg_212) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
            m_axi_from_RREADY <= ap_const_logic_1;
        else 
            m_axi_from_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_from_WDATA <= ap_const_lv64_0;
    m_axi_from_WID <= ap_const_lv1_0;
    m_axi_from_WLAST <= ap_const_logic_0;
    m_axi_from_WSTRB <= ap_const_lv8_0;
    m_axi_from_WUSER <= ap_const_lv1_0;
    m_axi_from_WVALID <= ap_const_logic_0;

    output_ddr0_out_blk_n_assign_proc : process(output_ddr0_out_full_n, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_ddr0_out_blk_n <= output_ddr0_out_full_n;
        else 
            output_ddr0_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_ddr0_out_din <= output_ddr0;

    output_ddr0_out_write_assign_proc : process(data_count_out_full_n, output_ddr0_out_full_n, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and not(((ap_const_logic_0 = output_ddr0_out_full_n) or (ap_const_logic_0 = data_count_out_full_n))))) then 
            output_ddr0_out_write <= ap_const_logic_1;
        else 
            output_ddr0_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((ap_const_logic_1 = real_start_status_reg)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;
    start_write <= start_control_reg;
    tmp_4_i_i_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(from_offset1_i_i_fu_167_p4),64));

    to_V_blk_n_assign_proc : process(to_V_full_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_i_i_i_reg_212))) then 
            to_V_blk_n <= to_V_full_n;
        else 
            to_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    to_V_din <= tmp_reg_221;

    to_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond_i_i_i_reg_212, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_i_i_i_reg_212) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
            to_V_write <= ap_const_logic_1;
        else 
            to_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
