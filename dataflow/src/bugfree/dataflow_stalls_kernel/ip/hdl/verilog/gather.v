// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gather (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        to_V_din,
        to_V_full_n,
        to_V_write,
        from0_V_dout,
        from0_V_empty_n,
        from0_V_read,
        from1_V_dout,
        from1_V_empty_n,
        from1_V_read,
        data_count_dout,
        data_count_empty_n,
        data_count_read,
        data_count_out_din,
        data_count_out_full_n,
        data_count_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [63:0] to_V_din;
input   to_V_full_n;
output   to_V_write;
input  [63:0] from0_V_dout;
input   from0_V_empty_n;
output   from0_V_read;
input  [63:0] from1_V_dout;
input   from1_V_empty_n;
output   from1_V_read;
input  [31:0] data_count_dout;
input   data_count_empty_n;
output   data_count_read;
output  [31:0] data_count_out_din;
input   data_count_out_full_n;
output   data_count_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg to_V_write;
reg from0_V_read;
reg from1_V_read;
reg data_count_read;
reg data_count_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    to_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_204;
reg   [0:0] tmp_1_reg_208;
reg    from0_V_blk_n;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_i_fu_167_p2;
wire   [0:0] tmp_nbreadreq_fu_124_p3;
wire   [0:0] tmp_1_nbreadreq_fu_132_p3;
reg    from1_V_blk_n;
reg    data_count_blk_n;
reg    data_count_out_blk_n;
reg   [31:0] data_count_read_reg_196;
reg    ap_block_state1;
reg    ap_predicate_op22_read_state2;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op30_write_state3;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] tmp_4_fu_172_p2;
reg   [63:0] tmp_4_reg_212;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] i_1_fu_106;
wire   [31:0] i_fu_178_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n) | (1'b0 == data_count_out_full_n)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
        end else if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n) | (1'b0 == data_count_out_full_n)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op22_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        i_1_fu_106 <= i_fu_178_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n) | (1'b0 == data_count_out_full_n)))) begin
        i_1_fu_106 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n) | (1'b0 == data_count_out_full_n)))) begin
        data_count_read_reg_196 <= data_count_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_i_fu_167_p2) & (1'd1 == tmp_nbreadreq_fu_124_p3) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        tmp_1_reg_208 <= from1_V_empty_n;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_predicate_op22_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        tmp_4_reg_212 <= tmp_4_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_i_fu_167_p2) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        tmp_reg_204 <= from0_V_empty_n;
    end
end

always @ (*) begin
    if ((tmp_i_fu_167_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        data_count_blk_n = data_count_empty_n;
    end else begin
        data_count_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        data_count_out_blk_n = data_count_out_full_n;
    end else begin
        data_count_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n) | (1'b0 == data_count_out_full_n)))) begin
        data_count_out_write = 1'b1;
    end else begin
        data_count_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n) | (1'b0 == data_count_out_full_n)))) begin
        data_count_read = 1'b1;
    end else begin
        data_count_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_i_fu_167_p2) & (1'd1 == tmp_nbreadreq_fu_124_p3) & (1'd1 == tmp_1_nbreadreq_fu_132_p3))) begin
        from0_V_blk_n = from0_V_empty_n;
    end else begin
        from0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op22_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        from0_V_read = 1'b1;
    end else begin
        from0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_i_fu_167_p2) & (1'd1 == tmp_nbreadreq_fu_124_p3) & (1'd1 == tmp_1_nbreadreq_fu_132_p3))) begin
        from1_V_blk_n = from1_V_empty_n;
    end else begin
        from1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_predicate_op22_read_state2) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        from1_V_read = 1'b1;
    end else begin
        from1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0 == 1'b0) & (tmp_reg_204 == 1'd1) & (1'd1 == tmp_1_reg_208))) begin
        to_V_blk_n = to_V_full_n;
    end else begin
        to_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_predicate_op30_write_state3) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        to_V_write = 1'b1;
    end else begin
        to_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n) | (1'b0 == data_count_out_full_n)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (tmp_i_fu_167_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (tmp_i_fu_167_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (((1'b0 == from0_V_empty_n) & (1'b1 == ap_predicate_op22_read_state2)) | ((1'b1 == ap_predicate_op22_read_state2) & (1'b0 == from1_V_empty_n)))) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == to_V_full_n) & (1'b1 == ap_predicate_op30_write_state3)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_enable_reg_pp0_iter0) & (((1'b0 == from0_V_empty_n) & (1'b1 == ap_predicate_op22_read_state2)) | ((1'b1 == ap_predicate_op22_read_state2) & (1'b0 == from1_V_empty_n)))) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == to_V_full_n) & (1'b1 == ap_predicate_op30_write_state3)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_enable_reg_pp0_iter0) & (((1'b0 == from0_V_empty_n) & (1'b1 == ap_predicate_op22_read_state2)) | ((1'b1 == ap_predicate_op22_read_state2) & (1'b0 == from1_V_empty_n)))) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == to_V_full_n) & (1'b1 == ap_predicate_op30_write_state3)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n) | (1'b0 == data_count_out_full_n));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = (((1'b0 == from0_V_empty_n) & (1'b1 == ap_predicate_op22_read_state2)) | ((1'b1 == ap_predicate_op22_read_state2) & (1'b0 == from1_V_empty_n)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((1'b0 == to_V_full_n) & (1'b1 == ap_predicate_op30_write_state3));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op22_read_state2 = ((1'd1 == tmp_i_fu_167_p2) & (1'd1 == tmp_nbreadreq_fu_124_p3) & (1'd1 == tmp_1_nbreadreq_fu_132_p3));
end

always @ (*) begin
    ap_predicate_op30_write_state3 = ((tmp_reg_204 == 1'd1) & (1'd1 == tmp_1_reg_208));
end

assign data_count_out_din = data_count_dout;

assign i_fu_178_p2 = (i_1_fu_106 + 32'd1);

assign tmp_1_nbreadreq_fu_132_p3 = from1_V_empty_n;

assign tmp_4_fu_172_p2 = (from0_V_dout - from1_V_dout);

assign tmp_i_fu_167_p2 = ((i_1_fu_106 < data_count_read_reg_196) ? 1'b1 : 1'b0);

assign tmp_nbreadreq_fu_124_p3 = from0_V_empty_n;

assign to_V_din = tmp_4_reg_212;

endmodule //gather
