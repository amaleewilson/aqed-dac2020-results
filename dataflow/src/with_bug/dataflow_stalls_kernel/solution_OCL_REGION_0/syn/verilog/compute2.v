// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        to_V_din,
        to_V_full_n,
        to_V_write,
        from_V_dout,
        from_V_empty_n,
        from_V_read,
        data_count_dout,
        data_count_empty_n,
        data_count_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [63:0] to_V_din;
input   to_V_full_n;
output   to_V_write;
input  [63:0] from_V_dout;
input   from_V_empty_n;
output   from_V_read;
input  [31:0] data_count_dout;
input   data_count_empty_n;
output   data_count_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg to_V_write;
reg from_V_read;
reg data_count_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    to_V_blk_n;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_reg_124;
reg   [0:0] ap_reg_pp0_iter7_exitcond_i_reg_124;
reg    from_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    data_count_blk_n;
reg   [31:0] i_i_reg_93;
reg   [31:0] data_count_read_reg_119;
reg    ap_block_state1;
wire   [0:0] exitcond_i_fu_104_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_reg_124;
reg   [0:0] ap_reg_pp0_iter2_exitcond_i_reg_124;
reg   [0:0] ap_reg_pp0_iter3_exitcond_i_reg_124;
reg   [0:0] ap_reg_pp0_iter4_exitcond_i_reg_124;
reg   [0:0] ap_reg_pp0_iter5_exitcond_i_reg_124;
reg   [0:0] ap_reg_pp0_iter6_exitcond_i_reg_124;
wire   [31:0] i_fu_109_p2;
reg    ap_enable_reg_pp0_iter0;
reg  signed [63:0] tmp_reg_133;
wire   [63:0] grp_fu_115_p2;
reg   [63:0] tmp_3_reg_139;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_block_pp0_stage0_01001;
reg    grp_fu_115_ce;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

dataflow_stalls_kernel_mul_64s_64s_64_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dataflow_stalls_kernel_mul_64s_64s_64_6_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_133),
    .din1(tmp_reg_133),
    .ce(grp_fu_115_ce),
    .dout(grp_fu_115_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n)))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_i_fu_104_p2))) begin
        i_i_reg_93 <= i_fu_109_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n)))) begin
        i_i_reg_93 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_i_reg_124 <= exitcond_i_reg_124;
        exitcond_i_reg_124 <= exitcond_i_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_i_reg_124 <= ap_reg_pp0_iter1_exitcond_i_reg_124;
        ap_reg_pp0_iter3_exitcond_i_reg_124 <= ap_reg_pp0_iter2_exitcond_i_reg_124;
        ap_reg_pp0_iter4_exitcond_i_reg_124 <= ap_reg_pp0_iter3_exitcond_i_reg_124;
        ap_reg_pp0_iter5_exitcond_i_reg_124 <= ap_reg_pp0_iter4_exitcond_i_reg_124;
        ap_reg_pp0_iter6_exitcond_i_reg_124 <= ap_reg_pp0_iter5_exitcond_i_reg_124;
        ap_reg_pp0_iter7_exitcond_i_reg_124 <= ap_reg_pp0_iter6_exitcond_i_reg_124;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n)))) begin
        data_count_read_reg_119 <= data_count_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == ap_reg_pp0_iter6_exitcond_i_reg_124))) begin
        tmp_3_reg_139 <= grp_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_124 == 1'd0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        tmp_reg_133 <= from_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_104_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        data_count_blk_n = data_count_empty_n;
    end else begin
        data_count_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n)))) begin
        data_count_read = 1'b1;
    end else begin
        data_count_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_124 == 1'd0))) begin
        from_V_blk_n = from_V_empty_n;
    end else begin
        from_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_124 == 1'd0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        from_V_read = 1'b1;
    end else begin
        from_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        grp_fu_115_ce = 1'b1;
    end else begin
        grp_fu_115_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter8) & (ap_block_pp0_stage0 == 1'b0) & (ap_reg_pp0_iter7_exitcond_i_reg_124 == 1'd0))) begin
        to_V_blk_n = to_V_full_n;
    end else begin
        to_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter8) & (ap_reg_pp0_iter7_exitcond_i_reg_124 == 1'd0) & (ap_block_pp0_stage0_11001 == 1'b0))) begin
        to_V_write = 1'b1;
    end else begin
        to_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter8) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (exitcond_i_fu_104_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter8) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0) & (exitcond_i_fu_104_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_124 == 1'd0) & (1'b0 == from_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter8) & (ap_reg_pp0_iter7_exitcond_i_reg_124 == 1'd0) & (1'b0 == to_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_124 == 1'd0) & (1'b0 == from_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter8) & (ap_reg_pp0_iter7_exitcond_i_reg_124 == 1'd0) & (1'b0 == to_V_full_n)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_124 == 1'd0) & (1'b0 == from_V_empty_n)) | ((1'b1 == ap_enable_reg_pp0_iter8) & (ap_reg_pp0_iter7_exitcond_i_reg_124 == 1'd0) & (1'b0 == to_V_full_n)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == data_count_empty_n));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((ap_reg_pp0_iter7_exitcond_i_reg_124 == 1'd0) & (1'b0 == to_V_full_n));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_i_reg_124 == 1'd0) & (1'b0 == from_V_empty_n));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_i_fu_104_p2 = ((i_i_reg_93 == data_count_read_reg_119) ? 1'b1 : 1'b0);

assign i_fu_109_p2 = (i_i_reg_93 + 32'd1);

assign to_V_din = tmp_3_reg_139;

endmodule //compute2
