// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _load5_HH_
#define _load5_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct load5 : public sc_module {
    // Port declarations 67
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_lv<64> > to_V_din;
    sc_in< sc_logic > to_V_full_n;
    sc_out< sc_logic > to_V_write;
    sc_out< sc_logic > m_axi_from_AWVALID;
    sc_in< sc_logic > m_axi_from_AWREADY;
    sc_out< sc_lv<64> > m_axi_from_AWADDR;
    sc_out< sc_lv<1> > m_axi_from_AWID;
    sc_out< sc_lv<32> > m_axi_from_AWLEN;
    sc_out< sc_lv<3> > m_axi_from_AWSIZE;
    sc_out< sc_lv<2> > m_axi_from_AWBURST;
    sc_out< sc_lv<2> > m_axi_from_AWLOCK;
    sc_out< sc_lv<4> > m_axi_from_AWCACHE;
    sc_out< sc_lv<3> > m_axi_from_AWPROT;
    sc_out< sc_lv<4> > m_axi_from_AWQOS;
    sc_out< sc_lv<4> > m_axi_from_AWREGION;
    sc_out< sc_lv<1> > m_axi_from_AWUSER;
    sc_out< sc_logic > m_axi_from_WVALID;
    sc_in< sc_logic > m_axi_from_WREADY;
    sc_out< sc_lv<64> > m_axi_from_WDATA;
    sc_out< sc_lv<8> > m_axi_from_WSTRB;
    sc_out< sc_logic > m_axi_from_WLAST;
    sc_out< sc_lv<1> > m_axi_from_WID;
    sc_out< sc_lv<1> > m_axi_from_WUSER;
    sc_out< sc_logic > m_axi_from_ARVALID;
    sc_in< sc_logic > m_axi_from_ARREADY;
    sc_out< sc_lv<64> > m_axi_from_ARADDR;
    sc_out< sc_lv<1> > m_axi_from_ARID;
    sc_out< sc_lv<32> > m_axi_from_ARLEN;
    sc_out< sc_lv<3> > m_axi_from_ARSIZE;
    sc_out< sc_lv<2> > m_axi_from_ARBURST;
    sc_out< sc_lv<2> > m_axi_from_ARLOCK;
    sc_out< sc_lv<4> > m_axi_from_ARCACHE;
    sc_out< sc_lv<3> > m_axi_from_ARPROT;
    sc_out< sc_lv<4> > m_axi_from_ARQOS;
    sc_out< sc_lv<4> > m_axi_from_ARREGION;
    sc_out< sc_lv<1> > m_axi_from_ARUSER;
    sc_in< sc_logic > m_axi_from_RVALID;
    sc_out< sc_logic > m_axi_from_RREADY;
    sc_in< sc_lv<64> > m_axi_from_RDATA;
    sc_in< sc_logic > m_axi_from_RLAST;
    sc_in< sc_lv<1> > m_axi_from_RID;
    sc_in< sc_lv<1> > m_axi_from_RUSER;
    sc_in< sc_lv<2> > m_axi_from_RRESP;
    sc_in< sc_logic > m_axi_from_BVALID;
    sc_out< sc_logic > m_axi_from_BREADY;
    sc_in< sc_lv<2> > m_axi_from_BRESP;
    sc_in< sc_lv<1> > m_axi_from_BID;
    sc_in< sc_lv<1> > m_axi_from_BUSER;
    sc_in< sc_lv<64> > from_offset;
    sc_in< sc_lv<32> > data_count;
    sc_out< sc_lv<32> > data_count_out_din;
    sc_in< sc_logic > data_count_out_full_n;
    sc_out< sc_logic > data_count_out_write;
    sc_in< sc_lv<64> > output_ddr0;
    sc_out< sc_lv<64> > output_ddr0_out_din;
    sc_in< sc_logic > output_ddr0_out_full_n;
    sc_out< sc_logic > output_ddr0_out_write;


    // Module declarations
    load5(sc_module_name name);
    SC_HAS_PROCESS(load5);

    ~load5();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > real_start_status_reg;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > start_control_reg;
    sc_signal< sc_logic > to_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_i_i_i_reg_212;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_i_i_i_reg_212;
    sc_signal< sc_logic > from_blk_n_AR;
    sc_signal< sc_logic > from_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > data_count_out_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > output_ddr0_out_blk_n;
    sc_signal< sc_lv<32> > i_i_i_i_reg_156;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_from_ARREADY;
    sc_signal< sc_lv<1> > exitcond_i_i_i_fu_188_p2;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > i_fu_193_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > tmp_reg_221;
    sc_signal< bool > ap_block_state7;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state8;
    sc_signal< sc_lv<64> > tmp_4_i_i_fu_177_p1;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_from_ARREADY;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<61> > from_offset1_i_i_fu_167_p4;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_312;
    sc_signal< bool > ap_condition_166;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_pp0_stage0;
    static const sc_lv<9> ap_ST_fsm_state11;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter2();
    void thread_ap_block_state7();
    void thread_ap_block_state8_pp0_stage0_iter0();
    void thread_ap_block_state9_pp0_stage0_iter1();
    void thread_ap_condition_166();
    void thread_ap_condition_312();
    void thread_ap_condition_pp0_exit_iter0_state8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_from_ARREADY();
    void thread_data_count_out_blk_n();
    void thread_data_count_out_din();
    void thread_data_count_out_write();
    void thread_exitcond_i_i_i_fu_188_p2();
    void thread_from_blk_n_AR();
    void thread_from_blk_n_R();
    void thread_from_offset1_i_i_fu_167_p4();
    void thread_i_fu_193_p2();
    void thread_internal_ap_ready();
    void thread_m_axi_from_ARADDR();
    void thread_m_axi_from_ARBURST();
    void thread_m_axi_from_ARCACHE();
    void thread_m_axi_from_ARID();
    void thread_m_axi_from_ARLEN();
    void thread_m_axi_from_ARLOCK();
    void thread_m_axi_from_ARPROT();
    void thread_m_axi_from_ARQOS();
    void thread_m_axi_from_ARREGION();
    void thread_m_axi_from_ARSIZE();
    void thread_m_axi_from_ARUSER();
    void thread_m_axi_from_ARVALID();
    void thread_m_axi_from_AWADDR();
    void thread_m_axi_from_AWBURST();
    void thread_m_axi_from_AWCACHE();
    void thread_m_axi_from_AWID();
    void thread_m_axi_from_AWLEN();
    void thread_m_axi_from_AWLOCK();
    void thread_m_axi_from_AWPROT();
    void thread_m_axi_from_AWQOS();
    void thread_m_axi_from_AWREGION();
    void thread_m_axi_from_AWSIZE();
    void thread_m_axi_from_AWUSER();
    void thread_m_axi_from_AWVALID();
    void thread_m_axi_from_BREADY();
    void thread_m_axi_from_RREADY();
    void thread_m_axi_from_WDATA();
    void thread_m_axi_from_WID();
    void thread_m_axi_from_WLAST();
    void thread_m_axi_from_WSTRB();
    void thread_m_axi_from_WUSER();
    void thread_m_axi_from_WVALID();
    void thread_output_ddr0_out_blk_n();
    void thread_output_ddr0_out_din();
    void thread_output_ddr0_out_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_4_i_i_fu_177_p1();
    void thread_to_V_blk_n();
    void thread_to_V_din();
    void thread_to_V_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
