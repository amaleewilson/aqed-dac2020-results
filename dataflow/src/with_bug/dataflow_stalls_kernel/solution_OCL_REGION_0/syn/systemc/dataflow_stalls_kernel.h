// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dataflow_stalls_kernel_HH_
#define _dataflow_stalls_kernel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "load5.h"
#include "scatter.h"
#include "compute1.h"
#include "compute2.h"
#include "gather.h"
#include "store.h"
#include "fifo_w64_d10_A.h"
#include "fifo_w32_d1_A.h"
#include "fifo_w64_d4_A.h"
#include "fifo_w64_d1_A.h"
#include "start_for_scatter_U0.h"
#include "start_for_store_U0.h"
#include "start_for_compute1_U0.h"
#include "start_for_compute2_U0.h"
#include "start_for_gather_U0.h"
#include "dataflow_stalls_kernel_control_s_axi.h"
#include "dataflow_stalls_kernel_gmemo_m_axi.h"
#include "dataflow_stalls_kernel_gmemi_m_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEMO_ADDR_WIDTH = 64,
         unsigned int C_M_AXI_GMEMO_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEMO_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEMO_DATA_WIDTH = 64,
         unsigned int C_M_AXI_GMEMO_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEMO_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEMO_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEMO_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEMI_ADDR_WIDTH = 64,
         unsigned int C_M_AXI_GMEMI_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEMI_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEMI_DATA_WIDTH = 64,
         unsigned int C_M_AXI_GMEMI_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEMI_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEMI_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEMI_BUSER_WIDTH = 1>
struct dataflow_stalls_kernel : public sc_module {
    // Port declarations 110
    sc_in< sc_logic > s_axi_control_AWVALID;
    sc_out< sc_logic > s_axi_control_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_AWADDR;
    sc_in< sc_logic > s_axi_control_WVALID;
    sc_out< sc_logic > s_axi_control_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_control_WSTRB;
    sc_in< sc_logic > s_axi_control_ARVALID;
    sc_out< sc_logic > s_axi_control_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_ARADDR;
    sc_out< sc_logic > s_axi_control_RVALID;
    sc_in< sc_logic > s_axi_control_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_RDATA;
    sc_out< sc_lv<2> > s_axi_control_RRESP;
    sc_out< sc_logic > s_axi_control_BVALID;
    sc_in< sc_logic > s_axi_control_BREADY;
    sc_out< sc_lv<2> > s_axi_control_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_out< sc_logic > m_axi_gmemo_AWVALID;
    sc_in< sc_logic > m_axi_gmemo_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEMO_ADDR_WIDTH> > m_axi_gmemo_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEMO_ID_WIDTH> > m_axi_gmemo_AWID;
    sc_out< sc_lv<8> > m_axi_gmemo_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmemo_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmemo_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmemo_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmemo_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmemo_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmemo_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmemo_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEMO_AWUSER_WIDTH> > m_axi_gmemo_AWUSER;
    sc_out< sc_logic > m_axi_gmemo_WVALID;
    sc_in< sc_logic > m_axi_gmemo_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEMO_DATA_WIDTH> > m_axi_gmemo_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEMO_DATA_WIDTH/8> > m_axi_gmemo_WSTRB;
    sc_out< sc_logic > m_axi_gmemo_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEMO_ID_WIDTH> > m_axi_gmemo_WID;
    sc_out< sc_uint<C_M_AXI_GMEMO_WUSER_WIDTH> > m_axi_gmemo_WUSER;
    sc_out< sc_logic > m_axi_gmemo_ARVALID;
    sc_in< sc_logic > m_axi_gmemo_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEMO_ADDR_WIDTH> > m_axi_gmemo_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEMO_ID_WIDTH> > m_axi_gmemo_ARID;
    sc_out< sc_lv<8> > m_axi_gmemo_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmemo_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmemo_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmemo_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmemo_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmemo_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmemo_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmemo_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEMO_ARUSER_WIDTH> > m_axi_gmemo_ARUSER;
    sc_in< sc_logic > m_axi_gmemo_RVALID;
    sc_out< sc_logic > m_axi_gmemo_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEMO_DATA_WIDTH> > m_axi_gmemo_RDATA;
    sc_in< sc_logic > m_axi_gmemo_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEMO_ID_WIDTH> > m_axi_gmemo_RID;
    sc_in< sc_uint<C_M_AXI_GMEMO_RUSER_WIDTH> > m_axi_gmemo_RUSER;
    sc_in< sc_lv<2> > m_axi_gmemo_RRESP;
    sc_in< sc_logic > m_axi_gmemo_BVALID;
    sc_out< sc_logic > m_axi_gmemo_BREADY;
    sc_in< sc_lv<2> > m_axi_gmemo_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEMO_ID_WIDTH> > m_axi_gmemo_BID;
    sc_in< sc_uint<C_M_AXI_GMEMO_BUSER_WIDTH> > m_axi_gmemo_BUSER;
    sc_out< sc_logic > m_axi_gmemi_AWVALID;
    sc_in< sc_logic > m_axi_gmemi_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEMI_ADDR_WIDTH> > m_axi_gmemi_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEMI_ID_WIDTH> > m_axi_gmemi_AWID;
    sc_out< sc_lv<8> > m_axi_gmemi_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmemi_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmemi_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmemi_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmemi_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmemi_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmemi_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmemi_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEMI_AWUSER_WIDTH> > m_axi_gmemi_AWUSER;
    sc_out< sc_logic > m_axi_gmemi_WVALID;
    sc_in< sc_logic > m_axi_gmemi_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEMI_DATA_WIDTH> > m_axi_gmemi_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEMI_DATA_WIDTH/8> > m_axi_gmemi_WSTRB;
    sc_out< sc_logic > m_axi_gmemi_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEMI_ID_WIDTH> > m_axi_gmemi_WID;
    sc_out< sc_uint<C_M_AXI_GMEMI_WUSER_WIDTH> > m_axi_gmemi_WUSER;
    sc_out< sc_logic > m_axi_gmemi_ARVALID;
    sc_in< sc_logic > m_axi_gmemi_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEMI_ADDR_WIDTH> > m_axi_gmemi_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEMI_ID_WIDTH> > m_axi_gmemi_ARID;
    sc_out< sc_lv<8> > m_axi_gmemi_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmemi_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmemi_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmemi_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmemi_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmemi_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmemi_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmemi_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEMI_ARUSER_WIDTH> > m_axi_gmemi_ARUSER;
    sc_in< sc_logic > m_axi_gmemi_RVALID;
    sc_out< sc_logic > m_axi_gmemi_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEMI_DATA_WIDTH> > m_axi_gmemi_RDATA;
    sc_in< sc_logic > m_axi_gmemi_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEMI_ID_WIDTH> > m_axi_gmemi_RID;
    sc_in< sc_uint<C_M_AXI_GMEMI_RUSER_WIDTH> > m_axi_gmemi_RUSER;
    sc_in< sc_lv<2> > m_axi_gmemi_RRESP;
    sc_in< sc_logic > m_axi_gmemi_BVALID;
    sc_out< sc_logic > m_axi_gmemi_BREADY;
    sc_in< sc_lv<2> > m_axi_gmemi_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEMI_ID_WIDTH> > m_axi_gmemi_BID;
    sc_in< sc_uint<C_M_AXI_GMEMI_BUSER_WIDTH> > m_axi_gmemi_BUSER;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<64> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<32> > ap_var_for_const4;
    sc_signal< sc_lv<3> > ap_var_for_const5;
    sc_signal< sc_lv<2> > ap_var_for_const6;
    sc_signal< sc_lv<4> > ap_var_for_const7;
    sc_signal< sc_lv<8> > ap_var_for_const8;


    // Module declarations
    dataflow_stalls_kernel(sc_module_name name);
    SC_HAS_PROCESS(dataflow_stalls_kernel);

    ~dataflow_stalls_kernel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    dataflow_stalls_kernel_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* dataflow_stalls_kernel_control_s_axi_U;
    dataflow_stalls_kernel_gmemo_m_axi<64,64,5,16,16,16,16,C_M_AXI_GMEMO_ID_WIDTH,C_M_AXI_GMEMO_ADDR_WIDTH,C_M_AXI_GMEMO_DATA_WIDTH,C_M_AXI_GMEMO_AWUSER_WIDTH,C_M_AXI_GMEMO_ARUSER_WIDTH,C_M_AXI_GMEMO_WUSER_WIDTH,C_M_AXI_GMEMO_RUSER_WIDTH,C_M_AXI_GMEMO_BUSER_WIDTH,C_M_AXI_GMEMO_USER_VALUE,C_M_AXI_GMEMO_PROT_VALUE,C_M_AXI_GMEMO_CACHE_VALUE>* dataflow_stalls_kernel_gmemo_m_axi_U;
    dataflow_stalls_kernel_gmemi_m_axi<64,64,5,16,16,16,16,C_M_AXI_GMEMI_ID_WIDTH,C_M_AXI_GMEMI_ADDR_WIDTH,C_M_AXI_GMEMI_DATA_WIDTH,C_M_AXI_GMEMI_AWUSER_WIDTH,C_M_AXI_GMEMI_ARUSER_WIDTH,C_M_AXI_GMEMI_WUSER_WIDTH,C_M_AXI_GMEMI_RUSER_WIDTH,C_M_AXI_GMEMI_BUSER_WIDTH,C_M_AXI_GMEMI_USER_VALUE,C_M_AXI_GMEMI_PROT_VALUE,C_M_AXI_GMEMI_CACHE_VALUE>* dataflow_stalls_kernel_gmemi_m_axi_U;
    load5* load5_U0;
    scatter* scatter_U0;
    compute1* compute1_U0;
    compute2* compute2_U0;
    gather* gather_U0;
    store* store_U0;
    fifo_w64_d10_A* data_stage0_V_U;
    fifo_w32_d1_A* data_count_c_U;
    fifo_w64_d4_A* output_ddr0_c_U;
    fifo_w64_d1_A* data_stage1_V_U;
    fifo_w64_d1_A* data_stage2_V_U;
    fifo_w32_d1_A* data_count_c7_U;
    fifo_w32_d1_A* data_count_c8_U;
    fifo_w64_d1_A* data_stage3_V_U;
    fifo_w32_d1_A* data_count_c9_U;
    fifo_w64_d1_A* data_stage4_V_U;
    fifo_w64_d10_A* data_stage5_V_U;
    fifo_w32_d1_A* data_count_c10_U;
    start_for_scatter_U0* start_for_scatter_U0_U;
    start_for_store_U0* start_for_store_U0_U;
    start_for_compute1_U0* start_for_compute1_U0_U;
    start_for_compute2_U0* start_for_compute2_U0_U;
    start_for_gather_U0* start_for_gather_U0_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<64> > output_ddr0;
    sc_signal< sc_lv<64> > input_ddr0;
    sc_signal< sc_lv<32> > data_count;
    sc_signal< sc_logic > gmemo_AWREADY;
    sc_signal< sc_logic > gmemo_WREADY;
    sc_signal< sc_logic > gmemo_ARREADY;
    sc_signal< sc_logic > gmemo_RVALID;
    sc_signal< sc_lv<64> > gmemo_RDATA;
    sc_signal< sc_logic > gmemo_RLAST;
    sc_signal< sc_lv<1> > gmemo_RID;
    sc_signal< sc_lv<1> > gmemo_RUSER;
    sc_signal< sc_lv<2> > gmemo_RRESP;
    sc_signal< sc_logic > gmemo_BVALID;
    sc_signal< sc_lv<2> > gmemo_BRESP;
    sc_signal< sc_lv<1> > gmemo_BID;
    sc_signal< sc_lv<1> > gmemo_BUSER;
    sc_signal< sc_logic > gmemi_AWREADY;
    sc_signal< sc_logic > gmemi_WREADY;
    sc_signal< sc_logic > gmemi_ARREADY;
    sc_signal< sc_logic > gmemi_RVALID;
    sc_signal< sc_lv<64> > gmemi_RDATA;
    sc_signal< sc_logic > gmemi_RLAST;
    sc_signal< sc_lv<1> > gmemi_RID;
    sc_signal< sc_lv<1> > gmemi_RUSER;
    sc_signal< sc_lv<2> > gmemi_RRESP;
    sc_signal< sc_logic > gmemi_BVALID;
    sc_signal< sc_lv<2> > gmemi_BRESP;
    sc_signal< sc_lv<1> > gmemi_BID;
    sc_signal< sc_lv<1> > gmemi_BUSER;
    sc_signal< sc_logic > load5_U0_ap_start;
    sc_signal< sc_logic > load5_U0_start_full_n;
    sc_signal< sc_logic > load5_U0_ap_ready;
    sc_signal< sc_logic > load5_U0_ap_done;
    sc_signal< sc_logic > load5_U0_ap_continue;
    sc_signal< sc_logic > load5_U0_ap_idle;
    sc_signal< sc_logic > load5_U0_start_out;
    sc_signal< sc_logic > load5_U0_start_write;
    sc_signal< sc_lv<64> > load5_U0_to_V_din;
    sc_signal< sc_logic > load5_U0_to_V_write;
    sc_signal< sc_logic > load5_U0_m_axi_from_AWVALID;
    sc_signal< sc_lv<64> > load5_U0_m_axi_from_AWADDR;
    sc_signal< sc_lv<1> > load5_U0_m_axi_from_AWID;
    sc_signal< sc_lv<32> > load5_U0_m_axi_from_AWLEN;
    sc_signal< sc_lv<3> > load5_U0_m_axi_from_AWSIZE;
    sc_signal< sc_lv<2> > load5_U0_m_axi_from_AWBURST;
    sc_signal< sc_lv<2> > load5_U0_m_axi_from_AWLOCK;
    sc_signal< sc_lv<4> > load5_U0_m_axi_from_AWCACHE;
    sc_signal< sc_lv<3> > load5_U0_m_axi_from_AWPROT;
    sc_signal< sc_lv<4> > load5_U0_m_axi_from_AWQOS;
    sc_signal< sc_lv<4> > load5_U0_m_axi_from_AWREGION;
    sc_signal< sc_lv<1> > load5_U0_m_axi_from_AWUSER;
    sc_signal< sc_logic > load5_U0_m_axi_from_WVALID;
    sc_signal< sc_lv<64> > load5_U0_m_axi_from_WDATA;
    sc_signal< sc_lv<8> > load5_U0_m_axi_from_WSTRB;
    sc_signal< sc_logic > load5_U0_m_axi_from_WLAST;
    sc_signal< sc_lv<1> > load5_U0_m_axi_from_WID;
    sc_signal< sc_lv<1> > load5_U0_m_axi_from_WUSER;
    sc_signal< sc_logic > load5_U0_m_axi_from_ARVALID;
    sc_signal< sc_lv<64> > load5_U0_m_axi_from_ARADDR;
    sc_signal< sc_lv<1> > load5_U0_m_axi_from_ARID;
    sc_signal< sc_lv<32> > load5_U0_m_axi_from_ARLEN;
    sc_signal< sc_lv<3> > load5_U0_m_axi_from_ARSIZE;
    sc_signal< sc_lv<2> > load5_U0_m_axi_from_ARBURST;
    sc_signal< sc_lv<2> > load5_U0_m_axi_from_ARLOCK;
    sc_signal< sc_lv<4> > load5_U0_m_axi_from_ARCACHE;
    sc_signal< sc_lv<3> > load5_U0_m_axi_from_ARPROT;
    sc_signal< sc_lv<4> > load5_U0_m_axi_from_ARQOS;
    sc_signal< sc_lv<4> > load5_U0_m_axi_from_ARREGION;
    sc_signal< sc_lv<1> > load5_U0_m_axi_from_ARUSER;
    sc_signal< sc_logic > load5_U0_m_axi_from_RREADY;
    sc_signal< sc_logic > load5_U0_m_axi_from_BREADY;
    sc_signal< sc_lv<32> > load5_U0_data_count_out_din;
    sc_signal< sc_logic > load5_U0_data_count_out_write;
    sc_signal< sc_lv<64> > load5_U0_output_ddr0_out_din;
    sc_signal< sc_logic > load5_U0_output_ddr0_out_write;
    sc_signal< sc_logic > scatter_U0_ap_start;
    sc_signal< sc_logic > scatter_U0_start_full_n;
    sc_signal< sc_logic > scatter_U0_ap_ready;
    sc_signal< sc_logic > scatter_U0_ap_done;
    sc_signal< sc_logic > scatter_U0_ap_continue;
    sc_signal< sc_logic > scatter_U0_ap_idle;
    sc_signal< sc_logic > scatter_U0_start_out;
    sc_signal< sc_logic > scatter_U0_start_write;
    sc_signal< sc_lv<64> > scatter_U0_to0_V_din;
    sc_signal< sc_logic > scatter_U0_to0_V_write;
    sc_signal< sc_lv<64> > scatter_U0_to1_V_din;
    sc_signal< sc_logic > scatter_U0_to1_V_write;
    sc_signal< sc_logic > scatter_U0_from_V_read;
    sc_signal< sc_logic > scatter_U0_data_count_read;
    sc_signal< sc_lv<32> > scatter_U0_data_count_out_din;
    sc_signal< sc_logic > scatter_U0_data_count_out_write;
    sc_signal< sc_lv<32> > scatter_U0_data_count_out1_din;
    sc_signal< sc_logic > scatter_U0_data_count_out1_write;
    sc_signal< sc_logic > compute1_U0_ap_start;
    sc_signal< sc_logic > compute1_U0_start_full_n;
    sc_signal< sc_logic > compute1_U0_ap_ready;
    sc_signal< sc_logic > compute1_U0_ap_done;
    sc_signal< sc_logic > compute1_U0_ap_continue;
    sc_signal< sc_logic > compute1_U0_ap_idle;
    sc_signal< sc_logic > compute1_U0_start_out;
    sc_signal< sc_logic > compute1_U0_start_write;
    sc_signal< sc_lv<64> > compute1_U0_to_V_din;
    sc_signal< sc_logic > compute1_U0_to_V_write;
    sc_signal< sc_logic > compute1_U0_from_V_read;
    sc_signal< sc_logic > compute1_U0_data_count_read;
    sc_signal< sc_lv<32> > compute1_U0_data_count_out_din;
    sc_signal< sc_logic > compute1_U0_data_count_out_write;
    sc_signal< sc_logic > compute2_U0_ap_start;
    sc_signal< sc_logic > compute2_U0_ap_done;
    sc_signal< sc_logic > compute2_U0_ap_continue;
    sc_signal< sc_logic > compute2_U0_ap_idle;
    sc_signal< sc_logic > compute2_U0_ap_ready;
    sc_signal< sc_lv<64> > compute2_U0_to_V_din;
    sc_signal< sc_logic > compute2_U0_to_V_write;
    sc_signal< sc_logic > compute2_U0_from_V_read;
    sc_signal< sc_logic > compute2_U0_data_count_read;
    sc_signal< sc_logic > gather_U0_ap_start;
    sc_signal< sc_logic > gather_U0_ap_done;
    sc_signal< sc_logic > gather_U0_ap_continue;
    sc_signal< sc_logic > gather_U0_ap_idle;
    sc_signal< sc_logic > gather_U0_ap_ready;
    sc_signal< sc_lv<64> > gather_U0_to_V_din;
    sc_signal< sc_logic > gather_U0_to_V_write;
    sc_signal< sc_logic > gather_U0_from0_V_read;
    sc_signal< sc_logic > gather_U0_from1_V_read;
    sc_signal< sc_logic > gather_U0_data_count_read;
    sc_signal< sc_lv<32> > gather_U0_data_count_out_din;
    sc_signal< sc_logic > gather_U0_data_count_out_write;
    sc_signal< sc_logic > store_U0_ap_start;
    sc_signal< sc_logic > store_U0_ap_done;
    sc_signal< sc_logic > store_U0_ap_continue;
    sc_signal< sc_logic > store_U0_ap_idle;
    sc_signal< sc_logic > store_U0_ap_ready;
    sc_signal< sc_logic > store_U0_m_axi_to_r_AWVALID;
    sc_signal< sc_lv<64> > store_U0_m_axi_to_r_AWADDR;
    sc_signal< sc_lv<1> > store_U0_m_axi_to_r_AWID;
    sc_signal< sc_lv<32> > store_U0_m_axi_to_r_AWLEN;
    sc_signal< sc_lv<3> > store_U0_m_axi_to_r_AWSIZE;
    sc_signal< sc_lv<2> > store_U0_m_axi_to_r_AWBURST;
    sc_signal< sc_lv<2> > store_U0_m_axi_to_r_AWLOCK;
    sc_signal< sc_lv<4> > store_U0_m_axi_to_r_AWCACHE;
    sc_signal< sc_lv<3> > store_U0_m_axi_to_r_AWPROT;
    sc_signal< sc_lv<4> > store_U0_m_axi_to_r_AWQOS;
    sc_signal< sc_lv<4> > store_U0_m_axi_to_r_AWREGION;
    sc_signal< sc_lv<1> > store_U0_m_axi_to_r_AWUSER;
    sc_signal< sc_logic > store_U0_m_axi_to_r_WVALID;
    sc_signal< sc_lv<64> > store_U0_m_axi_to_r_WDATA;
    sc_signal< sc_lv<8> > store_U0_m_axi_to_r_WSTRB;
    sc_signal< sc_logic > store_U0_m_axi_to_r_WLAST;
    sc_signal< sc_lv<1> > store_U0_m_axi_to_r_WID;
    sc_signal< sc_lv<1> > store_U0_m_axi_to_r_WUSER;
    sc_signal< sc_logic > store_U0_m_axi_to_r_ARVALID;
    sc_signal< sc_lv<64> > store_U0_m_axi_to_r_ARADDR;
    sc_signal< sc_lv<1> > store_U0_m_axi_to_r_ARID;
    sc_signal< sc_lv<32> > store_U0_m_axi_to_r_ARLEN;
    sc_signal< sc_lv<3> > store_U0_m_axi_to_r_ARSIZE;
    sc_signal< sc_lv<2> > store_U0_m_axi_to_r_ARBURST;
    sc_signal< sc_lv<2> > store_U0_m_axi_to_r_ARLOCK;
    sc_signal< sc_lv<4> > store_U0_m_axi_to_r_ARCACHE;
    sc_signal< sc_lv<3> > store_U0_m_axi_to_r_ARPROT;
    sc_signal< sc_lv<4> > store_U0_m_axi_to_r_ARQOS;
    sc_signal< sc_lv<4> > store_U0_m_axi_to_r_ARREGION;
    sc_signal< sc_lv<1> > store_U0_m_axi_to_r_ARUSER;
    sc_signal< sc_logic > store_U0_m_axi_to_r_RREADY;
    sc_signal< sc_logic > store_U0_m_axi_to_r_BREADY;
    sc_signal< sc_logic > store_U0_to_offset_read;
    sc_signal< sc_logic > store_U0_from_V_read;
    sc_signal< sc_logic > store_U0_data_count_read;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > data_stage0_V_full_n;
    sc_signal< sc_lv<64> > data_stage0_V_dout;
    sc_signal< sc_logic > data_stage0_V_empty_n;
    sc_signal< sc_logic > data_count_c_full_n;
    sc_signal< sc_lv<32> > data_count_c_dout;
    sc_signal< sc_logic > data_count_c_empty_n;
    sc_signal< sc_logic > output_ddr0_c_full_n;
    sc_signal< sc_lv<64> > output_ddr0_c_dout;
    sc_signal< sc_logic > output_ddr0_c_empty_n;
    sc_signal< sc_logic > data_stage1_V_full_n;
    sc_signal< sc_lv<64> > data_stage1_V_dout;
    sc_signal< sc_logic > data_stage1_V_empty_n;
    sc_signal< sc_logic > data_stage2_V_full_n;
    sc_signal< sc_lv<64> > data_stage2_V_dout;
    sc_signal< sc_logic > data_stage2_V_empty_n;
    sc_signal< sc_logic > data_count_c7_full_n;
    sc_signal< sc_lv<32> > data_count_c7_dout;
    sc_signal< sc_logic > data_count_c7_empty_n;
    sc_signal< sc_logic > data_count_c8_full_n;
    sc_signal< sc_lv<32> > data_count_c8_dout;
    sc_signal< sc_logic > data_count_c8_empty_n;
    sc_signal< sc_logic > data_stage3_V_full_n;
    sc_signal< sc_lv<64> > data_stage3_V_dout;
    sc_signal< sc_logic > data_stage3_V_empty_n;
    sc_signal< sc_logic > data_count_c9_full_n;
    sc_signal< sc_lv<32> > data_count_c9_dout;
    sc_signal< sc_logic > data_count_c9_empty_n;
    sc_signal< sc_logic > data_stage4_V_full_n;
    sc_signal< sc_lv<64> > data_stage4_V_dout;
    sc_signal< sc_logic > data_stage4_V_empty_n;
    sc_signal< sc_logic > data_stage5_V_full_n;
    sc_signal< sc_lv<64> > data_stage5_V_dout;
    sc_signal< sc_logic > data_stage5_V_empty_n;
    sc_signal< sc_logic > data_count_c10_full_n;
    sc_signal< sc_lv<32> > data_count_c10_dout;
    sc_signal< sc_logic > data_count_c10_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_scatter_U0_din;
    sc_signal< sc_logic > start_for_scatter_U0_full_n;
    sc_signal< sc_lv<1> > start_for_scatter_U0_dout;
    sc_signal< sc_logic > start_for_scatter_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_store_U0_din;
    sc_signal< sc_logic > start_for_store_U0_full_n;
    sc_signal< sc_lv<1> > start_for_store_U0_dout;
    sc_signal< sc_logic > start_for_store_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_compute1_U0_din;
    sc_signal< sc_logic > start_for_compute1_U0_full_n;
    sc_signal< sc_lv<1> > start_for_compute1_U0_dout;
    sc_signal< sc_logic > start_for_compute1_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_compute2_U0_din;
    sc_signal< sc_logic > start_for_compute2_U0_full_n;
    sc_signal< sc_lv<1> > start_for_compute2_U0_dout;
    sc_signal< sc_logic > start_for_compute2_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_gather_U0_din;
    sc_signal< sc_logic > start_for_gather_U0_full_n;
    sc_signal< sc_lv<1> > start_for_gather_U0_dout;
    sc_signal< sc_logic > start_for_gather_U0_empty_n;
    sc_signal< sc_logic > compute2_U0_start_full_n;
    sc_signal< sc_logic > compute2_U0_start_write;
    sc_signal< sc_logic > gather_U0_start_full_n;
    sc_signal< sc_logic > gather_U0_start_write;
    sc_signal< sc_logic > store_U0_start_full_n;
    sc_signal< sc_logic > store_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const int C_M_AXI_GMEMO_USER_VALUE;
    static const int C_M_AXI_GMEMO_PROT_VALUE;
    static const int C_M_AXI_GMEMO_CACHE_VALUE;
    static const int C_M_AXI_ID_WIDTH;
    static const int C_M_AXI_ADDR_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_WSTRB_WIDTH;
    static const int C_M_AXI_AWUSER_WIDTH;
    static const int C_M_AXI_ARUSER_WIDTH;
    static const int C_M_AXI_WUSER_WIDTH;
    static const int C_M_AXI_RUSER_WIDTH;
    static const int C_M_AXI_BUSER_WIDTH;
    static const int C_M_AXI_GMEMI_USER_VALUE;
    static const int C_M_AXI_GMEMI_PROT_VALUE;
    static const int C_M_AXI_GMEMI_CACHE_VALUE;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_compute1_U0_ap_continue();
    void thread_compute1_U0_ap_start();
    void thread_compute1_U0_start_full_n();
    void thread_compute2_U0_ap_continue();
    void thread_compute2_U0_ap_start();
    void thread_compute2_U0_start_full_n();
    void thread_compute2_U0_start_write();
    void thread_gather_U0_ap_continue();
    void thread_gather_U0_ap_start();
    void thread_gather_U0_start_full_n();
    void thread_gather_U0_start_write();
    void thread_load5_U0_ap_continue();
    void thread_load5_U0_ap_start();
    void thread_load5_U0_start_full_n();
    void thread_scatter_U0_ap_continue();
    void thread_scatter_U0_ap_start();
    void thread_scatter_U0_start_full_n();
    void thread_start_for_compute1_U0_din();
    void thread_start_for_compute2_U0_din();
    void thread_start_for_gather_U0_din();
    void thread_start_for_scatter_U0_din();
    void thread_start_for_store_U0_din();
    void thread_store_U0_ap_continue();
    void thread_store_U0_ap_start();
    void thread_store_U0_start_full_n();
    void thread_store_U0_start_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
