-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_stalls_kernel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEMO_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEMO_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMO_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMO_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEMO_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMO_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMO_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMO_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMI_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEMI_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMI_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMI_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEMI_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMI_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMI_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMI_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEMO_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEMO_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEMO_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEMI_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEMI_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEMI_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmemo_AWVALID : OUT STD_LOGIC;
    m_axi_gmemo_AWREADY : IN STD_LOGIC;
    m_axi_gmemo_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMO_ADDR_WIDTH-1 downto 0);
    m_axi_gmemo_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMO_ID_WIDTH-1 downto 0);
    m_axi_gmemo_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmemo_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMO_AWUSER_WIDTH-1 downto 0);
    m_axi_gmemo_WVALID : OUT STD_LOGIC;
    m_axi_gmemo_WREADY : IN STD_LOGIC;
    m_axi_gmemo_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMO_DATA_WIDTH-1 downto 0);
    m_axi_gmemo_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMO_DATA_WIDTH/8-1 downto 0);
    m_axi_gmemo_WLAST : OUT STD_LOGIC;
    m_axi_gmemo_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMO_ID_WIDTH-1 downto 0);
    m_axi_gmemo_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMO_WUSER_WIDTH-1 downto 0);
    m_axi_gmemo_ARVALID : OUT STD_LOGIC;
    m_axi_gmemo_ARREADY : IN STD_LOGIC;
    m_axi_gmemo_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMO_ADDR_WIDTH-1 downto 0);
    m_axi_gmemo_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMO_ID_WIDTH-1 downto 0);
    m_axi_gmemo_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmemo_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemo_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemo_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMO_ARUSER_WIDTH-1 downto 0);
    m_axi_gmemo_RVALID : IN STD_LOGIC;
    m_axi_gmemo_RREADY : OUT STD_LOGIC;
    m_axi_gmemo_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEMO_DATA_WIDTH-1 downto 0);
    m_axi_gmemo_RLAST : IN STD_LOGIC;
    m_axi_gmemo_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEMO_ID_WIDTH-1 downto 0);
    m_axi_gmemo_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEMO_RUSER_WIDTH-1 downto 0);
    m_axi_gmemo_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_BVALID : IN STD_LOGIC;
    m_axi_gmemo_BREADY : OUT STD_LOGIC;
    m_axi_gmemo_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemo_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEMO_ID_WIDTH-1 downto 0);
    m_axi_gmemo_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEMO_BUSER_WIDTH-1 downto 0);
    m_axi_gmemi_AWVALID : OUT STD_LOGIC;
    m_axi_gmemi_AWREADY : IN STD_LOGIC;
    m_axi_gmemi_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMI_ADDR_WIDTH-1 downto 0);
    m_axi_gmemi_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMI_ID_WIDTH-1 downto 0);
    m_axi_gmemi_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmemi_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemi_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemi_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemi_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemi_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemi_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemi_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemi_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMI_AWUSER_WIDTH-1 downto 0);
    m_axi_gmemi_WVALID : OUT STD_LOGIC;
    m_axi_gmemi_WREADY : IN STD_LOGIC;
    m_axi_gmemi_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMI_DATA_WIDTH-1 downto 0);
    m_axi_gmemi_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMI_DATA_WIDTH/8-1 downto 0);
    m_axi_gmemi_WLAST : OUT STD_LOGIC;
    m_axi_gmemi_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMI_ID_WIDTH-1 downto 0);
    m_axi_gmemi_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMI_WUSER_WIDTH-1 downto 0);
    m_axi_gmemi_ARVALID : OUT STD_LOGIC;
    m_axi_gmemi_ARREADY : IN STD_LOGIC;
    m_axi_gmemi_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMI_ADDR_WIDTH-1 downto 0);
    m_axi_gmemi_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMI_ID_WIDTH-1 downto 0);
    m_axi_gmemi_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmemi_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemi_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemi_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemi_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemi_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmemi_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemi_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmemi_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEMI_ARUSER_WIDTH-1 downto 0);
    m_axi_gmemi_RVALID : IN STD_LOGIC;
    m_axi_gmemi_RREADY : OUT STD_LOGIC;
    m_axi_gmemi_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEMI_DATA_WIDTH-1 downto 0);
    m_axi_gmemi_RLAST : IN STD_LOGIC;
    m_axi_gmemi_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEMI_ID_WIDTH-1 downto 0);
    m_axi_gmemi_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEMI_RUSER_WIDTH-1 downto 0);
    m_axi_gmemi_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemi_BVALID : IN STD_LOGIC;
    m_axi_gmemi_BREADY : OUT STD_LOGIC;
    m_axi_gmemi_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmemi_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEMI_ID_WIDTH-1 downto 0);
    m_axi_gmemi_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEMI_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of dataflow_stalls_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dataflow_stalls_kernel,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1157-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=8,HLS_SYN_DSP=16,HLS_SYN_FF=2749,HLS_SYN_LUT=3556}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC := '1';
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal output_ddr0 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_ddr0 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_count : STD_LOGIC_VECTOR (31 downto 0);
    signal gmemo_AWREADY : STD_LOGIC;
    signal gmemo_WREADY : STD_LOGIC;
    signal gmemo_ARREADY : STD_LOGIC;
    signal gmemo_RVALID : STD_LOGIC;
    signal gmemo_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemo_RLAST : STD_LOGIC;
    signal gmemo_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmemo_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmemo_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmemo_BVALID : STD_LOGIC;
    signal gmemo_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmemo_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmemo_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmemi_AWREADY : STD_LOGIC;
    signal gmemi_WREADY : STD_LOGIC;
    signal gmemi_ARREADY : STD_LOGIC;
    signal gmemi_RVALID : STD_LOGIC;
    signal gmemi_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmemi_RLAST : STD_LOGIC;
    signal gmemi_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmemi_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmemi_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmemi_BVALID : STD_LOGIC;
    signal gmemi_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmemi_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmemi_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load5_U0_ap_start : STD_LOGIC;
    signal load5_U0_start_full_n : STD_LOGIC;
    signal load5_U0_ap_ready : STD_LOGIC;
    signal load5_U0_ap_done : STD_LOGIC;
    signal load5_U0_ap_continue : STD_LOGIC;
    signal load5_U0_ap_idle : STD_LOGIC;
    signal load5_U0_start_out : STD_LOGIC;
    signal load5_U0_start_write : STD_LOGIC;
    signal load5_U0_to_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal load5_U0_to_V_write : STD_LOGIC;
    signal load5_U0_m_axi_from_AWVALID : STD_LOGIC;
    signal load5_U0_m_axi_from_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load5_U0_m_axi_from_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load5_U0_m_axi_from_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load5_U0_m_axi_from_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load5_U0_m_axi_from_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load5_U0_m_axi_from_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load5_U0_m_axi_from_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load5_U0_m_axi_from_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load5_U0_m_axi_from_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load5_U0_m_axi_from_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load5_U0_m_axi_from_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load5_U0_m_axi_from_WVALID : STD_LOGIC;
    signal load5_U0_m_axi_from_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal load5_U0_m_axi_from_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal load5_U0_m_axi_from_WLAST : STD_LOGIC;
    signal load5_U0_m_axi_from_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load5_U0_m_axi_from_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load5_U0_m_axi_from_ARVALID : STD_LOGIC;
    signal load5_U0_m_axi_from_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load5_U0_m_axi_from_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load5_U0_m_axi_from_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load5_U0_m_axi_from_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load5_U0_m_axi_from_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load5_U0_m_axi_from_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load5_U0_m_axi_from_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load5_U0_m_axi_from_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load5_U0_m_axi_from_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load5_U0_m_axi_from_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load5_U0_m_axi_from_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load5_U0_m_axi_from_RREADY : STD_LOGIC;
    signal load5_U0_m_axi_from_BREADY : STD_LOGIC;
    signal load5_U0_data_count_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal load5_U0_data_count_out_write : STD_LOGIC;
    signal load5_U0_output_ddr0_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal load5_U0_output_ddr0_out_write : STD_LOGIC;
    signal scatter_U0_ap_start : STD_LOGIC;
    signal scatter_U0_start_full_n : STD_LOGIC;
    signal scatter_U0_ap_ready : STD_LOGIC;
    signal scatter_U0_ap_done : STD_LOGIC;
    signal scatter_U0_ap_continue : STD_LOGIC;
    signal scatter_U0_ap_idle : STD_LOGIC;
    signal scatter_U0_start_out : STD_LOGIC;
    signal scatter_U0_start_write : STD_LOGIC;
    signal scatter_U0_to0_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal scatter_U0_to0_V_write : STD_LOGIC;
    signal scatter_U0_to1_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal scatter_U0_to1_V_write : STD_LOGIC;
    signal scatter_U0_from_V_read : STD_LOGIC;
    signal scatter_U0_data_count_read : STD_LOGIC;
    signal scatter_U0_data_count_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal scatter_U0_data_count_out_write : STD_LOGIC;
    signal scatter_U0_data_count_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal scatter_U0_data_count_out1_write : STD_LOGIC;
    signal compute1_U0_ap_start : STD_LOGIC;
    signal compute1_U0_start_full_n : STD_LOGIC;
    signal compute1_U0_ap_ready : STD_LOGIC;
    signal compute1_U0_ap_done : STD_LOGIC;
    signal compute1_U0_ap_continue : STD_LOGIC;
    signal compute1_U0_ap_idle : STD_LOGIC;
    signal compute1_U0_start_out : STD_LOGIC;
    signal compute1_U0_start_write : STD_LOGIC;
    signal compute1_U0_to_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal compute1_U0_to_V_write : STD_LOGIC;
    signal compute1_U0_from_V_read : STD_LOGIC;
    signal compute1_U0_data_count_read : STD_LOGIC;
    signal compute1_U0_data_count_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute1_U0_data_count_out_write : STD_LOGIC;
    signal compute2_U0_ap_start : STD_LOGIC;
    signal compute2_U0_ap_done : STD_LOGIC;
    signal compute2_U0_ap_continue : STD_LOGIC;
    signal compute2_U0_ap_idle : STD_LOGIC;
    signal compute2_U0_ap_ready : STD_LOGIC;
    signal compute2_U0_to_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal compute2_U0_to_V_write : STD_LOGIC;
    signal compute2_U0_from_V_read : STD_LOGIC;
    signal compute2_U0_data_count_read : STD_LOGIC;
    signal gather_U0_ap_start : STD_LOGIC;
    signal gather_U0_ap_done : STD_LOGIC;
    signal gather_U0_ap_continue : STD_LOGIC;
    signal gather_U0_ap_idle : STD_LOGIC;
    signal gather_U0_ap_ready : STD_LOGIC;
    signal gather_U0_to_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal gather_U0_to_V_write : STD_LOGIC;
    signal gather_U0_from0_V_read : STD_LOGIC;
    signal gather_U0_from1_V_read : STD_LOGIC;
    signal gather_U0_data_count_read : STD_LOGIC;
    signal gather_U0_data_count_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gather_U0_data_count_out_write : STD_LOGIC;
    signal store_U0_ap_start : STD_LOGIC;
    signal store_U0_ap_done : STD_LOGIC;
    signal store_U0_ap_continue : STD_LOGIC;
    signal store_U0_ap_idle : STD_LOGIC;
    signal store_U0_ap_ready : STD_LOGIC;
    signal store_U0_m_axi_to_r_AWVALID : STD_LOGIC;
    signal store_U0_m_axi_to_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_U0_m_axi_to_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_to_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_U0_m_axi_to_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_to_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_to_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_to_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_to_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_to_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_to_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_to_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_to_r_WVALID : STD_LOGIC;
    signal store_U0_m_axi_to_r_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal store_U0_m_axi_to_r_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal store_U0_m_axi_to_r_WLAST : STD_LOGIC;
    signal store_U0_m_axi_to_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_to_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_to_r_ARVALID : STD_LOGIC;
    signal store_U0_m_axi_to_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_U0_m_axi_to_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_to_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_U0_m_axi_to_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_to_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_to_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_U0_m_axi_to_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_to_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_U0_m_axi_to_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_to_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_U0_m_axi_to_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_U0_m_axi_to_r_RREADY : STD_LOGIC;
    signal store_U0_m_axi_to_r_BREADY : STD_LOGIC;
    signal store_U0_to_offset_read : STD_LOGIC;
    signal store_U0_from_V_read : STD_LOGIC;
    signal store_U0_data_count_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal data_stage0_V_full_n : STD_LOGIC;
    signal data_stage0_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal data_stage0_V_empty_n : STD_LOGIC;
    signal data_count_c_full_n : STD_LOGIC;
    signal data_count_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_count_c_empty_n : STD_LOGIC;
    signal output_ddr0_c_full_n : STD_LOGIC;
    signal output_ddr0_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_ddr0_c_empty_n : STD_LOGIC;
    signal data_stage1_V_full_n : STD_LOGIC;
    signal data_stage1_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal data_stage1_V_empty_n : STD_LOGIC;
    signal data_stage2_V_full_n : STD_LOGIC;
    signal data_stage2_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal data_stage2_V_empty_n : STD_LOGIC;
    signal data_count_c7_full_n : STD_LOGIC;
    signal data_count_c7_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_count_c7_empty_n : STD_LOGIC;
    signal data_count_c8_full_n : STD_LOGIC;
    signal data_count_c8_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_count_c8_empty_n : STD_LOGIC;
    signal data_stage3_V_full_n : STD_LOGIC;
    signal data_stage3_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal data_stage3_V_empty_n : STD_LOGIC;
    signal data_count_c9_full_n : STD_LOGIC;
    signal data_count_c9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_count_c9_empty_n : STD_LOGIC;
    signal data_stage4_V_full_n : STD_LOGIC;
    signal data_stage4_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal data_stage4_V_empty_n : STD_LOGIC;
    signal data_stage5_V_full_n : STD_LOGIC;
    signal data_stage5_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal data_stage5_V_empty_n : STD_LOGIC;
    signal data_count_c10_full_n : STD_LOGIC;
    signal data_count_c10_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal data_count_c10_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_scatter_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_scatter_U0_full_n : STD_LOGIC;
    signal start_for_scatter_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_scatter_U0_empty_n : STD_LOGIC;
    signal start_for_store_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_U0_full_n : STD_LOGIC;
    signal start_for_store_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_U0_empty_n : STD_LOGIC;
    signal start_for_compute1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute1_U0_full_n : STD_LOGIC;
    signal start_for_compute1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute1_U0_empty_n : STD_LOGIC;
    signal start_for_compute2_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute2_U0_full_n : STD_LOGIC;
    signal start_for_compute2_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute2_U0_empty_n : STD_LOGIC;
    signal start_for_gather_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gather_U0_full_n : STD_LOGIC;
    signal start_for_gather_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gather_U0_empty_n : STD_LOGIC;
    signal compute2_U0_start_full_n : STD_LOGIC;
    signal compute2_U0_start_write : STD_LOGIC;
    signal gather_U0_start_full_n : STD_LOGIC;
    signal gather_U0_start_write : STD_LOGIC;
    signal store_U0_start_full_n : STD_LOGIC;
    signal store_U0_start_write : STD_LOGIC;

    component load5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        to_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        to_V_full_n : IN STD_LOGIC;
        to_V_write : OUT STD_LOGIC;
        m_axi_from_AWVALID : OUT STD_LOGIC;
        m_axi_from_AWREADY : IN STD_LOGIC;
        m_axi_from_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_from_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_from_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_from_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_from_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_from_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_from_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_from_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_from_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_from_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_from_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_from_WVALID : OUT STD_LOGIC;
        m_axi_from_WREADY : IN STD_LOGIC;
        m_axi_from_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_from_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_from_WLAST : OUT STD_LOGIC;
        m_axi_from_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_from_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_from_ARVALID : OUT STD_LOGIC;
        m_axi_from_ARREADY : IN STD_LOGIC;
        m_axi_from_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_from_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_from_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_from_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_from_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_from_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_from_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_from_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_from_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_from_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_from_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_from_RVALID : IN STD_LOGIC;
        m_axi_from_RREADY : OUT STD_LOGIC;
        m_axi_from_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_from_RLAST : IN STD_LOGIC;
        m_axi_from_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_from_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_from_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_from_BVALID : IN STD_LOGIC;
        m_axi_from_BREADY : OUT STD_LOGIC;
        m_axi_from_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_from_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_from_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        from_offset : IN STD_LOGIC_VECTOR (63 downto 0);
        data_count : IN STD_LOGIC_VECTOR (31 downto 0);
        data_count_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_count_out_full_n : IN STD_LOGIC;
        data_count_out_write : OUT STD_LOGIC;
        output_ddr0 : IN STD_LOGIC_VECTOR (63 downto 0);
        output_ddr0_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_ddr0_out_full_n : IN STD_LOGIC;
        output_ddr0_out_write : OUT STD_LOGIC );
    end component;


    component scatter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        to0_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        to0_V_full_n : IN STD_LOGIC;
        to0_V_write : OUT STD_LOGIC;
        to1_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        to1_V_full_n : IN STD_LOGIC;
        to1_V_write : OUT STD_LOGIC;
        from_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        from_V_empty_n : IN STD_LOGIC;
        from_V_read : OUT STD_LOGIC;
        data_count_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_count_empty_n : IN STD_LOGIC;
        data_count_read : OUT STD_LOGIC;
        data_count_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_count_out_full_n : IN STD_LOGIC;
        data_count_out_write : OUT STD_LOGIC;
        data_count_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_count_out1_full_n : IN STD_LOGIC;
        data_count_out1_write : OUT STD_LOGIC );
    end component;


    component compute1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        to_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        to_V_full_n : IN STD_LOGIC;
        to_V_write : OUT STD_LOGIC;
        from_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        from_V_empty_n : IN STD_LOGIC;
        from_V_read : OUT STD_LOGIC;
        data_count_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_count_empty_n : IN STD_LOGIC;
        data_count_read : OUT STD_LOGIC;
        data_count_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_count_out_full_n : IN STD_LOGIC;
        data_count_out_write : OUT STD_LOGIC );
    end component;


    component compute2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        to_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        to_V_full_n : IN STD_LOGIC;
        to_V_write : OUT STD_LOGIC;
        from_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        from_V_empty_n : IN STD_LOGIC;
        from_V_read : OUT STD_LOGIC;
        data_count_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_count_empty_n : IN STD_LOGIC;
        data_count_read : OUT STD_LOGIC );
    end component;


    component gather IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        to_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        to_V_full_n : IN STD_LOGIC;
        to_V_write : OUT STD_LOGIC;
        from0_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        from0_V_empty_n : IN STD_LOGIC;
        from0_V_read : OUT STD_LOGIC;
        from1_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        from1_V_empty_n : IN STD_LOGIC;
        from1_V_read : OUT STD_LOGIC;
        data_count_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_count_empty_n : IN STD_LOGIC;
        data_count_read : OUT STD_LOGIC;
        data_count_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_count_out_full_n : IN STD_LOGIC;
        data_count_out_write : OUT STD_LOGIC );
    end component;


    component store IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_to_r_AWVALID : OUT STD_LOGIC;
        m_axi_to_r_AWREADY : IN STD_LOGIC;
        m_axi_to_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_to_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_to_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_to_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_to_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_to_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_to_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_to_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_to_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_to_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_to_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_to_r_WVALID : OUT STD_LOGIC;
        m_axi_to_r_WREADY : IN STD_LOGIC;
        m_axi_to_r_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_to_r_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_to_r_WLAST : OUT STD_LOGIC;
        m_axi_to_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_to_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_to_r_ARVALID : OUT STD_LOGIC;
        m_axi_to_r_ARREADY : IN STD_LOGIC;
        m_axi_to_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_to_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_to_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_to_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_to_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_to_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_to_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_to_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_to_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_to_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_to_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_to_r_RVALID : IN STD_LOGIC;
        m_axi_to_r_RREADY : OUT STD_LOGIC;
        m_axi_to_r_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_to_r_RLAST : IN STD_LOGIC;
        m_axi_to_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_to_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_to_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_to_r_BVALID : IN STD_LOGIC;
        m_axi_to_r_BREADY : OUT STD_LOGIC;
        m_axi_to_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_to_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_to_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        to_offset_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        to_offset_empty_n : IN STD_LOGIC;
        to_offset_read : OUT STD_LOGIC;
        from_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        from_V_empty_n : IN STD_LOGIC;
        from_V_read : OUT STD_LOGIC;
        data_count_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        data_count_empty_n : IN STD_LOGIC;
        data_count_read : OUT STD_LOGIC );
    end component;


    component fifo_w64_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_scatter_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_store_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_compute1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_compute2_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gather_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dataflow_stalls_kernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        output_ddr0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        input_ddr0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        data_count : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dataflow_stalls_kernel_gmemo_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dataflow_stalls_kernel_gmemi_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    dataflow_stalls_kernel_control_s_axi_U : component dataflow_stalls_kernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        output_ddr0 => output_ddr0,
        input_ddr0 => input_ddr0,
        data_count => data_count);

    dataflow_stalls_kernel_gmemo_m_axi_U : component dataflow_stalls_kernel_gmemo_m_axi
    generic map (
        USER_DW => 64,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEMO_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEMO_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEMO_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEMO_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEMO_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEMO_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEMO_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEMO_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEMO_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEMO_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEMO_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmemo_AWVALID,
        AWREADY => m_axi_gmemo_AWREADY,
        AWADDR => m_axi_gmemo_AWADDR,
        AWID => m_axi_gmemo_AWID,
        AWLEN => m_axi_gmemo_AWLEN,
        AWSIZE => m_axi_gmemo_AWSIZE,
        AWBURST => m_axi_gmemo_AWBURST,
        AWLOCK => m_axi_gmemo_AWLOCK,
        AWCACHE => m_axi_gmemo_AWCACHE,
        AWPROT => m_axi_gmemo_AWPROT,
        AWQOS => m_axi_gmemo_AWQOS,
        AWREGION => m_axi_gmemo_AWREGION,
        AWUSER => m_axi_gmemo_AWUSER,
        WVALID => m_axi_gmemo_WVALID,
        WREADY => m_axi_gmemo_WREADY,
        WDATA => m_axi_gmemo_WDATA,
        WSTRB => m_axi_gmemo_WSTRB,
        WLAST => m_axi_gmemo_WLAST,
        WID => m_axi_gmemo_WID,
        WUSER => m_axi_gmemo_WUSER,
        ARVALID => m_axi_gmemo_ARVALID,
        ARREADY => m_axi_gmemo_ARREADY,
        ARADDR => m_axi_gmemo_ARADDR,
        ARID => m_axi_gmemo_ARID,
        ARLEN => m_axi_gmemo_ARLEN,
        ARSIZE => m_axi_gmemo_ARSIZE,
        ARBURST => m_axi_gmemo_ARBURST,
        ARLOCK => m_axi_gmemo_ARLOCK,
        ARCACHE => m_axi_gmemo_ARCACHE,
        ARPROT => m_axi_gmemo_ARPROT,
        ARQOS => m_axi_gmemo_ARQOS,
        ARREGION => m_axi_gmemo_ARREGION,
        ARUSER => m_axi_gmemo_ARUSER,
        RVALID => m_axi_gmemo_RVALID,
        RREADY => m_axi_gmemo_RREADY,
        RDATA => m_axi_gmemo_RDATA,
        RLAST => m_axi_gmemo_RLAST,
        RID => m_axi_gmemo_RID,
        RUSER => m_axi_gmemo_RUSER,
        RRESP => m_axi_gmemo_RRESP,
        BVALID => m_axi_gmemo_BVALID,
        BREADY => m_axi_gmemo_BREADY,
        BRESP => m_axi_gmemo_BRESP,
        BID => m_axi_gmemo_BID,
        BUSER => m_axi_gmemo_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmemo_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmemo_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmemo_RDATA,
        I_RID => gmemo_RID,
        I_RUSER => gmemo_RUSER,
        I_RRESP => gmemo_RRESP,
        I_RLAST => gmemo_RLAST,
        I_AWVALID => store_U0_m_axi_to_r_AWVALID,
        I_AWREADY => gmemo_AWREADY,
        I_AWADDR => store_U0_m_axi_to_r_AWADDR,
        I_AWID => store_U0_m_axi_to_r_AWID,
        I_AWLEN => store_U0_m_axi_to_r_AWLEN,
        I_AWSIZE => store_U0_m_axi_to_r_AWSIZE,
        I_AWLOCK => store_U0_m_axi_to_r_AWLOCK,
        I_AWCACHE => store_U0_m_axi_to_r_AWCACHE,
        I_AWQOS => store_U0_m_axi_to_r_AWQOS,
        I_AWPROT => store_U0_m_axi_to_r_AWPROT,
        I_AWUSER => store_U0_m_axi_to_r_AWUSER,
        I_AWBURST => store_U0_m_axi_to_r_AWBURST,
        I_AWREGION => store_U0_m_axi_to_r_AWREGION,
        I_WVALID => store_U0_m_axi_to_r_WVALID,
        I_WREADY => gmemo_WREADY,
        I_WDATA => store_U0_m_axi_to_r_WDATA,
        I_WID => store_U0_m_axi_to_r_WID,
        I_WUSER => store_U0_m_axi_to_r_WUSER,
        I_WLAST => store_U0_m_axi_to_r_WLAST,
        I_WSTRB => store_U0_m_axi_to_r_WSTRB,
        I_BVALID => gmemo_BVALID,
        I_BREADY => store_U0_m_axi_to_r_BREADY,
        I_BRESP => gmemo_BRESP,
        I_BID => gmemo_BID,
        I_BUSER => gmemo_BUSER);

    dataflow_stalls_kernel_gmemi_m_axi_U : component dataflow_stalls_kernel_gmemi_m_axi
    generic map (
        USER_DW => 64,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEMI_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEMI_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEMI_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEMI_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEMI_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEMI_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEMI_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEMI_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEMI_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEMI_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEMI_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmemi_AWVALID,
        AWREADY => m_axi_gmemi_AWREADY,
        AWADDR => m_axi_gmemi_AWADDR,
        AWID => m_axi_gmemi_AWID,
        AWLEN => m_axi_gmemi_AWLEN,
        AWSIZE => m_axi_gmemi_AWSIZE,
        AWBURST => m_axi_gmemi_AWBURST,
        AWLOCK => m_axi_gmemi_AWLOCK,
        AWCACHE => m_axi_gmemi_AWCACHE,
        AWPROT => m_axi_gmemi_AWPROT,
        AWQOS => m_axi_gmemi_AWQOS,
        AWREGION => m_axi_gmemi_AWREGION,
        AWUSER => m_axi_gmemi_AWUSER,
        WVALID => m_axi_gmemi_WVALID,
        WREADY => m_axi_gmemi_WREADY,
        WDATA => m_axi_gmemi_WDATA,
        WSTRB => m_axi_gmemi_WSTRB,
        WLAST => m_axi_gmemi_WLAST,
        WID => m_axi_gmemi_WID,
        WUSER => m_axi_gmemi_WUSER,
        ARVALID => m_axi_gmemi_ARVALID,
        ARREADY => m_axi_gmemi_ARREADY,
        ARADDR => m_axi_gmemi_ARADDR,
        ARID => m_axi_gmemi_ARID,
        ARLEN => m_axi_gmemi_ARLEN,
        ARSIZE => m_axi_gmemi_ARSIZE,
        ARBURST => m_axi_gmemi_ARBURST,
        ARLOCK => m_axi_gmemi_ARLOCK,
        ARCACHE => m_axi_gmemi_ARCACHE,
        ARPROT => m_axi_gmemi_ARPROT,
        ARQOS => m_axi_gmemi_ARQOS,
        ARREGION => m_axi_gmemi_ARREGION,
        ARUSER => m_axi_gmemi_ARUSER,
        RVALID => m_axi_gmemi_RVALID,
        RREADY => m_axi_gmemi_RREADY,
        RDATA => m_axi_gmemi_RDATA,
        RLAST => m_axi_gmemi_RLAST,
        RID => m_axi_gmemi_RID,
        RUSER => m_axi_gmemi_RUSER,
        RRESP => m_axi_gmemi_RRESP,
        BVALID => m_axi_gmemi_BVALID,
        BREADY => m_axi_gmemi_BREADY,
        BRESP => m_axi_gmemi_BRESP,
        BID => m_axi_gmemi_BID,
        BUSER => m_axi_gmemi_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => load5_U0_m_axi_from_ARVALID,
        I_ARREADY => gmemi_ARREADY,
        I_ARADDR => load5_U0_m_axi_from_ARADDR,
        I_ARID => load5_U0_m_axi_from_ARID,
        I_ARLEN => load5_U0_m_axi_from_ARLEN,
        I_ARSIZE => load5_U0_m_axi_from_ARSIZE,
        I_ARLOCK => load5_U0_m_axi_from_ARLOCK,
        I_ARCACHE => load5_U0_m_axi_from_ARCACHE,
        I_ARQOS => load5_U0_m_axi_from_ARQOS,
        I_ARPROT => load5_U0_m_axi_from_ARPROT,
        I_ARUSER => load5_U0_m_axi_from_ARUSER,
        I_ARBURST => load5_U0_m_axi_from_ARBURST,
        I_ARREGION => load5_U0_m_axi_from_ARREGION,
        I_RVALID => gmemi_RVALID,
        I_RREADY => load5_U0_m_axi_from_RREADY,
        I_RDATA => gmemi_RDATA,
        I_RID => gmemi_RID,
        I_RUSER => gmemi_RUSER,
        I_RRESP => gmemi_RRESP,
        I_RLAST => gmemi_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmemi_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmemi_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => gmemi_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmemi_BRESP,
        I_BID => gmemi_BID,
        I_BUSER => gmemi_BUSER);

    load5_U0 : component load5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => load5_U0_ap_start,
        start_full_n => load5_U0_start_full_n,
        ap_ready => load5_U0_ap_ready,
        ap_done => load5_U0_ap_done,
        ap_continue => load5_U0_ap_continue,
        ap_idle => load5_U0_ap_idle,
        start_out => load5_U0_start_out,
        start_write => load5_U0_start_write,
        to_V_din => load5_U0_to_V_din,
        to_V_full_n => data_stage0_V_full_n,
        to_V_write => load5_U0_to_V_write,
        m_axi_from_AWVALID => load5_U0_m_axi_from_AWVALID,
        m_axi_from_AWREADY => ap_const_logic_0,
        m_axi_from_AWADDR => load5_U0_m_axi_from_AWADDR,
        m_axi_from_AWID => load5_U0_m_axi_from_AWID,
        m_axi_from_AWLEN => load5_U0_m_axi_from_AWLEN,
        m_axi_from_AWSIZE => load5_U0_m_axi_from_AWSIZE,
        m_axi_from_AWBURST => load5_U0_m_axi_from_AWBURST,
        m_axi_from_AWLOCK => load5_U0_m_axi_from_AWLOCK,
        m_axi_from_AWCACHE => load5_U0_m_axi_from_AWCACHE,
        m_axi_from_AWPROT => load5_U0_m_axi_from_AWPROT,
        m_axi_from_AWQOS => load5_U0_m_axi_from_AWQOS,
        m_axi_from_AWREGION => load5_U0_m_axi_from_AWREGION,
        m_axi_from_AWUSER => load5_U0_m_axi_from_AWUSER,
        m_axi_from_WVALID => load5_U0_m_axi_from_WVALID,
        m_axi_from_WREADY => ap_const_logic_0,
        m_axi_from_WDATA => load5_U0_m_axi_from_WDATA,
        m_axi_from_WSTRB => load5_U0_m_axi_from_WSTRB,
        m_axi_from_WLAST => load5_U0_m_axi_from_WLAST,
        m_axi_from_WID => load5_U0_m_axi_from_WID,
        m_axi_from_WUSER => load5_U0_m_axi_from_WUSER,
        m_axi_from_ARVALID => load5_U0_m_axi_from_ARVALID,
        m_axi_from_ARREADY => gmemi_ARREADY,
        m_axi_from_ARADDR => load5_U0_m_axi_from_ARADDR,
        m_axi_from_ARID => load5_U0_m_axi_from_ARID,
        m_axi_from_ARLEN => load5_U0_m_axi_from_ARLEN,
        m_axi_from_ARSIZE => load5_U0_m_axi_from_ARSIZE,
        m_axi_from_ARBURST => load5_U0_m_axi_from_ARBURST,
        m_axi_from_ARLOCK => load5_U0_m_axi_from_ARLOCK,
        m_axi_from_ARCACHE => load5_U0_m_axi_from_ARCACHE,
        m_axi_from_ARPROT => load5_U0_m_axi_from_ARPROT,
        m_axi_from_ARQOS => load5_U0_m_axi_from_ARQOS,
        m_axi_from_ARREGION => load5_U0_m_axi_from_ARREGION,
        m_axi_from_ARUSER => load5_U0_m_axi_from_ARUSER,
        m_axi_from_RVALID => gmemi_RVALID,
        m_axi_from_RREADY => load5_U0_m_axi_from_RREADY,
        m_axi_from_RDATA => gmemi_RDATA,
        m_axi_from_RLAST => gmemi_RLAST,
        m_axi_from_RID => gmemi_RID,
        m_axi_from_RUSER => gmemi_RUSER,
        m_axi_from_RRESP => gmemi_RRESP,
        m_axi_from_BVALID => ap_const_logic_0,
        m_axi_from_BREADY => load5_U0_m_axi_from_BREADY,
        m_axi_from_BRESP => ap_const_lv2_0,
        m_axi_from_BID => ap_const_lv1_0,
        m_axi_from_BUSER => ap_const_lv1_0,
        from_offset => input_ddr0,
        data_count => data_count,
        data_count_out_din => load5_U0_data_count_out_din,
        data_count_out_full_n => data_count_c_full_n,
        data_count_out_write => load5_U0_data_count_out_write,
        output_ddr0 => output_ddr0,
        output_ddr0_out_din => load5_U0_output_ddr0_out_din,
        output_ddr0_out_full_n => output_ddr0_c_full_n,
        output_ddr0_out_write => load5_U0_output_ddr0_out_write);

    scatter_U0 : component scatter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => scatter_U0_ap_start,
        start_full_n => scatter_U0_start_full_n,
        ap_ready => scatter_U0_ap_ready,
        ap_done => scatter_U0_ap_done,
        ap_continue => scatter_U0_ap_continue,
        ap_idle => scatter_U0_ap_idle,
        start_out => scatter_U0_start_out,
        start_write => scatter_U0_start_write,
        to0_V_din => scatter_U0_to0_V_din,
        to0_V_full_n => data_stage1_V_full_n,
        to0_V_write => scatter_U0_to0_V_write,
        to1_V_din => scatter_U0_to1_V_din,
        to1_V_full_n => data_stage2_V_full_n,
        to1_V_write => scatter_U0_to1_V_write,
        from_V_dout => data_stage0_V_dout,
        from_V_empty_n => data_stage0_V_empty_n,
        from_V_read => scatter_U0_from_V_read,
        data_count_dout => data_count_c_dout,
        data_count_empty_n => data_count_c_empty_n,
        data_count_read => scatter_U0_data_count_read,
        data_count_out_din => scatter_U0_data_count_out_din,
        data_count_out_full_n => data_count_c7_full_n,
        data_count_out_write => scatter_U0_data_count_out_write,
        data_count_out1_din => scatter_U0_data_count_out1_din,
        data_count_out1_full_n => data_count_c8_full_n,
        data_count_out1_write => scatter_U0_data_count_out1_write);

    compute1_U0 : component compute1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute1_U0_ap_start,
        start_full_n => compute1_U0_start_full_n,
        ap_ready => compute1_U0_ap_ready,
        ap_done => compute1_U0_ap_done,
        ap_continue => compute1_U0_ap_continue,
        ap_idle => compute1_U0_ap_idle,
        start_out => compute1_U0_start_out,
        start_write => compute1_U0_start_write,
        to_V_din => compute1_U0_to_V_din,
        to_V_full_n => data_stage3_V_full_n,
        to_V_write => compute1_U0_to_V_write,
        from_V_dout => data_stage1_V_dout,
        from_V_empty_n => data_stage1_V_empty_n,
        from_V_read => compute1_U0_from_V_read,
        data_count_dout => data_count_c7_dout,
        data_count_empty_n => data_count_c7_empty_n,
        data_count_read => compute1_U0_data_count_read,
        data_count_out_din => compute1_U0_data_count_out_din,
        data_count_out_full_n => data_count_c9_full_n,
        data_count_out_write => compute1_U0_data_count_out_write);

    compute2_U0 : component compute2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute2_U0_ap_start,
        ap_done => compute2_U0_ap_done,
        ap_continue => compute2_U0_ap_continue,
        ap_idle => compute2_U0_ap_idle,
        ap_ready => compute2_U0_ap_ready,
        to_V_din => compute2_U0_to_V_din,
        to_V_full_n => data_stage4_V_full_n,
        to_V_write => compute2_U0_to_V_write,
        from_V_dout => data_stage2_V_dout,
        from_V_empty_n => data_stage2_V_empty_n,
        from_V_read => compute2_U0_from_V_read,
        data_count_dout => data_count_c8_dout,
        data_count_empty_n => data_count_c8_empty_n,
        data_count_read => compute2_U0_data_count_read);

    gather_U0 : component gather
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gather_U0_ap_start,
        ap_done => gather_U0_ap_done,
        ap_continue => gather_U0_ap_continue,
        ap_idle => gather_U0_ap_idle,
        ap_ready => gather_U0_ap_ready,
        to_V_din => gather_U0_to_V_din,
        to_V_full_n => data_stage5_V_full_n,
        to_V_write => gather_U0_to_V_write,
        from0_V_dout => data_stage3_V_dout,
        from0_V_empty_n => data_stage3_V_empty_n,
        from0_V_read => gather_U0_from0_V_read,
        from1_V_dout => data_stage4_V_dout,
        from1_V_empty_n => data_stage4_V_empty_n,
        from1_V_read => gather_U0_from1_V_read,
        data_count_dout => data_count_c9_dout,
        data_count_empty_n => data_count_c9_empty_n,
        data_count_read => gather_U0_data_count_read,
        data_count_out_din => gather_U0_data_count_out_din,
        data_count_out_full_n => data_count_c10_full_n,
        data_count_out_write => gather_U0_data_count_out_write);

    store_U0 : component store
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => store_U0_ap_start,
        ap_done => store_U0_ap_done,
        ap_continue => store_U0_ap_continue,
        ap_idle => store_U0_ap_idle,
        ap_ready => store_U0_ap_ready,
        m_axi_to_r_AWVALID => store_U0_m_axi_to_r_AWVALID,
        m_axi_to_r_AWREADY => gmemo_AWREADY,
        m_axi_to_r_AWADDR => store_U0_m_axi_to_r_AWADDR,
        m_axi_to_r_AWID => store_U0_m_axi_to_r_AWID,
        m_axi_to_r_AWLEN => store_U0_m_axi_to_r_AWLEN,
        m_axi_to_r_AWSIZE => store_U0_m_axi_to_r_AWSIZE,
        m_axi_to_r_AWBURST => store_U0_m_axi_to_r_AWBURST,
        m_axi_to_r_AWLOCK => store_U0_m_axi_to_r_AWLOCK,
        m_axi_to_r_AWCACHE => store_U0_m_axi_to_r_AWCACHE,
        m_axi_to_r_AWPROT => store_U0_m_axi_to_r_AWPROT,
        m_axi_to_r_AWQOS => store_U0_m_axi_to_r_AWQOS,
        m_axi_to_r_AWREGION => store_U0_m_axi_to_r_AWREGION,
        m_axi_to_r_AWUSER => store_U0_m_axi_to_r_AWUSER,
        m_axi_to_r_WVALID => store_U0_m_axi_to_r_WVALID,
        m_axi_to_r_WREADY => gmemo_WREADY,
        m_axi_to_r_WDATA => store_U0_m_axi_to_r_WDATA,
        m_axi_to_r_WSTRB => store_U0_m_axi_to_r_WSTRB,
        m_axi_to_r_WLAST => store_U0_m_axi_to_r_WLAST,
        m_axi_to_r_WID => store_U0_m_axi_to_r_WID,
        m_axi_to_r_WUSER => store_U0_m_axi_to_r_WUSER,
        m_axi_to_r_ARVALID => store_U0_m_axi_to_r_ARVALID,
        m_axi_to_r_ARREADY => ap_const_logic_0,
        m_axi_to_r_ARADDR => store_U0_m_axi_to_r_ARADDR,
        m_axi_to_r_ARID => store_U0_m_axi_to_r_ARID,
        m_axi_to_r_ARLEN => store_U0_m_axi_to_r_ARLEN,
        m_axi_to_r_ARSIZE => store_U0_m_axi_to_r_ARSIZE,
        m_axi_to_r_ARBURST => store_U0_m_axi_to_r_ARBURST,
        m_axi_to_r_ARLOCK => store_U0_m_axi_to_r_ARLOCK,
        m_axi_to_r_ARCACHE => store_U0_m_axi_to_r_ARCACHE,
        m_axi_to_r_ARPROT => store_U0_m_axi_to_r_ARPROT,
        m_axi_to_r_ARQOS => store_U0_m_axi_to_r_ARQOS,
        m_axi_to_r_ARREGION => store_U0_m_axi_to_r_ARREGION,
        m_axi_to_r_ARUSER => store_U0_m_axi_to_r_ARUSER,
        m_axi_to_r_RVALID => ap_const_logic_0,
        m_axi_to_r_RREADY => store_U0_m_axi_to_r_RREADY,
        m_axi_to_r_RDATA => ap_const_lv64_0,
        m_axi_to_r_RLAST => ap_const_logic_0,
        m_axi_to_r_RID => ap_const_lv1_0,
        m_axi_to_r_RUSER => ap_const_lv1_0,
        m_axi_to_r_RRESP => ap_const_lv2_0,
        m_axi_to_r_BVALID => gmemo_BVALID,
        m_axi_to_r_BREADY => store_U0_m_axi_to_r_BREADY,
        m_axi_to_r_BRESP => gmemo_BRESP,
        m_axi_to_r_BID => gmemo_BID,
        m_axi_to_r_BUSER => gmemo_BUSER,
        to_offset_dout => output_ddr0_c_dout,
        to_offset_empty_n => output_ddr0_c_empty_n,
        to_offset_read => store_U0_to_offset_read,
        from_V_dout => data_stage5_V_dout,
        from_V_empty_n => data_stage5_V_empty_n,
        from_V_read => store_U0_from_V_read,
        data_count_dout => data_count_c10_dout,
        data_count_empty_n => data_count_c10_empty_n,
        data_count_read => store_U0_data_count_read);

    data_stage0_V_U : component fifo_w64_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load5_U0_to_V_din,
        if_full_n => data_stage0_V_full_n,
        if_write => load5_U0_to_V_write,
        if_dout => data_stage0_V_dout,
        if_empty_n => data_stage0_V_empty_n,
        if_read => scatter_U0_from_V_read);

    data_count_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load5_U0_data_count_out_din,
        if_full_n => data_count_c_full_n,
        if_write => load5_U0_data_count_out_write,
        if_dout => data_count_c_dout,
        if_empty_n => data_count_c_empty_n,
        if_read => scatter_U0_data_count_read);

    output_ddr0_c_U : component fifo_w64_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load5_U0_output_ddr0_out_din,
        if_full_n => output_ddr0_c_full_n,
        if_write => load5_U0_output_ddr0_out_write,
        if_dout => output_ddr0_c_dout,
        if_empty_n => output_ddr0_c_empty_n,
        if_read => store_U0_to_offset_read);

    data_stage1_V_U : component fifo_w64_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => scatter_U0_to0_V_din,
        if_full_n => data_stage1_V_full_n,
        if_write => scatter_U0_to0_V_write,
        if_dout => data_stage1_V_dout,
        if_empty_n => data_stage1_V_empty_n,
        if_read => compute1_U0_from_V_read);

    data_stage2_V_U : component fifo_w64_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => scatter_U0_to1_V_din,
        if_full_n => data_stage2_V_full_n,
        if_write => scatter_U0_to1_V_write,
        if_dout => data_stage2_V_dout,
        if_empty_n => data_stage2_V_empty_n,
        if_read => compute2_U0_from_V_read);

    data_count_c7_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => scatter_U0_data_count_out_din,
        if_full_n => data_count_c7_full_n,
        if_write => scatter_U0_data_count_out_write,
        if_dout => data_count_c7_dout,
        if_empty_n => data_count_c7_empty_n,
        if_read => compute1_U0_data_count_read);

    data_count_c8_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => scatter_U0_data_count_out1_din,
        if_full_n => data_count_c8_full_n,
        if_write => scatter_U0_data_count_out1_write,
        if_dout => data_count_c8_dout,
        if_empty_n => data_count_c8_empty_n,
        if_read => compute2_U0_data_count_read);

    data_stage3_V_U : component fifo_w64_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute1_U0_to_V_din,
        if_full_n => data_stage3_V_full_n,
        if_write => compute1_U0_to_V_write,
        if_dout => data_stage3_V_dout,
        if_empty_n => data_stage3_V_empty_n,
        if_read => gather_U0_from0_V_read);

    data_count_c9_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute1_U0_data_count_out_din,
        if_full_n => data_count_c9_full_n,
        if_write => compute1_U0_data_count_out_write,
        if_dout => data_count_c9_dout,
        if_empty_n => data_count_c9_empty_n,
        if_read => gather_U0_data_count_read);

    data_stage4_V_U : component fifo_w64_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute2_U0_to_V_din,
        if_full_n => data_stage4_V_full_n,
        if_write => compute2_U0_to_V_write,
        if_dout => data_stage4_V_dout,
        if_empty_n => data_stage4_V_empty_n,
        if_read => gather_U0_from1_V_read);

    data_stage5_V_U : component fifo_w64_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gather_U0_to_V_din,
        if_full_n => data_stage5_V_full_n,
        if_write => gather_U0_to_V_write,
        if_dout => data_stage5_V_dout,
        if_empty_n => data_stage5_V_empty_n,
        if_read => store_U0_from_V_read);

    data_count_c10_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gather_U0_data_count_out_din,
        if_full_n => data_count_c10_full_n,
        if_write => gather_U0_data_count_out_write,
        if_dout => data_count_c10_dout,
        if_empty_n => data_count_c10_empty_n,
        if_read => store_U0_data_count_read);

    start_for_scatter_U0_U : component start_for_scatter_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_scatter_U0_din,
        if_full_n => start_for_scatter_U0_full_n,
        if_write => load5_U0_start_write,
        if_dout => start_for_scatter_U0_dout,
        if_empty_n => start_for_scatter_U0_empty_n,
        if_read => scatter_U0_ap_ready);

    start_for_store_U0_U : component start_for_store_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_store_U0_din,
        if_full_n => start_for_store_U0_full_n,
        if_write => load5_U0_start_write,
        if_dout => start_for_store_U0_dout,
        if_empty_n => start_for_store_U0_empty_n,
        if_read => store_U0_ap_ready);

    start_for_compute1_U0_U : component start_for_compute1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compute1_U0_din,
        if_full_n => start_for_compute1_U0_full_n,
        if_write => scatter_U0_start_write,
        if_dout => start_for_compute1_U0_dout,
        if_empty_n => start_for_compute1_U0_empty_n,
        if_read => compute1_U0_ap_ready);

    start_for_compute2_U0_U : component start_for_compute2_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compute2_U0_din,
        if_full_n => start_for_compute2_U0_full_n,
        if_write => scatter_U0_start_write,
        if_dout => start_for_compute2_U0_dout,
        if_empty_n => start_for_compute2_U0_empty_n,
        if_read => compute2_U0_ap_ready);

    start_for_gather_U0_U : component start_for_gather_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gather_U0_din,
        if_full_n => start_for_gather_U0_full_n,
        if_write => compute1_U0_start_write,
        if_dout => start_for_gather_U0_dout,
        if_empty_n => start_for_gather_U0_empty_n,
        if_read => gather_U0_ap_ready);





    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_n_inv <= not(ap_rst_n);
        end if;
    end process;
    ap_done <= store_U0_ap_done;
    ap_idle <= (load5_U0_ap_idle and scatter_U0_ap_idle and compute1_U0_ap_idle and compute2_U0_ap_idle and gather_U0_ap_idle and store_U0_ap_idle);
    ap_ready <= load5_U0_ap_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= store_U0_ap_done;
    ap_sync_ready <= load5_U0_ap_ready;
    compute1_U0_ap_continue <= ap_const_logic_1;
    compute1_U0_ap_start <= start_for_compute1_U0_empty_n;
    compute1_U0_start_full_n <= (ap_const_logic_0 or start_for_gather_U0_full_n);
    compute2_U0_ap_continue <= ap_const_logic_1;
    compute2_U0_ap_start <= start_for_compute2_U0_empty_n;
    compute2_U0_start_full_n <= ap_const_logic_0;
    compute2_U0_start_write <= ap_const_logic_0;
    gather_U0_ap_continue <= ap_const_logic_1;
    gather_U0_ap_start <= start_for_gather_U0_empty_n;
    gather_U0_start_full_n <= ap_const_logic_0;
    gather_U0_start_write <= ap_const_logic_0;
    load5_U0_ap_continue <= ap_const_logic_1;
    load5_U0_ap_start <= ap_start;
    load5_U0_start_full_n <= (ap_const_logic_0 or start_for_scatter_U0_full_n or start_for_store_U0_full_n);
    scatter_U0_ap_continue <= ap_const_logic_1;
    scatter_U0_ap_start <= start_for_scatter_U0_empty_n;
    scatter_U0_start_full_n <= (ap_const_logic_0 or start_for_compute1_U0_full_n or start_for_compute2_U0_full_n);
    start_for_compute1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_compute2_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gather_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_scatter_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_store_U0_din <= (0=>ap_const_logic_1, others=>'-');
    store_U0_ap_continue <= ap_const_logic_1;
    store_U0_ap_start <= start_for_store_U0_empty_n;
    store_U0_start_full_n <= ap_const_logic_0;
    store_U0_start_write <= ap_const_logic_0;
end behav;
