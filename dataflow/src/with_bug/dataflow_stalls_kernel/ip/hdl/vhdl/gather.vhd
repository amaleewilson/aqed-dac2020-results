-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gather is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    to_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    to_V_full_n : IN STD_LOGIC;
    to_V_write : OUT STD_LOGIC;
    from0_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    from0_V_empty_n : IN STD_LOGIC;
    from0_V_read : OUT STD_LOGIC;
    from1_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    from1_V_empty_n : IN STD_LOGIC;
    from1_V_read : OUT STD_LOGIC;
    data_count_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_count_empty_n : IN STD_LOGIC;
    data_count_read : OUT STD_LOGIC;
    data_count_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_count_out_full_n : IN STD_LOGIC;
    data_count_out_write : OUT STD_LOGIC );
end;


architecture behav of gather is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal to_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_i_reg_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal from0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal from1_V_blk_n : STD_LOGIC;
    signal data_count_blk_n : STD_LOGIC;
    signal data_count_out_blk_n : STD_LOGIC;
    signal i_i_reg_137 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_count_read_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal exitcond_i_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_2_fu_159_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_reg_179 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = data_count_empty_n) or (ap_const_logic_0 = data_count_out_full_n))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = data_count_empty_n) or (ap_const_logic_0 = data_count_out_full_n))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_i_fu_148_p2))) then 
                i_i_reg_137 <= i_fu_153_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = data_count_empty_n) or (ap_const_logic_0 = data_count_out_full_n))))) then 
                i_i_reg_137 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_i_reg_170 <= exitcond_i_reg_170;
                exitcond_i_reg_170 <= exitcond_i_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = data_count_empty_n) or (ap_const_logic_0 = data_count_out_full_n))))) then
                data_count_read_reg_165 <= data_count_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_reg_170 = ap_const_lv1_0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then
                tmp_2_reg_179 <= tmp_2_fu_159_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_count_empty_n, data_count_out_full_n, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, exitcond_i_fu_148_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = data_count_empty_n) or (ap_const_logic_0 = data_count_out_full_n))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (exitcond_i_fu_148_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (exitcond_i_fu_148_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(to_V_full_n, from0_V_empty_n, from1_V_empty_n, ap_enable_reg_pp0_iter2, exitcond_i_reg_170, ap_reg_pp0_iter1_exitcond_i_reg_170, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = from0_V_empty_n)) or ((exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = from1_V_empty_n)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = to_V_full_n)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(to_V_full_n, from0_V_empty_n, from1_V_empty_n, ap_enable_reg_pp0_iter2, exitcond_i_reg_170, ap_reg_pp0_iter1_exitcond_i_reg_170, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = from0_V_empty_n)) or ((exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = from1_V_empty_n)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = to_V_full_n)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(to_V_full_n, from0_V_empty_n, from1_V_empty_n, ap_enable_reg_pp0_iter2, exitcond_i_reg_170, ap_reg_pp0_iter1_exitcond_i_reg_170, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = from0_V_empty_n)) or ((exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = from1_V_empty_n)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = to_V_full_n)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, data_count_empty_n, data_count_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = data_count_empty_n) or (ap_const_logic_0 = data_count_out_full_n));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(from0_V_empty_n, from1_V_empty_n, exitcond_i_reg_170)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = from0_V_empty_n)) or ((exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = from1_V_empty_n)));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(to_V_full_n, ap_reg_pp0_iter1_exitcond_i_reg_170)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((ap_reg_pp0_iter1_exitcond_i_reg_170 = ap_const_lv1_0) and (ap_const_logic_0 = to_V_full_n));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_i_fu_148_p2)
    begin
        if ((exitcond_i_fu_148_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_count_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_count_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            data_count_blk_n <= data_count_empty_n;
        else 
            data_count_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_count_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_count_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            data_count_out_blk_n <= data_count_out_full_n;
        else 
            data_count_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_count_out_din <= data_count_dout;

    data_count_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_count_empty_n, data_count_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = data_count_empty_n) or (ap_const_logic_0 = data_count_out_full_n))))) then 
            data_count_out_write <= ap_const_logic_1;
        else 
            data_count_out_write <= ap_const_logic_0;
        end if; 
    end process;


    data_count_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, data_count_empty_n, data_count_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = data_count_empty_n) or (ap_const_logic_0 = data_count_out_full_n))))) then 
            data_count_read <= ap_const_logic_1;
        else 
            data_count_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_148_p2 <= "1" when (i_i_reg_137 = data_count_read_reg_165) else "0";

    from0_V_blk_n_assign_proc : process(from0_V_empty_n, ap_block_pp0_stage0, exitcond_i_reg_170, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_170 = ap_const_lv1_0))) then 
            from0_V_blk_n <= from0_V_empty_n;
        else 
            from0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    from0_V_read_assign_proc : process(exitcond_i_reg_170, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_170 = ap_const_lv1_0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
            from0_V_read <= ap_const_logic_1;
        else 
            from0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    from1_V_blk_n_assign_proc : process(from1_V_empty_n, ap_block_pp0_stage0, exitcond_i_reg_170, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_170 = ap_const_lv1_0))) then 
            from1_V_blk_n <= from1_V_empty_n;
        else 
            from1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    from1_V_read_assign_proc : process(exitcond_i_reg_170, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_170 = ap_const_lv1_0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
            from1_V_read <= ap_const_logic_1;
        else 
            from1_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_153_p2 <= std_logic_vector(unsigned(i_i_reg_137) + unsigned(ap_const_lv32_1));
    tmp_2_fu_159_p2 <= std_logic_vector(unsigned(from0_V_dout) - unsigned(from1_V_dout));

    to_V_blk_n_assign_proc : process(to_V_full_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_reg_pp0_iter1_exitcond_i_reg_170)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_reg_pp0_iter1_exitcond_i_reg_170 = ap_const_lv1_0))) then 
            to_V_blk_n <= to_V_full_n;
        else 
            to_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    to_V_din <= tmp_2_reg_179;

    to_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond_i_reg_170, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter1_exitcond_i_reg_170 = ap_const_lv1_0) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0))) then 
            to_V_write <= ap_const_logic_1;
        else 
            to_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
