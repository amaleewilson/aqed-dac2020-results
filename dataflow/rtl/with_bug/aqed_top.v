// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="aqed_top,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=3.333333,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.838000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=16,HLS_SYN_FF=2507,HLS_SYN_LUT=2620,HLS_VERSION=2018_2}" *)

module aqed_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        agg_result,
        agg_result_ap_vld,
        orig_V,
        dup_V,
        orig_idx,
        dup_idx,
        num
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [67:0] agg_result;
output   agg_result_ap_vld;
input  [0:0] orig_V;
input  [0:0] dup_V;
input  [15:0] orig_idx;
input  [15:0] dup_idx;
input  [15:0] num;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg agg_result_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] state_orig_issued_V;
reg   [0:0] state_dup_issued_V;
reg   [9:0] bmc_in_address0;
reg    bmc_in_ce0;
reg    bmc_in_we0;
wire   [63:0] bmc_in_q0;
wire   [9:0] bmc_in_address1;
reg    bmc_in_ce1;
wire   [63:0] bmc_in_q1;
reg   [63:0] state_orig_val;
reg   [15:0] state_in_count_V;
reg   [15:0] state_orig_in_V;
reg   [15:0] state_dup_in_V;
reg   [63:0] state_dup_val;
reg   [15:0] state_out_count_V;
reg   [0:0] state_qed_done_V;
reg   [0:0] state_qed_check_V;
wire   [0:0] tmp_i_fu_166_p2;
reg   [0:0] tmp_i_reg_460;
wire   [0:0] ult_fu_182_p2;
reg   [0:0] ult_reg_475;
reg   [63:0] bmc_in_load_reg_480;
wire    ap_CS_fsm_state2;
reg   [63:0] bmc_in_load_1_reg_487;
wire   [0:0] grp_load_fu_158_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] val_assign_demorgan_s_fu_199_p2;
reg   [0:0] val_assign_demorgan_s_reg_499;
wire   [0:0] tmp_7_i_fu_209_p2;
reg   [0:0] tmp_7_i_reg_505;
wire   [0:0] tmp_1_i_fu_214_p2;
reg   [0:0] tmp_1_i_reg_511;
wire   [0:0] tmp6_fu_235_p2;
reg   [0:0] tmp6_reg_516;
reg   [15:0] state_out_count_V_lo_reg_526;
wire    ap_CS_fsm_state5;
wire    grp_dataflow_stalls_kern_fu_151_ap_idle;
wire    grp_dataflow_stalls_kern_fu_151_ap_ready;
wire    grp_dataflow_stalls_kern_fu_151_ap_done;
wire    ap_sync_grp_dataflow_stalls_kern_fu_151_ap_ready;
wire    ap_sync_grp_dataflow_stalls_kern_fu_151_ap_done;
reg    ap_block_state5_on_subcall_done;
wire   [0:0] ult9_fu_345_p2;
reg   [0:0] ult9_reg_533;
reg   [0:0] state_orig_issued_V_1_reg_538;
wire    ap_CS_fsm_state6;
reg   [0:0] state_qed_done_V_loa_reg_543;
wire   [0:0] storemerge_i_fu_360_p2;
reg   [0:0] storemerge_i_reg_550;
reg   [15:0] state_dup_in_V_load_reg_555;
wire   [0:0] tmp_1_i3_fu_376_p2;
reg   [0:0] tmp_1_i3_reg_560;
wire   [0:0] tmp_3_i_fu_403_p2;
reg   [0:0] tmp_3_i_reg_568;
wire    ap_CS_fsm_state7;
wire   [9:0] grp_dataflow_stalls_kern_fu_151_bmc_in_address0;
wire    grp_dataflow_stalls_kern_fu_151_bmc_in_ce0;
wire   [63:0] grp_dataflow_stalls_kern_fu_151_bmc_in_d0;
wire    grp_dataflow_stalls_kern_fu_151_bmc_in_we0;
wire   [9:0] grp_dataflow_stalls_kern_fu_151_bmc_in_address1;
wire    grp_dataflow_stalls_kern_fu_151_bmc_in_ce1;
wire   [63:0] grp_dataflow_stalls_kern_fu_151_bmc_in_d1;
wire    grp_dataflow_stalls_kern_fu_151_bmc_in_we1;
wire    grp_dataflow_stalls_kern_fu_151_ap_start;
reg    grp_dataflow_stalls_kern_fu_151_ap_continue;
reg   [0:0] state_qed_done_V_fla_reg_122;
wire   [0:0] brmerge1_i_fu_392_p2;
reg   [0:0] state_qed_done_V_loc_reg_138;
reg    grp_dataflow_stalls_kern_fu_151_ap_start_reg;
wire    ap_CS_fsm_state4;
reg    ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_ready;
reg    ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_done;
wire   [63:0] tmp_6_i_fu_172_p1;
wire   [63:0] tmp_8_i_fu_177_p1;
wire   [0:0] issue_dup_V_fu_281_p2;
wire   [15:0] tmp_4_i_fu_325_p2;
wire    ap_CS_fsm_state8;
wire   [15:0] tmp_4_i5_fu_407_p2;
wire   [0:0] p_state_qed_done_V_fl_fu_418_p2;
wire   [0:0] p_not_i_fu_188_p2;
wire   [0:0] tmp_fu_194_p2;
wire   [0:0] rev8_fu_218_p2;
wire   [0:0] not_or_cond1_i_fu_223_p2;
wire   [0:0] tmp_s_fu_229_p2;
wire   [0:0] brmerge_i_fu_241_p2;
wire   [0:0] tmp7_fu_249_p2;
wire   [0:0] sel_tmp8_i_fu_254_p2;
wire   [0:0] sel_tmp3_i_fu_245_p2;
wire   [0:0] tmp8_fu_266_p2;
wire   [0:0] sel_tmp16_i_fu_270_p2;
wire   [0:0] sel_tmp9_i_fu_259_p3;
wire   [0:0] not_sel_tmp16_i_fu_275_p2;
wire   [0:0] rev_fu_355_p2;
wire   [0:0] or_cond_i4_fu_381_p2;
wire   [0:0] or_cond_not_i_fu_386_p2;
wire   [0:0] o2_qed_done_V_fu_423_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 state_orig_issued_V = 1'd0;
#0 state_dup_issued_V = 1'd0;
#0 state_orig_val = 64'd0;
#0 state_in_count_V = 16'd0;
#0 state_orig_in_V = 16'd65535;
#0 state_dup_in_V = 16'd65535;
#0 state_dup_val = 64'd0;
#0 state_out_count_V = 16'd0;
#0 state_qed_done_V = 1'd0;
#0 state_qed_check_V = 1'd0;
#0 grp_dataflow_stalls_kern_fu_151_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_done = 1'b0;
end

aqed_top_bmc_in #(
    .DataWidth( 64 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
bmc_in_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bmc_in_address0),
    .ce0(bmc_in_ce0),
    .we0(bmc_in_we0),
    .d0(grp_dataflow_stalls_kern_fu_151_bmc_in_d0),
    .q0(bmc_in_q0),
    .address1(bmc_in_address1),
    .ce1(bmc_in_ce1),
    .q1(bmc_in_q1)
);

dataflow_stalls_kern grp_dataflow_stalls_kern_fu_151(
    .data_count(num),
    .bmc_in_address0(grp_dataflow_stalls_kern_fu_151_bmc_in_address0),
    .bmc_in_ce0(grp_dataflow_stalls_kern_fu_151_bmc_in_ce0),
    .bmc_in_d0(grp_dataflow_stalls_kern_fu_151_bmc_in_d0),
    .bmc_in_q0(64'd0),
    .bmc_in_we0(grp_dataflow_stalls_kern_fu_151_bmc_in_we0),
    .bmc_in_address1(grp_dataflow_stalls_kern_fu_151_bmc_in_address1),
    .bmc_in_ce1(grp_dataflow_stalls_kern_fu_151_bmc_in_ce1),
    .bmc_in_d1(grp_dataflow_stalls_kern_fu_151_bmc_in_d1),
    .bmc_in_q1(64'd0),
    .bmc_in_we1(grp_dataflow_stalls_kern_fu_151_bmc_in_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_count_ap_vld(1'b1),
    .ap_done(grp_dataflow_stalls_kern_fu_151_ap_done),
    .ap_start(grp_dataflow_stalls_kern_fu_151_ap_start),
    .ap_ready(grp_dataflow_stalls_kern_fu_151_ap_ready),
    .ap_idle(grp_dataflow_stalls_kern_fu_151_ap_idle),
    .ap_continue(grp_dataflow_stalls_kern_fu_151_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
            ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_done <= 1'b0;
        end else if ((grp_dataflow_stalls_kern_fu_151_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
            ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_ready <= 1'b0;
        end else if ((grp_dataflow_stalls_kern_fu_151_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dataflow_stalls_kern_fu_151_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) | ((ap_sync_grp_dataflow_stalls_kern_fu_151_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state5)))) begin
            grp_dataflow_stalls_kern_fu_151_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_stalls_kern_fu_151_ap_ready == 1'b1)) begin
            grp_dataflow_stalls_kern_fu_151_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (brmerge1_i_fu_392_p2 == 1'd1) & (state_orig_issued_V_1_reg_538 == 1'd1)) | ((grp_load_fu_158_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        state_qed_done_V_fla_reg_122 <= 1'd0;
    end else if (((brmerge1_i_fu_392_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (state_orig_issued_V_1_reg_538 == 1'd1))) begin
        state_qed_done_V_fla_reg_122 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        state_qed_done_V_loc_reg_138 <= 1'b0;
    end else
    if (((grp_load_fu_158_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        state_qed_done_V_loc_reg_138 <= state_qed_done_V;
    end else if (((1'b1 == ap_CS_fsm_state7) & (brmerge1_i_fu_392_p2 == 1'd1) & (state_orig_issued_V_1_reg_538 == 1'd1))) begin
        state_qed_done_V_loc_reg_138 <= state_qed_done_V_loa_reg_543;
    end else if (((brmerge1_i_fu_392_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (state_orig_issued_V_1_reg_538 == 1'd1))) begin
        state_qed_done_V_loc_reg_138 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bmc_in_load_1_reg_487 <= bmc_in_q1;
        bmc_in_load_reg_480 <= bmc_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        state_dup_in_V <= 16'd65535;
        state_dup_issued_V <= 1'd0;
        state_dup_val <= 64'd0;
    end else
    if (((1'b1 == ap_CS_fsm_state4) & (issue_dup_V_fu_281_p2 == 1'd1))) begin
        state_dup_in_V <= state_in_count_V;
        state_dup_issued_V <= 1'd1;
        state_dup_val <= bmc_in_load_reg_480;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        state_orig_issued_V_1_reg_538 <= 1'd0;
        state_qed_done_V_loa_reg_543 <= 1'd0;
        storemerge_i_reg_550 <= 1'd0;
    end else
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_dup_in_V_load_reg_555 <= state_dup_in_V;
        state_orig_issued_V_1_reg_538 <= state_orig_issued_V;
        state_qed_done_V_loa_reg_543 <= state_qed_done_V;
        storemerge_i_reg_550 <= storemerge_i_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        state_in_count_V <= 16'd0;
    end else
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_in_count_V <= tmp_4_i_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        state_orig_in_V <= 16'd65535;
        state_orig_issued_V <= 1'd0;
        state_orig_val <= 64'd0;
    end else
    if (((val_assign_demorgan_s_reg_499 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        state_orig_in_V <= state_in_count_V;
        state_orig_issued_V <= 1'd1;
        state_orig_val <= bmc_in_load_1_reg_487;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        state_out_count_V <= 16'd0;
        tmp_3_i_reg_568 <= 'b0;
    end else
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_out_count_V <= tmp_4_i5_fu_407_p2;
        tmp_3_i_reg_568 <= tmp_3_i_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        state_out_count_V_lo_reg_526 <= state_out_count_V;
        ult9_reg_533 <= ult9_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        state_qed_check_V <= 1'd0;
    end else
    if (((brmerge1_i_fu_392_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (state_orig_issued_V_1_reg_538 == 1'd1))) begin
        state_qed_check_V <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        state_qed_done_V <= 1'd0;
    end else
    if (((1'b1 == ap_CS_fsm_state8) & (p_state_qed_done_V_fl_fu_418_p2 == 1'd1))) begin
        state_qed_done_V <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp6_reg_516 <= tmp6_fu_235_p2;
        tmp_1_i_reg_511 <= tmp_1_i_fu_214_p2;
        tmp_7_i_reg_505 <= tmp_7_i_fu_209_p2;
        val_assign_demorgan_s_reg_499 <= val_assign_demorgan_s_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_load_fu_158_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_1_i3_reg_560 <= tmp_1_i3_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_i_reg_460 <= tmp_i_fu_166_p2;
        ult_reg_475 <= ult_fu_182_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        agg_result_ap_vld = 1'b1;
    end else begin
        agg_result_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bmc_in_address0 = tmp_6_i_fu_172_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bmc_in_address0 = grp_dataflow_stalls_kern_fu_151_bmc_in_address0;
    end else begin
        bmc_in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bmc_in_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bmc_in_ce0 = grp_dataflow_stalls_kern_fu_151_bmc_in_ce0;
    end else begin
        bmc_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bmc_in_ce1 = 1'b1;
    end else begin
        bmc_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bmc_in_we0 = grp_dataflow_stalls_kern_fu_151_bmc_in_we0;
    end else begin
        bmc_in_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
        grp_dataflow_stalls_kern_fu_151_ap_continue = 1'b1;
    end else begin
        grp_dataflow_stalls_kern_fu_151_ap_continue = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_block_state5_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign agg_result = {{{{{state_dup_val}, {storemerge_i_reg_550}}, {state_orig_issued_V_1_reg_538}}, {state_qed_check_V}}, {o2_qed_done_V_fu_423_p2}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state5_on_subcall_done = ((ap_sync_grp_dataflow_stalls_kern_fu_151_ap_ready & ap_sync_grp_dataflow_stalls_kern_fu_151_ap_done) == 1'b0);
end

assign ap_sync_grp_dataflow_stalls_kern_fu_151_ap_done = (grp_dataflow_stalls_kern_fu_151_ap_done | ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_done);

assign ap_sync_grp_dataflow_stalls_kern_fu_151_ap_ready = (grp_dataflow_stalls_kern_fu_151_ap_ready | ap_sync_reg_grp_dataflow_stalls_kern_fu_151_ap_ready);

assign bmc_in_address1 = tmp_8_i_fu_177_p1;

assign brmerge1_i_fu_392_p2 = (state_qed_done_V_loa_reg_543 | or_cond_not_i_fu_386_p2);

assign brmerge_i_fu_241_p2 = (val_assign_demorgan_s_reg_499 | tmp_7_i_reg_505);

assign grp_dataflow_stalls_kern_fu_151_ap_start = grp_dataflow_stalls_kern_fu_151_ap_start_reg;

assign grp_load_fu_158_p1 = state_orig_issued_V;

assign issue_dup_V_fu_281_p2 = (sel_tmp9_i_fu_259_p3 & not_sel_tmp16_i_fu_275_p2);

assign not_or_cond1_i_fu_223_p2 = (rev8_fu_218_p2 & dup_V);

assign not_sel_tmp16_i_fu_275_p2 = (sel_tmp16_i_fu_270_p2 ^ 1'd1);

assign o2_qed_done_V_fu_423_p2 = (tmp_3_i_reg_568 | state_qed_done_V_loc_reg_138);

assign or_cond_i4_fu_381_p2 = (tmp_1_i3_reg_560 & state_dup_issued_V);

assign or_cond_not_i_fu_386_p2 = (or_cond_i4_fu_381_p2 ^ 1'd1);

assign p_not_i_fu_188_p2 = (orig_V ^ 1'd1);

assign p_state_qed_done_V_fl_fu_418_p2 = (tmp_3_i_reg_568 | state_qed_done_V_fla_reg_122);

assign rev8_fu_218_p2 = (ult_reg_475 ^ 1'd1);

assign rev_fu_355_p2 = (ult9_reg_533 ^ 1'd1);

assign sel_tmp16_i_fu_270_p2 = (tmp8_fu_266_p2 & tmp6_reg_516);

assign sel_tmp3_i_fu_245_p2 = (tmp_1_i_reg_511 & tmp6_reg_516);

assign sel_tmp8_i_fu_254_p2 = (tmp7_fu_249_p2 & state_orig_issued_V);

assign sel_tmp9_i_fu_259_p3 = ((sel_tmp8_i_fu_254_p2[0:0] === 1'b1) ? tmp_7_i_reg_505 : sel_tmp3_i_fu_245_p2);

assign storemerge_i_fu_360_p2 = (state_orig_issued_V & rev_fu_355_p2);

assign tmp6_fu_235_p2 = (tmp_s_fu_229_p2 & not_or_cond1_i_fu_223_p2);

assign tmp7_fu_249_p2 = (tmp6_reg_516 & brmerge_i_fu_241_p2);

assign tmp8_fu_266_p2 = (val_assign_demorgan_s_reg_499 ^ state_orig_issued_V);

assign tmp_1_i3_fu_376_p2 = ((state_out_count_V_lo_reg_526 == state_dup_in_V) ? 1'b1 : 1'b0);

assign tmp_1_i_fu_214_p2 = ((bmc_in_load_1_reg_487 == bmc_in_load_reg_480) ? 1'b1 : 1'b0);

assign tmp_3_i_fu_403_p2 = ((state_out_count_V_lo_reg_526 > state_dup_in_V_load_reg_555) ? 1'b1 : 1'b0);

assign tmp_4_i5_fu_407_p2 = (state_out_count_V_lo_reg_526 + 16'd1);

assign tmp_4_i_fu_325_p2 = (state_in_count_V + 16'd1);

assign tmp_6_i_fu_172_p1 = dup_idx;

assign tmp_7_i_fu_209_p2 = ((bmc_in_load_reg_480 == state_orig_val) ? 1'b1 : 1'b0);

assign tmp_8_i_fu_177_p1 = orig_idx;

assign tmp_fu_194_p2 = (tmp_i_reg_460 | p_not_i_fu_188_p2);

assign tmp_i_fu_166_p2 = ((orig_idx > num) ? 1'b1 : 1'b0);

assign tmp_s_fu_229_p2 = (state_dup_issued_V ^ 1'd1);

assign ult9_fu_345_p2 = ((state_out_count_V < state_orig_in_V) ? 1'b1 : 1'b0);

assign ult_fu_182_p2 = ((num < dup_idx) ? 1'b1 : 1'b0);

assign val_assign_demorgan_s_fu_199_p2 = (tmp_fu_194_p2 | state_orig_issued_V);

assign acc_ready = grp_dataflow_stalls_kern_fu_151_ap_idle;

assign host_ready = grp_dataflow_stalls_kern_fu_151_ap_continue;

reg [8:0] issued_count;
reg was_ready;

always @(posedge ap_clk) begin
   if (ap_rst) begin
       issued_count <= 9'b0;
   end else if (state_orig_issued_V) begin
       issued_count <= issued_count + 1'b1;
   end
end

   assert_FC_match : assert property (
       @(posedge ap_clk)
         (o2_qed_done_V_fu_423_p2) |-> (state_qed_check_V));

   assert_RB_match : assert property (
       @(posedge ap_clk)
         ((issued_count > 10) && host_ready)
               |-> ##3 (storemerge_i_reg_550 && acc_ready));

  assume_limited_batch : assume property
    (@(posedge ap_clk) (num <= 16));

  assume_stable_orig_idx : assume property
    (@(posedge ap_clk) ap_rst == 1'b0 |=> $stable(orig_idx));

 assume_dup_idx_max : assume property
    (@(posedge ap_clk) (dup_idx < 8'd20));

   cover_dup : cover property (
       @(posedge ap_clk)
          state_dup_issued_V == 1'b1);

   cover_orig : cover property (
      @(posedge ap_clk)
          state_orig_issued_V == 1'b1);

   cover_delay6 : cover property (
      @(posedge ap_clk)
         ((issued_count > 6) && host_ready && !(storemerge_i_reg_550 && acc_ready)));

   cover_delay10 : cover property (
      @(posedge ap_clk)
         ((issued_count > 10) && host_ready ##3 !(storemerge_i_reg_550 && acc_ready)));

   cover_delay20 : cover property (
      @(posedge ap_clk)
         ((issued_count > 20) && host_ready ##3 !(storemerge_i_reg_550 && acc_ready)));

   cover_delay40 : cover property (
      @(posedge ap_clk)
         ((issued_count > 40) && host_ready ##3 !(storemerge_i_reg_550 && acc_ready)));


endmodule //aqed_top
