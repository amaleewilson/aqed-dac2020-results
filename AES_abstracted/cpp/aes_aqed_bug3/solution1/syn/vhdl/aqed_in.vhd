-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aqed_in is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bmc_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bmc_in_ce0 : OUT STD_LOGIC;
    bmc_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bmc_in_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bmc_in_ce1 : OUT STD_LOGIC;
    bmc_in_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    orig_V : IN STD_LOGIC_VECTOR (0 downto 0);
    dup_V : IN STD_LOGIC_VECTOR (0 downto 0);
    orig_idx_V : IN STD_LOGIC_VECTOR (1 downto 0);
    dup_idx_V : IN STD_LOGIC_VECTOR (1 downto 0);
    state_orig_issued_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
    state_orig_issued_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    state_orig_issued_V_o_ap_vld : OUT STD_LOGIC;
    state_dup_issued_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
    state_dup_issued_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    state_dup_issued_V_o_ap_vld : OUT STD_LOGIC;
    state_orig_in_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    state_orig_in_V_ap_vld : OUT STD_LOGIC;
    state_orig_idx_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    state_orig_idx_V_ap_vld : OUT STD_LOGIC;
    state_dup_in_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    state_dup_in_V_ap_vld : OUT STD_LOGIC;
    state_dup_idx_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    state_dup_idx_V_ap_vld : OUT STD_LOGIC;
    state_dup_val_V_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_dup_val_V_0_ap_vld : OUT STD_LOGIC;
    state_dup_val_V_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_dup_val_V_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of aqed_in is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_orig_val_V_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal state_orig_val_V_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal state_in_count_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal state_key_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_key_V_ce0 : STD_LOGIC;
    signal state_key_V_we0 : STD_LOGIC;
    signal state_key_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_key_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_key_V_ce1 : STD_LOGIC;
    signal state_key_V_we1 : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bmc_in_load_reg_604 : STD_LOGIC_VECTOR (7 downto 0);
    signal bmc_in_load_4_reg_611 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_assign_11_demorg_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_11_demorg_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal issue_dup_V_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal issue_dup_V_reg_632 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_in_count_V_loa_reg_636 : STD_LOGIC_VECTOR (15 downto 0);
    signal op2_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0296_sum_cast_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal op2_2_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0220_sum_cast_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_571_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal r_V_fu_224_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0296_sum_fu_237_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_fu_248_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0220_sum_fu_261_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal orig_V_not_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp39_demorgan_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal issue_orig_V_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_not_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);

    component aqed_in_state_key_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    state_key_V_U : component aqed_in_state_key_V
    generic map (
        DataWidth => 1,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => state_key_V_address0,
        ce0 => state_key_V_ce0,
        we0 => state_key_V_we0,
        d0 => ap_const_lv1_0,
        q0 => state_key_V_q0,
        address1 => state_key_V_address1,
        ce1 => state_key_V_ce1,
        we1 => state_key_V_we1,
        d1 => ap_const_lv1_0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bmc_in_load_4_reg_611 <= bmc_in_q1;
                bmc_in_load_reg_604 <= bmc_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                issue_dup_V_reg_632 <= issue_dup_V_fu_506_p2;
                state_in_count_V_loa_reg_636 <= state_in_count_V;
                val_assign_11_demorg_reg_628 <= val_assign_11_demorg_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                state_in_count_V <= tmp_3_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (val_assign_11_demorg_fu_293_p2 = ap_const_lv1_0))) then
                state_orig_val_V_0 <= bmc_in_q0;
                state_orig_val_V_1 <= bmc_in_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, val_assign_11_demorg_fu_293_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (val_assign_11_demorg_fu_293_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bmc_in_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, op2_fu_232_p1, op2_2_fu_256_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bmc_in_address0 <= op2_2_fu_256_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bmc_in_address0 <= op2_fu_232_p1(4 - 1 downto 0);
        else 
            bmc_in_address0 <= "XXXX";
        end if; 
    end process;


    bmc_in_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, p_0296_sum_cast_fu_243_p1, p_0220_sum_cast_fu_267_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bmc_in_address1 <= p_0220_sum_cast_fu_267_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bmc_in_address1 <= p_0296_sum_cast_fu_243_p1(4 - 1 downto 0);
        else 
            bmc_in_address1 <= "XXXX";
        end if; 
    end process;


    bmc_in_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bmc_in_ce0 <= ap_const_logic_1;
        else 
            bmc_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bmc_in_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bmc_in_ce1 <= ap_const_logic_1;
        else 
            bmc_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_fu_344_p2 <= (val_assign_11_demorg_fu_293_p2 or or_cond_fu_338_p2);
    issue_dup_V_fu_506_p2 <= (sel_tmp11_fu_480_p3 and not_sel_tmp_fu_500_p2);
    issue_orig_V_fu_299_p2 <= (val_assign_11_demorg_fu_293_p2 xor ap_const_lv1_1);
    not_sel_tmp_fu_500_p2 <= (sel_tmp13_fu_494_p2 xor ap_const_lv1_1);
    op2_2_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_248_p3),64));
    op2_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_224_p3),64));
    or_cond_fu_338_p2 <= (tmp_9_fu_332_p2 and tmp_8_fu_327_p2);
    orig_V_not_fu_272_p2 <= (orig_V xor ap_const_lv1_1);
    p_0220_sum_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0220_sum_fu_261_p2),64));
    p_0220_sum_fu_261_p2 <= (r_V_2_fu_248_p3 or ap_const_lv3_1);
    p_0296_sum_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0296_sum_fu_237_p2),64));
    p_0296_sum_fu_237_p2 <= (r_V_fu_224_p3 or ap_const_lv3_1);
    r_V_2_fu_248_p3 <= (orig_idx_V & ap_const_lv1_0);
    r_V_fu_224_p3 <= (dup_idx_V & ap_const_lv1_0);
    sel_tmp10_fu_474_p2 <= (sel_tmp1_fu_420_p2 and brmerge_fu_344_p2);
    sel_tmp11_fu_480_p3 <= 
        or_cond_fu_338_p2 when (sel_tmp10_fu_474_p2(0) = '1') else 
        sel_tmp9_fu_468_p2;
    sel_tmp12_fu_488_p2 <= (sel_tmp_fu_378_p2 or sel_tmp4_fu_438_p2);
    sel_tmp13_fu_494_p2 <= (val_assign_11_demorg_fu_293_p2 and sel_tmp12_fu_488_p2);
    sel_tmp1_fu_420_p2 <= (tmp5_fu_414_p2 and tmp3_fu_402_p2);
    sel_tmp2_fu_426_p2 <= (brmerge_fu_344_p2 xor ap_const_lv1_1);
    sel_tmp3_fu_432_p2 <= (sel_tmp2_fu_426_p2 and sel_tmp1_fu_420_p2);
    sel_tmp4_fu_438_p2 <= (tmp_7_fu_318_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_384_p2 <= (sel_tmp_fu_378_p2 and issue_orig_V_fu_299_p2);
    sel_tmp6_fu_444_p2 <= (sel_tmp4_fu_438_p2 and issue_orig_V_fu_299_p2);
    sel_tmp7_fu_396_p2 <= (state_dup_issued_V_i xor ap_const_lv1_1);
    sel_tmp8_fu_456_p2 <= (tmp6_fu_450_p2 or sel_tmp5_fu_384_p2);
    sel_tmp9_fu_468_p2 <= (tmp7_fu_462_p2 and sel_tmp8_fu_456_p2);
    sel_tmp_fu_378_p2 <= (tmp2_fu_372_p2 or tmp1_fu_360_p2);
    state_dup_idx_V <= dup_idx_V;

    state_dup_idx_V_ap_vld_assign_proc : process(issue_dup_V_reg_632, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (issue_dup_V_reg_632 = ap_const_lv1_1))) then 
            state_dup_idx_V_ap_vld <= ap_const_logic_1;
        else 
            state_dup_idx_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_dup_in_V <= state_in_count_V_loa_reg_636;

    state_dup_in_V_ap_vld_assign_proc : process(issue_dup_V_reg_632, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (issue_dup_V_reg_632 = ap_const_lv1_1))) then 
            state_dup_in_V_ap_vld <= ap_const_logic_1;
        else 
            state_dup_in_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_dup_issued_V_o_assign_proc : process(state_dup_issued_V_i, issue_dup_V_reg_632, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (issue_dup_V_reg_632 = ap_const_lv1_1))) then 
            state_dup_issued_V_o <= ap_const_lv1_1;
        else 
            state_dup_issued_V_o <= state_dup_issued_V_i;
        end if; 
    end process;


    state_dup_issued_V_o_ap_vld_assign_proc : process(issue_dup_V_reg_632, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (issue_dup_V_reg_632 = ap_const_lv1_1))) then 
            state_dup_issued_V_o_ap_vld <= ap_const_logic_1;
        else 
            state_dup_issued_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_dup_val_V_0 <= bmc_in_load_reg_604;

    state_dup_val_V_0_ap_vld_assign_proc : process(issue_dup_V_reg_632, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (issue_dup_V_reg_632 = ap_const_lv1_1))) then 
            state_dup_val_V_0_ap_vld <= ap_const_logic_1;
        else 
            state_dup_val_V_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_dup_val_V_1 <= bmc_in_load_4_reg_611;

    state_dup_val_V_1_ap_vld_assign_proc : process(issue_dup_V_reg_632, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) and (issue_dup_V_reg_632 = ap_const_lv1_1))) then 
            state_dup_val_V_1_ap_vld <= ap_const_logic_1;
        else 
            state_dup_val_V_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_key_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_key_V_address0 <= ap_const_lv5_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_key_V_address0 <= ap_const_lv5_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_key_V_address0 <= ap_const_lv5_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_key_V_address0 <= ap_const_lv5_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_key_V_address0 <= ap_const_lv5_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_key_V_address0 <= ap_const_lv5_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_key_V_address0 <= ap_const_lv5_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_key_V_address0 <= ap_const_lv5_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_key_V_address0 <= ap_const_lv5_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_key_V_address0 <= ap_const_lv5_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_key_V_address0 <= ap_const_lv5_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_key_V_address0 <= ap_const_lv5_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_key_V_address0 <= ap_const_lv5_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_key_V_address0 <= ap_const_lv5_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_key_V_address0 <= ap_const_lv5_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_key_V_address0 <= ap_const_lv5_1F;
        else 
            state_key_V_address0 <= "XXXXX";
        end if; 
    end process;


    state_key_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            state_key_V_address1 <= ap_const_lv5_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            state_key_V_address1 <= ap_const_lv5_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_key_V_address1 <= ap_const_lv5_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_key_V_address1 <= ap_const_lv5_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_key_V_address1 <= ap_const_lv5_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_key_V_address1 <= ap_const_lv5_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_key_V_address1 <= ap_const_lv5_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_key_V_address1 <= ap_const_lv5_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_key_V_address1 <= ap_const_lv5_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_key_V_address1 <= ap_const_lv5_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_key_V_address1 <= ap_const_lv5_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_key_V_address1 <= ap_const_lv5_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_key_V_address1 <= ap_const_lv5_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_key_V_address1 <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_key_V_address1 <= ap_const_lv5_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_key_V_address1 <= ap_const_lv5_1;
        else 
            state_key_V_address1 <= "XXXXX";
        end if; 
    end process;


    state_key_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            state_key_V_ce0 <= ap_const_logic_1;
        else 
            state_key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_key_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_key_V_ce1 <= ap_const_logic_1;
        else 
            state_key_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_key_V_we0_assign_proc : process(val_assign_11_demorg_fu_293_p2, val_assign_11_demorg_reg_628, ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (val_assign_11_demorg_reg_628 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (val_assign_11_demorg_fu_293_p2 = ap_const_lv1_0)))) then 
            state_key_V_we0 <= ap_const_logic_1;
        else 
            state_key_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_key_V_we1_assign_proc : process(val_assign_11_demorg_fu_293_p2, val_assign_11_demorg_reg_628, ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state18) and (val_assign_11_demorg_reg_628 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (val_assign_11_demorg_fu_293_p2 = ap_const_lv1_0)))) then 
            state_key_V_we1 <= ap_const_logic_1;
        else 
            state_key_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    state_orig_idx_V <= orig_idx_V;

    state_orig_idx_V_ap_vld_assign_proc : process(val_assign_11_demorg_fu_293_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (val_assign_11_demorg_fu_293_p2 = ap_const_lv1_0))) then 
            state_orig_idx_V_ap_vld <= ap_const_logic_1;
        else 
            state_orig_idx_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_orig_in_V <= state_in_count_V;

    state_orig_in_V_ap_vld_assign_proc : process(val_assign_11_demorg_fu_293_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (val_assign_11_demorg_fu_293_p2 = ap_const_lv1_0))) then 
            state_orig_in_V_ap_vld <= ap_const_logic_1;
        else 
            state_orig_in_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_orig_issued_V_o_assign_proc : process(state_orig_issued_V_i, val_assign_11_demorg_fu_293_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (val_assign_11_demorg_fu_293_p2 = ap_const_lv1_0))) then 
            state_orig_issued_V_o <= ap_const_lv1_1;
        else 
            state_orig_issued_V_o <= state_orig_issued_V_i;
        end if; 
    end process;


    state_orig_issued_V_o_ap_vld_assign_proc : process(val_assign_11_demorg_fu_293_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (val_assign_11_demorg_fu_293_p2 = ap_const_lv1_0))) then 
            state_orig_issued_V_o_ap_vld <= ap_const_logic_1;
        else 
            state_orig_issued_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_360_p2 <= (tmp_6_fu_305_p2 or state_dup_issued_V_i);
    tmp2_fu_372_p2 <= (tmp39_demorgan_fu_366_p2 xor ap_const_lv1_1);
    tmp39_demorgan_fu_366_p2 <= (state_orig_issued_V_i and dup_V);
    tmp3_fu_402_p2 <= (tmp_6_not_fu_390_p2 and state_orig_issued_V_i);
    tmp4_fu_408_p2 <= (tmp_7_fu_318_p2 and dup_V);
    tmp5_fu_414_p2 <= (tmp4_fu_408_p2 and sel_tmp7_fu_396_p2);
    tmp6_fu_450_p2 <= (sel_tmp6_fu_444_p2 or sel_tmp3_fu_432_p2);
    tmp7_fu_462_p2 <= (tmp_2_fu_355_p2 and tmp_1_fu_350_p2);
    tmp_1_fu_350_p2 <= "1" when (bmc_in_q0 = bmc_in_load_reg_604) else "0";
    tmp_2_fu_355_p2 <= "1" when (bmc_in_q1 = bmc_in_load_4_reg_611) else "0";
    tmp_3_fu_571_p2 <= std_logic_vector(unsigned(state_in_count_V_loa_reg_636) + unsigned(ap_const_lv16_1));
    tmp_6_fu_305_p2 <= "1" when (dup_idx_V = ap_const_lv2_3) else "0";
    tmp_6_not_fu_390_p2 <= (tmp_6_fu_305_p2 xor ap_const_lv1_1);
    tmp_7_fu_318_p2 <= "1" when (bmc_in_load_reg_604 = state_orig_val_V_0) else "0";
    tmp_8_fu_327_p2 <= "1" when (bmc_in_load_4_reg_611 = state_orig_val_V_1) else "0";
    tmp_9_fu_332_p2 <= (state_key_V_q0 xor ap_const_lv1_1);
    tmp_fu_287_p2 <= (tmp_s_fu_278_p2 or orig_V_not_fu_272_p2);
    tmp_s_fu_278_p2 <= "1" when (orig_idx_V = ap_const_lv2_3) else "0";
    val_assign_11_demorg_fu_293_p2 <= (tmp_fu_287_p2 or state_orig_issued_V_i);
end behav;
