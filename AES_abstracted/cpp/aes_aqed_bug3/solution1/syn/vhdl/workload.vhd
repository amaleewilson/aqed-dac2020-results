-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity workload is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_we0 : OUT STD_LOGIC;
    data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of workload is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal local_key_0_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_214_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_2_reg_302 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_fu_220_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_reg_307 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond5_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal buf_0_0_2_reg_322 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_aes256_encrypt_ecb_fu_196_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_196_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_196_ap_done : STD_LOGIC;
    signal buf_0_1_2_reg_328 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_3_fu_253_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_aes256_encrypt_ecb_fu_196_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_196_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_196_k_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_196_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_196_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_1_reg_79 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_0_0_reg_91 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_2_phi_fu_108_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_103 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_0_1_1_reg_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal buf_0_0_1_reg_127 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_138 : STD_LOGIC_VECTOR (2 downto 0);
    signal buf_0_1_1_be_reg_149 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_1_be_reg_167 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_reg_185 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aes256_encrypt_ecb_fu_196_ap_start_reg : STD_LOGIC := '0';
    signal sum_cast_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal buf_0_3_fu_50 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_3_1_fu_54 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_269_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_265_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component aes256_encrypt_ecb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce0 : OUT STD_LOGIC;
        k_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aqed_top_mux_42_8fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component workload_local_keeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    local_key_0_U : component workload_local_keeOg
    generic map (
        DataWidth => 1,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_aes256_encrypt_ecb_fu_196_k_address0,
        ce0 => grp_aes256_encrypt_ecb_fu_196_k_ce0,
        q0 => local_key_0_q0);

    grp_aes256_encrypt_ecb_fu_196 : component aes256_encrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_fu_196_ap_start,
        ap_done => grp_aes256_encrypt_ecb_fu_196_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_fu_196_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_fu_196_ap_ready,
        k_address0 => grp_aes256_encrypt_ecb_fu_196_k_address0,
        k_ce0 => grp_aes256_encrypt_ecb_fu_196_k_ce0,
        k_q0 => local_key_0_q0,
        p_read => buf_0_0_1_reg_127,
        p_read1 => buf_0_1_1_reg_116,
        ap_return_0 => grp_aes256_encrypt_ecb_fu_196_ap_return_0,
        ap_return_1 => grp_aes256_encrypt_ecb_fu_196_ap_return_1);

    aqed_top_mux_42_8fYi_U21 : component aqed_top_mux_42_8fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => buf_0_0_2_reg_322,
        din1 => buf_0_1_2_reg_328,
        din2 => buf_0_3_fu_50,
        din3 => buf_0_3_1_fu_54,
        din4 => tmp_4_fu_265_p1,
        dout => tmp_fu_269_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_fu_196_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_fu_196_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond5_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_aes256_encrypt_ecb_fu_196_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_fu_196_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_fu_196_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buf_0_0_1_be_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_307 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buf_0_0_1_be_reg_167 <= data_q0;
            elsif ((((tmp_1_reg_307 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_1_reg_307 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_1_reg_307 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                buf_0_0_1_be_reg_167 <= buf_0_0_1_reg_127;
            end if; 
        end if;
    end process;

    buf_0_0_1_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                buf_0_0_1_reg_127 <= buf_0_0_1_be_reg_167;
            elsif (((ap_phi_mux_i_2_phi_fu_108_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                buf_0_0_1_reg_127 <= buf_0_0_reg_91;
            end if; 
        end if;
    end process;

    buf_0_1_1_be_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_307 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buf_0_1_1_be_reg_149 <= data_q0;
            elsif ((((tmp_1_reg_307 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_1_reg_307 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_1_reg_307 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                buf_0_1_1_be_reg_149 <= buf_0_1_1_reg_116;
            end if; 
        end if;
    end process;

    buf_0_1_1_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                buf_0_1_1_reg_116 <= buf_0_1_1_be_reg_149;
            elsif (((ap_phi_mux_i_2_phi_fu_108_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                buf_0_1_1_reg_116 <= buf_0_1_reg_79;
            end if; 
        end if;
    end process;

    i_2_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_2_reg_103 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_2_reg_103 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    k_1_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                k_1_reg_185 <= k_3_fu_253_p2;
            elsif (((grp_aes256_encrypt_ecb_fu_196_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_1_reg_185 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_reg_138 <= k_2_reg_302;
            elsif (((ap_phi_mux_i_2_phi_fu_108_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                k_reg_138 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_aes256_encrypt_ecb_fu_196_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                buf_0_0_2_reg_322 <= grp_aes256_encrypt_ecb_fu_196_ap_return_0;
                buf_0_1_2_reg_328 <= grp_aes256_encrypt_ecb_fu_196_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                buf_0_0_reg_91 <= buf_0_0_2_reg_322;
                buf_0_1_reg_79 <= buf_0_1_2_reg_328;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_307 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                buf_0_3_1_fu_54 <= data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_307 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                buf_0_3_fu_50 <= data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                k_2_reg_302 <= k_2_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_208_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_1_reg_307 <= tmp_1_fu_220_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, exitcond5_fu_208_p2, ap_CS_fsm_state6, grp_aes256_encrypt_ecb_fu_196_ap_done, ap_CS_fsm_state7, exitcond1_fu_247_p2, ap_phi_mux_i_2_phi_fu_108_p4, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_phi_mux_i_2_phi_fu_108_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond5_fu_208_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((grp_aes256_encrypt_ecb_fu_196_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((exitcond1_fu_247_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_phi_mux_i_2_phi_fu_108_p4, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_phi_mux_i_2_phi_fu_108_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_2_phi_fu_108_p4 <= i_2_reg_103;

    ap_ready_assign_proc : process(ap_phi_mux_i_2_phi_fu_108_p4, ap_CS_fsm_state2)
    begin
        if (((ap_phi_mux_i_2_phi_fu_108_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, sum_cast_fu_224_p1, sum2_cast_fu_282_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_address0 <= sum2_cast_fu_282_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_address0 <= sum_cast_fu_224_p1(4 - 1 downto 0);
        else 
            data_address0 <= "XXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_d0 <= tmp_fu_269_p6;

    data_we0_assign_proc : process(ap_CS_fsm_state7, exitcond1_fu_247_p2)
    begin
        if (((exitcond1_fu_247_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data_we0 <= ap_const_logic_1;
        else 
            data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_247_p2 <= "1" when (k_1_reg_185 = ap_const_lv3_4) else "0";
    exitcond5_fu_208_p2 <= "1" when (k_reg_138 = ap_const_lv3_4) else "0";
    grp_aes256_encrypt_ecb_fu_196_ap_start <= grp_aes256_encrypt_ecb_fu_196_ap_start_reg;
    k_2_fu_214_p2 <= std_logic_vector(unsigned(k_reg_138) + unsigned(ap_const_lv3_1));
    k_3_fu_253_p2 <= std_logic_vector(unsigned(k_1_reg_185) + unsigned(ap_const_lv3_1));
    sum2_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_265_p1),64));
    sum_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_220_p1),64));
    tmp_1_fu_220_p1 <= k_reg_138(2 - 1 downto 0);
    tmp_4_fu_265_p1 <= k_1_reg_185(2 - 1 downto 0);
end behav;
