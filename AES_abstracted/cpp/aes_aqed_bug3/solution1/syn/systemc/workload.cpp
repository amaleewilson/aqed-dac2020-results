// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "workload.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic workload::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic workload::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> workload::ap_ST_fsm_state1 = "1";
const sc_lv<7> workload::ap_ST_fsm_state2 = "10";
const sc_lv<7> workload::ap_ST_fsm_state3 = "100";
const sc_lv<7> workload::ap_ST_fsm_state4 = "1000";
const sc_lv<7> workload::ap_ST_fsm_state5 = "10000";
const sc_lv<7> workload::ap_ST_fsm_state6 = "100000";
const sc_lv<7> workload::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> workload::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> workload::ap_const_lv32_2 = "10";
const sc_lv<1> workload::ap_const_lv1_0 = "0";
const sc_lv<32> workload::ap_const_lv32_3 = "11";
const sc_lv<32> workload::ap_const_lv32_5 = "101";
const sc_lv<32> workload::ap_const_lv32_6 = "110";
const sc_lv<1> workload::ap_const_lv1_1 = "1";
const sc_lv<32> workload::ap_const_lv32_1 = "1";
const sc_lv<32> workload::ap_const_lv32_4 = "100";
const sc_lv<3> workload::ap_const_lv3_0 = "000";
const sc_lv<2> workload::ap_const_lv2_3 = "11";
const sc_lv<2> workload::ap_const_lv2_2 = "10";
const sc_lv<2> workload::ap_const_lv2_1 = "1";
const sc_lv<2> workload::ap_const_lv2_0 = "00";
const sc_lv<3> workload::ap_const_lv3_4 = "100";
const sc_lv<3> workload::ap_const_lv3_1 = "1";
const bool workload::ap_const_boolean_1 = true;

workload::workload(sc_module_name name) : sc_module(name), mVcdFile(0) {
    local_key_0_U = new workload_local_keeOg("local_key_0_U");
    local_key_0_U->clk(ap_clk);
    local_key_0_U->reset(ap_rst);
    local_key_0_U->address0(grp_aes256_encrypt_ecb_fu_196_k_address0);
    local_key_0_U->ce0(grp_aes256_encrypt_ecb_fu_196_k_ce0);
    local_key_0_U->q0(local_key_0_q0);
    grp_aes256_encrypt_ecb_fu_196 = new aes256_encrypt_ecb("grp_aes256_encrypt_ecb_fu_196");
    grp_aes256_encrypt_ecb_fu_196->ap_clk(ap_clk);
    grp_aes256_encrypt_ecb_fu_196->ap_rst(ap_rst);
    grp_aes256_encrypt_ecb_fu_196->ap_start(grp_aes256_encrypt_ecb_fu_196_ap_start);
    grp_aes256_encrypt_ecb_fu_196->ap_done(grp_aes256_encrypt_ecb_fu_196_ap_done);
    grp_aes256_encrypt_ecb_fu_196->ap_idle(grp_aes256_encrypt_ecb_fu_196_ap_idle);
    grp_aes256_encrypt_ecb_fu_196->ap_ready(grp_aes256_encrypt_ecb_fu_196_ap_ready);
    grp_aes256_encrypt_ecb_fu_196->k_address0(grp_aes256_encrypt_ecb_fu_196_k_address0);
    grp_aes256_encrypt_ecb_fu_196->k_ce0(grp_aes256_encrypt_ecb_fu_196_k_ce0);
    grp_aes256_encrypt_ecb_fu_196->k_q0(local_key_0_q0);
    grp_aes256_encrypt_ecb_fu_196->p_read(buf_0_0_1_reg_127);
    grp_aes256_encrypt_ecb_fu_196->p_read1(buf_0_1_1_reg_116);
    grp_aes256_encrypt_ecb_fu_196->ap_return_0(grp_aes256_encrypt_ecb_fu_196_ap_return_0);
    grp_aes256_encrypt_ecb_fu_196->ap_return_1(grp_aes256_encrypt_ecb_fu_196_ap_return_1);
    aqed_top_mux_42_8fYi_U21 = new aqed_top_mux_42_8fYi<1,1,8,8,8,8,2,8>("aqed_top_mux_42_8fYi_U21");
    aqed_top_mux_42_8fYi_U21->din0(buf_0_0_2_reg_322);
    aqed_top_mux_42_8fYi_U21->din1(buf_0_1_2_reg_328);
    aqed_top_mux_42_8fYi_U21->din2(buf_0_3_fu_50);
    aqed_top_mux_42_8fYi_U21->din3(buf_0_3_1_fu_54);
    aqed_top_mux_42_8fYi_U21->din4(tmp_4_fu_265_p1);
    aqed_top_mux_42_8fYi_U21->dout(tmp_fu_269_p6);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_phi_mux_i_2_phi_fu_108_p4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_i_2_phi_fu_108_p4);
    sensitive << ( i_2_reg_103 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_phi_mux_i_2_phi_fu_108_p4 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_data_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sum_cast_fu_224_p1 );
    sensitive << ( sum2_cast_fu_282_p1 );

    SC_METHOD(thread_data_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_data_d0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_fu_269_p6 );

    SC_METHOD(thread_data_we0);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond1_fu_247_p2 );

    SC_METHOD(thread_exitcond1_fu_247_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( k_1_reg_185 );

    SC_METHOD(thread_exitcond5_fu_208_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( k_reg_138 );

    SC_METHOD(thread_grp_aes256_encrypt_ecb_fu_196_ap_start);
    sensitive << ( grp_aes256_encrypt_ecb_fu_196_ap_start_reg );

    SC_METHOD(thread_k_2_fu_214_p2);
    sensitive << ( k_reg_138 );

    SC_METHOD(thread_k_3_fu_253_p2);
    sensitive << ( k_1_reg_185 );

    SC_METHOD(thread_sum2_cast_fu_282_p1);
    sensitive << ( tmp_4_fu_265_p1 );

    SC_METHOD(thread_sum_cast_fu_224_p1);
    sensitive << ( tmp_1_fu_220_p1 );

    SC_METHOD(thread_tmp_1_fu_220_p1);
    sensitive << ( k_reg_138 );

    SC_METHOD(thread_tmp_4_fu_265_p1);
    sensitive << ( k_1_reg_185 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond5_fu_208_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( grp_aes256_encrypt_ecb_fu_196_ap_done );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond1_fu_247_p2 );
    sensitive << ( ap_phi_mux_i_2_phi_fu_108_p4 );
    sensitive << ( ap_CS_fsm_state2 );

    ap_CS_fsm = "0000001";
    grp_aes256_encrypt_ecb_fu_196_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "workload_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_address0, "(port)data_address0");
    sc_trace(mVcdFile, data_ce0, "(port)data_ce0");
    sc_trace(mVcdFile, data_we0, "(port)data_we0");
    sc_trace(mVcdFile, data_d0, "(port)data_d0");
    sc_trace(mVcdFile, data_q0, "(port)data_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, local_key_0_q0, "local_key_0_q0");
    sc_trace(mVcdFile, k_2_fu_214_p2, "k_2_fu_214_p2");
    sc_trace(mVcdFile, k_2_reg_302, "k_2_reg_302");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_1_fu_220_p1, "tmp_1_fu_220_p1");
    sc_trace(mVcdFile, tmp_1_reg_307, "tmp_1_reg_307");
    sc_trace(mVcdFile, exitcond5_fu_208_p2, "exitcond5_fu_208_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, buf_0_0_2_reg_322, "buf_0_0_2_reg_322");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_aes256_encrypt_ecb_fu_196_ap_idle, "grp_aes256_encrypt_ecb_fu_196_ap_idle");
    sc_trace(mVcdFile, grp_aes256_encrypt_ecb_fu_196_ap_ready, "grp_aes256_encrypt_ecb_fu_196_ap_ready");
    sc_trace(mVcdFile, grp_aes256_encrypt_ecb_fu_196_ap_done, "grp_aes256_encrypt_ecb_fu_196_ap_done");
    sc_trace(mVcdFile, buf_0_1_2_reg_328, "buf_0_1_2_reg_328");
    sc_trace(mVcdFile, k_3_fu_253_p2, "k_3_fu_253_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_aes256_encrypt_ecb_fu_196_ap_start, "grp_aes256_encrypt_ecb_fu_196_ap_start");
    sc_trace(mVcdFile, grp_aes256_encrypt_ecb_fu_196_k_address0, "grp_aes256_encrypt_ecb_fu_196_k_address0");
    sc_trace(mVcdFile, grp_aes256_encrypt_ecb_fu_196_k_ce0, "grp_aes256_encrypt_ecb_fu_196_k_ce0");
    sc_trace(mVcdFile, grp_aes256_encrypt_ecb_fu_196_ap_return_0, "grp_aes256_encrypt_ecb_fu_196_ap_return_0");
    sc_trace(mVcdFile, grp_aes256_encrypt_ecb_fu_196_ap_return_1, "grp_aes256_encrypt_ecb_fu_196_ap_return_1");
    sc_trace(mVcdFile, buf_0_1_reg_79, "buf_0_1_reg_79");
    sc_trace(mVcdFile, exitcond1_fu_247_p2, "exitcond1_fu_247_p2");
    sc_trace(mVcdFile, buf_0_0_reg_91, "buf_0_0_reg_91");
    sc_trace(mVcdFile, ap_phi_mux_i_2_phi_fu_108_p4, "ap_phi_mux_i_2_phi_fu_108_p4");
    sc_trace(mVcdFile, i_2_reg_103, "i_2_reg_103");
    sc_trace(mVcdFile, buf_0_1_1_reg_116, "buf_0_1_1_reg_116");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, buf_0_0_1_reg_127, "buf_0_0_1_reg_127");
    sc_trace(mVcdFile, k_reg_138, "k_reg_138");
    sc_trace(mVcdFile, buf_0_1_1_be_reg_149, "buf_0_1_1_be_reg_149");
    sc_trace(mVcdFile, buf_0_0_1_be_reg_167, "buf_0_0_1_be_reg_167");
    sc_trace(mVcdFile, k_1_reg_185, "k_1_reg_185");
    sc_trace(mVcdFile, grp_aes256_encrypt_ecb_fu_196_ap_start_reg, "grp_aes256_encrypt_ecb_fu_196_ap_start_reg");
    sc_trace(mVcdFile, sum_cast_fu_224_p1, "sum_cast_fu_224_p1");
    sc_trace(mVcdFile, sum2_cast_fu_282_p1, "sum2_cast_fu_282_p1");
    sc_trace(mVcdFile, buf_0_3_fu_50, "buf_0_3_fu_50");
    sc_trace(mVcdFile, buf_0_3_1_fu_54, "buf_0_3_1_fu_54");
    sc_trace(mVcdFile, tmp_fu_269_p6, "tmp_fu_269_p6");
    sc_trace(mVcdFile, tmp_4_fu_265_p1, "tmp_4_fu_265_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

workload::~workload() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete local_key_0_U;
    delete grp_aes256_encrypt_ecb_fu_196;
    delete aqed_top_mux_42_8fYi_U21;
}

void workload::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,2,2>(tmp_1_reg_307.read(), ap_const_lv2_0))) {
        buf_0_0_1_be_reg_167 = data_q0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,2,2>(tmp_1_reg_307.read(), ap_const_lv2_3)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,2,2>(tmp_1_reg_307.read(), ap_const_lv2_2)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,2,2>(tmp_1_reg_307.read(), ap_const_lv2_1)))) {
        buf_0_0_1_be_reg_167 = buf_0_0_1_reg_127.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buf_0_0_1_reg_127 = buf_0_0_1_be_reg_167.read();
    } else if ((esl_seteq<1,1,1>(ap_phi_mux_i_2_phi_fu_108_p4.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        buf_0_0_1_reg_127 = buf_0_0_reg_91.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,2,2>(tmp_1_reg_307.read(), ap_const_lv2_1))) {
        buf_0_1_1_be_reg_149 = data_q0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,2,2>(tmp_1_reg_307.read(), ap_const_lv2_3)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,2,2>(tmp_1_reg_307.read(), ap_const_lv2_2)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                 esl_seteq<1,2,2>(tmp_1_reg_307.read(), ap_const_lv2_0)))) {
        buf_0_1_1_be_reg_149 = buf_0_1_1_reg_116.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        buf_0_1_1_reg_116 = buf_0_1_1_be_reg_149.read();
    } else if ((esl_seteq<1,1,1>(ap_phi_mux_i_2_phi_fu_108_p4.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        buf_0_1_1_reg_116 = buf_0_1_reg_79.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_aes256_encrypt_ecb_fu_196_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(exitcond5_fu_208_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
            grp_aes256_encrypt_ecb_fu_196_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_aes256_encrypt_ecb_fu_196_ap_ready.read())) {
            grp_aes256_encrypt_ecb_fu_196_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_247_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        i_2_reg_103 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_2_reg_103 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_247_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        k_1_reg_185 = k_3_fu_253_p2.read();
    } else if ((esl_seteq<1,1,1>(grp_aes256_encrypt_ecb_fu_196_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        k_1_reg_185 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_reg_138 = k_2_reg_302.read();
    } else if ((esl_seteq<1,1,1>(ap_phi_mux_i_2_phi_fu_108_p4.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        k_reg_138 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(grp_aes256_encrypt_ecb_fu_196_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        buf_0_0_2_reg_322 = grp_aes256_encrypt_ecb_fu_196_ap_return_0.read();
        buf_0_1_2_reg_328 = grp_aes256_encrypt_ecb_fu_196_ap_return_1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_247_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        buf_0_0_reg_91 = buf_0_0_2_reg_322.read();
        buf_0_1_reg_79 = buf_0_1_2_reg_328.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,2,2>(tmp_1_reg_307.read(), ap_const_lv2_3))) {
        buf_0_3_1_fu_54 = data_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,2,2>(tmp_1_reg_307.read(), ap_const_lv2_2))) {
        buf_0_3_fu_50 = data_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        k_2_reg_302 = k_2_fu_214_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond5_fu_208_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_1_reg_307 = tmp_1_fu_220_p1.read();
    }
}

void workload::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void workload::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void workload::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void workload::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void workload::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void workload::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void workload::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void workload::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_phi_mux_i_2_phi_fu_108_p4.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void workload::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void workload::thread_ap_phi_mux_i_2_phi_fu_108_p4() {
    ap_phi_mux_i_2_phi_fu_108_p4 = i_2_reg_103.read();
}

void workload::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_phi_mux_i_2_phi_fu_108_p4.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void workload::thread_data_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        data_address0 =  (sc_lv<4>) (sum2_cast_fu_282_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        data_address0 =  (sc_lv<4>) (sum_cast_fu_224_p1.read());
    } else {
        data_address0 = "XXXX";
    }
}

void workload::thread_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        data_ce0 = ap_const_logic_1;
    } else {
        data_ce0 = ap_const_logic_0;
    }
}

void workload::thread_data_d0() {
    data_d0 = tmp_fu_269_p6.read();
}

void workload::thread_data_we0() {
    if ((esl_seteq<1,1,1>(exitcond1_fu_247_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
        data_we0 = ap_const_logic_1;
    } else {
        data_we0 = ap_const_logic_0;
    }
}

void workload::thread_exitcond1_fu_247_p2() {
    exitcond1_fu_247_p2 = (!k_1_reg_185.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_1_reg_185.read() == ap_const_lv3_4);
}

void workload::thread_exitcond5_fu_208_p2() {
    exitcond5_fu_208_p2 = (!k_reg_138.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(k_reg_138.read() == ap_const_lv3_4);
}

void workload::thread_grp_aes256_encrypt_ecb_fu_196_ap_start() {
    grp_aes256_encrypt_ecb_fu_196_ap_start = grp_aes256_encrypt_ecb_fu_196_ap_start_reg.read();
}

void workload::thread_k_2_fu_214_p2() {
    k_2_fu_214_p2 = (!k_reg_138.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_reg_138.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void workload::thread_k_3_fu_253_p2() {
    k_3_fu_253_p2 = (!k_1_reg_185.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_1_reg_185.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void workload::thread_sum2_cast_fu_282_p1() {
    sum2_cast_fu_282_p1 = esl_zext<64,2>(tmp_4_fu_265_p1.read());
}

void workload::thread_sum_cast_fu_224_p1() {
    sum_cast_fu_224_p1 = esl_zext<64,2>(tmp_1_fu_220_p1.read());
}

void workload::thread_tmp_1_fu_220_p1() {
    tmp_1_fu_220_p1 = k_reg_138.read().range(2-1, 0);
}

void workload::thread_tmp_4_fu_265_p1() {
    tmp_4_fu_265_p1 = k_1_reg_185.read().range(2-1, 0);
}

void workload::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_phi_mux_i_2_phi_fu_108_p4.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond5_fu_208_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(grp_aes256_encrypt_ecb_fu_196_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_247_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

}

