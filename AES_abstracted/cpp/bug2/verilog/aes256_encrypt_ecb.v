// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes256_encrypt_ecb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        k_address0,
        k_ce0,
        k_q0,
        p_read,
        p_read1,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state4 = 7'd4;
parameter    ap_ST_fsm_pp1_stage0 = 7'd8;
parameter    ap_ST_fsm_state7 = 7'd16;
parameter    ap_ST_fsm_pp2_stage0 = 7'd32;
parameter    ap_ST_fsm_state10 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] k_address0;
output   k_ce0;
input  [7:0] k_q0;
input  [7:0] p_read;
input  [7:0] p_read1;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg k_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] i_reg_152;
reg   [7:0] buf_reg_163;
reg   [7:0] buf1_reg_173;
reg   [1:0] i_i_reg_183;
reg   [7:0] buf_2_reg_194;
reg   [7:0] buf13_2_reg_205;
reg   [1:0] i_i1_reg_216;
wire   [0:0] tmp_fu_227_p2;
reg   [0:0] tmp_reg_385;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] i_1_fu_233_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_s_fu_239_p1;
reg   [63:0] tmp_s_reg_394;
wire   [0:0] tmp_i_fu_244_p2;
reg   [0:0] tmp_i_reg_404;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [0:0] tmp_10_fu_250_p1;
reg   [0:0] tmp_10_reg_408;
wire  signed [1:0] i_2_fu_254_p2;
reg  signed [1:0] i_2_reg_415;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] tmp_i_14_fu_264_p1;
reg   [63:0] tmp_i_14_reg_420;
wire   [63:0] tmp_28_i_fu_279_p1;
reg   [63:0] tmp_28_i_reg_430;
wire   [7:0] buf_1_fu_297_p3;
reg    ap_enable_reg_pp1_iter1;
wire   [7:0] buf13_1_fu_304_p3;
wire   [0:0] tmp_i2_fu_311_p2;
reg   [0:0] tmp_i2_reg_450;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state8_pp2_stage0_iter0;
wire    ap_block_state9_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [0:0] tmp_11_fu_317_p1;
reg   [0:0] tmp_11_reg_454;
wire  signed [1:0] i_3_fu_321_p2;
reg  signed [1:0] i_3_reg_461;
reg    ap_enable_reg_pp2_iter0;
wire   [7:0] buf_3_fu_349_p3;
reg    ap_enable_reg_pp2_iter1;
wire   [7:0] buf13_3_fu_356_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
wire    ap_CS_fsm_state7;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state8;
reg   [4:0] ctx_body_key_address0;
reg    ctx_body_key_ce0;
reg    ctx_body_key_we0;
wire   [7:0] ctx_body_key_q0;
wire   [4:0] ctx_body_key_address1;
reg    ctx_body_key_ce1;
reg    ctx_body_key_we1;
reg   [4:0] ctx_body_enckey_address0;
reg    ctx_body_enckey_ce0;
reg    ctx_body_enckey_we0;
wire   [7:0] ctx_body_enckey_q0;
wire   [4:0] ctx_body_enckey_address1;
reg    ctx_body_enckey_ce1;
wire   [7:0] ctx_body_enckey_q1;
wire    ap_block_pp1_stage0;
reg   [1:0] ap_phi_mux_i_i_phi_fu_187_p4;
wire    ap_block_pp2_stage0;
reg   [1:0] ap_phi_mux_i_i1_phi_fu_220_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_i3_fu_331_p1;
wire  signed [7:0] i_2_cast_fu_260_p1;
wire  signed [4:0] tmp_26_i_cast_fu_269_p1;
wire   [4:0] tmp_27_i_fu_273_p2;
wire   [7:0] buf_load_i_phi_fu_284_p3;
wire   [7:0] tmp_25_i_fu_291_p2;
wire  signed [7:0] i_3_cast_fu_327_p1;
wire   [7:0] buf_load_i7_phi_fu_336_p3;
wire   [7:0] tmp_29_i_fu_343_p2;
wire    ap_CS_fsm_state10;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

aes256_encrypt_ecb_ctx_body_key #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ctx_body_key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ctx_body_key_address0),
    .ce0(ctx_body_key_ce0),
    .we0(ctx_body_key_we0),
    .d0(ctx_body_enckey_q0),
    .q0(ctx_body_key_q0),
    .address1(ctx_body_key_address1),
    .ce1(ctx_body_key_ce1),
    .we1(ctx_body_key_we1),
    .d1(ctx_body_enckey_q1)
);

aes256_encrypt_ecb_ctx_body_enckey #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ctx_body_enckey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ctx_body_enckey_address0),
    .ce0(ctx_body_enckey_ce0),
    .we0(ctx_body_enckey_we0),
    .d0(k_q0),
    .q0(ctx_body_enckey_q0),
    .address1(ctx_body_enckey_address1),
    .ce1(ctx_body_enckey_ce1),
    .q1(ctx_body_enckey_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state8) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state8);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buf13_2_reg_205 <= buf1_reg_173;
    end else if (((tmp_i2_reg_450 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        buf13_2_reg_205 <= buf13_3_fu_356_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf1_reg_173 <= p_read1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i_reg_404 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        buf1_reg_173 <= buf13_1_fu_304_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_2_reg_194 <= buf_reg_163;
    end else if (((tmp_i2_reg_450 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        buf_2_reg_194 <= buf_3_fu_349_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_reg_163 <= p_read;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i_reg_404 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        buf_reg_163 <= buf_1_fu_297_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_i1_reg_216 <= 2'd2;
    end else if (((tmp_i2_reg_450 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_i1_reg_216 <= i_3_reg_461;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_reg_183 <= 2'd2;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i_reg_404 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        i_i_reg_183 <= i_2_reg_415;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_227_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_152 <= i_1_fu_233_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_152 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i_fu_244_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_2_reg_415 <= i_2_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i2_fu_311_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_3_reg_461 <= i_3_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i_fu_244_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_10_reg_408 <= tmp_10_fu_250_p1;
        tmp_28_i_reg_430[4 : 0] <= tmp_28_i_fu_279_p1[4 : 0];
        tmp_i_14_reg_420[7 : 0] <= tmp_i_14_fu_264_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i2_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_11_reg_454 <= tmp_11_fu_317_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_i2_reg_450 <= tmp_i2_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_i_reg_404 <= tmp_i_fu_244_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_385 <= tmp_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_s_reg_394[5 : 0] <= tmp_s_fu_239_p1[5 : 0];
    end
end

always @ (*) begin
    if ((tmp_fu_227_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_i_fu_244_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_i2_fu_311_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i2_reg_450 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_i_i1_phi_fu_220_p4 = i_3_reg_461;
    end else begin
        ap_phi_mux_i_i1_phi_fu_220_p4 = i_i1_reg_216;
    end
end

always @ (*) begin
    if (((tmp_i_reg_404 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_i_i_phi_fu_187_p4 = i_2_reg_415;
    end else begin
        ap_phi_mux_i_i_phi_fu_187_p4 = i_i_reg_183;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ctx_body_enckey_address0 = tmp_i_14_fu_264_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ctx_body_enckey_address0 = tmp_s_reg_394;
    end else begin
        ctx_body_enckey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        ctx_body_enckey_ce0 = 1'b1;
    end else begin
        ctx_body_enckey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        ctx_body_enckey_ce1 = 1'b1;
    end else begin
        ctx_body_enckey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_385 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ctx_body_enckey_we0 = 1'b1;
    end else begin
        ctx_body_enckey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ctx_body_key_address0 = tmp_i3_fu_331_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ctx_body_key_address0 = tmp_i_14_reg_420;
    end else begin
        ctx_body_key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        ctx_body_key_ce0 = 1'b1;
    end else begin
        ctx_body_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ctx_body_key_ce1 = 1'b1;
    end else begin
        ctx_body_key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i_reg_404 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ctx_body_key_we0 = 1'b1;
    end else begin
        ctx_body_key_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i_reg_404 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ctx_body_key_we1 = 1'b1;
    end else begin
        ctx_body_key_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_ce0 = 1'b1;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((tmp_fu_227_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_fu_227_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((tmp_i_fu_244_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((tmp_i_fu_244_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (tmp_i2_fu_311_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (tmp_i2_fu_311_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_return_0 = buf_2_reg_194;

assign ap_return_1 = buf13_2_reg_205;

assign buf13_1_fu_304_p3 = ((tmp_10_reg_408[0:0] === 1'b1) ? buf1_reg_173 : tmp_25_i_fu_291_p2);

assign buf13_3_fu_356_p3 = ((tmp_11_reg_454[0:0] === 1'b1) ? buf13_2_reg_205 : tmp_29_i_fu_343_p2);

assign buf_1_fu_297_p3 = ((tmp_10_reg_408[0:0] === 1'b1) ? tmp_25_i_fu_291_p2 : buf_reg_163);

assign buf_3_fu_349_p3 = ((tmp_11_reg_454[0:0] === 1'b1) ? tmp_29_i_fu_343_p2 : buf_2_reg_194);

assign buf_load_i7_phi_fu_336_p3 = ((tmp_11_reg_454[0:0] === 1'b1) ? buf_2_reg_194 : buf13_2_reg_205);

assign buf_load_i_phi_fu_284_p3 = ((tmp_10_reg_408[0:0] === 1'b1) ? buf_reg_163 : buf1_reg_173);

assign ctx_body_enckey_address1 = tmp_28_i_fu_279_p1;

assign ctx_body_key_address1 = tmp_28_i_reg_430;

assign i_1_fu_233_p2 = (i_reg_152 + 6'd1);

assign i_2_cast_fu_260_p1 = i_2_fu_254_p2;

assign i_2_fu_254_p2 = ($signed(2'd3) + $signed(ap_phi_mux_i_i_phi_fu_187_p4));

assign i_3_cast_fu_327_p1 = i_3_fu_321_p2;

assign i_3_fu_321_p2 = ($signed(2'd3) + $signed(ap_phi_mux_i_i1_phi_fu_220_p4));

assign k_address0 = tmp_s_fu_239_p1;

assign tmp_10_fu_250_p1 = ap_phi_mux_i_i_phi_fu_187_p4[0:0];

assign tmp_11_fu_317_p1 = ap_phi_mux_i_i1_phi_fu_220_p4[0:0];

assign tmp_25_i_fu_291_p2 = (ctx_body_enckey_q0 ^ buf_load_i_phi_fu_284_p3);

assign tmp_26_i_cast_fu_269_p1 = i_2_fu_254_p2;

assign tmp_27_i_fu_273_p2 = (tmp_26_i_cast_fu_269_p1 ^ 5'd16);

assign tmp_28_i_fu_279_p1 = tmp_27_i_fu_273_p2;

assign tmp_29_i_fu_343_p2 = (ctx_body_key_q0 ^ buf_load_i7_phi_fu_336_p3);

assign tmp_fu_227_p2 = ((i_reg_152 == 6'd32) ? 1'b1 : 1'b0);

assign tmp_i2_fu_311_p2 = ((ap_phi_mux_i_i1_phi_fu_220_p4 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_i3_fu_331_p1 = $unsigned(i_3_cast_fu_327_p1);

assign tmp_i_14_fu_264_p1 = $unsigned(i_2_cast_fu_260_p1);

assign tmp_i_fu_244_p2 = ((ap_phi_mux_i_i_phi_fu_187_p4 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_239_p1 = i_reg_152;

always @ (posedge ap_clk) begin
    tmp_s_reg_394[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    tmp_i_14_reg_420[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    tmp_28_i_reg_430[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //aes256_encrypt_ecb
