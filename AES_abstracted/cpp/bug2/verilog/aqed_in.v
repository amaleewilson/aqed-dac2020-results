// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aqed_in (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bmc_in_address0,
        bmc_in_ce0,
        bmc_in_q0,
        bmc_in_address1,
        bmc_in_ce1,
        bmc_in_q1,
        orig_V,
        dup_V,
        orig_idx_V,
        dup_idx_V,
        state_orig_issued_V_i,
        state_orig_issued_V_o,
        state_orig_issued_V_o_ap_vld,
        state_dup_issued_V_i,
        state_dup_issued_V_o,
        state_dup_issued_V_o_ap_vld,
        state_orig_in_V,
        state_orig_in_V_ap_vld,
        state_orig_idx_V,
        state_orig_idx_V_ap_vld,
        state_dup_in_V,
        state_dup_in_V_ap_vld,
        state_dup_idx_V,
        state_dup_idx_V_ap_vld,
        state_dup_val_V_0,
        state_dup_val_V_0_ap_vld,
        state_dup_val_V_1,
        state_dup_val_V_1_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] bmc_in_address0;
output   bmc_in_ce0;
input  [7:0] bmc_in_q0;
output  [3:0] bmc_in_address1;
output   bmc_in_ce1;
input  [7:0] bmc_in_q1;
input  [0:0] orig_V;
input  [0:0] dup_V;
input  [1:0] orig_idx_V;
input  [1:0] dup_idx_V;
input  [0:0] state_orig_issued_V_i;
output  [0:0] state_orig_issued_V_o;
output   state_orig_issued_V_o_ap_vld;
input  [0:0] state_dup_issued_V_i;
output  [0:0] state_dup_issued_V_o;
output   state_dup_issued_V_o_ap_vld;
output  [15:0] state_orig_in_V;
output   state_orig_in_V_ap_vld;
output  [1:0] state_orig_idx_V;
output   state_orig_idx_V_ap_vld;
output  [15:0] state_dup_in_V;
output   state_dup_in_V_ap_vld;
output  [1:0] state_dup_idx_V;
output   state_dup_idx_V_ap_vld;
output  [7:0] state_dup_val_V_0;
output   state_dup_val_V_0_ap_vld;
output  [7:0] state_dup_val_V_1;
output   state_dup_val_V_1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] bmc_in_address0;
reg bmc_in_ce0;
reg[3:0] bmc_in_address1;
reg bmc_in_ce1;
reg[0:0] state_orig_issued_V_o;
reg state_orig_issued_V_o_ap_vld;
reg[0:0] state_dup_issued_V_o;
reg state_dup_issued_V_o_ap_vld;
reg state_orig_in_V_ap_vld;
reg state_orig_idx_V_ap_vld;
reg state_dup_in_V_ap_vld;
reg state_dup_idx_V_ap_vld;
reg state_dup_val_V_0_ap_vld;
reg state_dup_val_V_1_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] state_orig_val_V_0;
reg   [7:0] state_orig_val_V_1;
reg   [15:0] state_in_count_V;
wire    ap_CS_fsm_state2;
reg   [7:0] bmc_in_load_reg_485;
reg   [7:0] bmc_in_load_4_reg_492;
wire   [63:0] op2_fu_123_p1;
wire   [63:0] p_0175_sum_cast_fu_134_p1;
wire   [63:0] op2_2_fu_147_p1;
wire   [63:0] p_0371_sum_cast_fu_158_p1;
wire    ap_CS_fsm_state3;
wire   [0:0] val_assign_11_demorg_fu_184_p2;
wire   [15:0] tmp_1_fu_451_p2;
wire   [0:0] issue_dup_V_fu_385_p2;
wire   [2:0] ret_V_fu_115_p3;
wire   [2:0] p_0175_sum_fu_128_p2;
wire   [2:0] ret_V_2_fu_139_p3;
wire   [2:0] p_0371_sum_fu_152_p2;
wire   [0:0] tmp_s_fu_169_p2;
wire   [0:0] orig_V_not_fu_163_p2;
wire   [0:0] tmp_fu_178_p2;
wire   [0:0] tmp_7_fu_218_p2;
wire   [0:0] tmp_5_fu_196_p2;
wire   [0:0] tmp39_demorgan_fu_245_p2;
wire   [0:0] tmp1_fu_239_p2;
wire   [0:0] tmp2_fu_251_p2;
wire   [0:0] sel_tmp_fu_257_p2;
wire   [0:0] issue_orig_V_fu_190_p2;
wire   [0:0] tmp_19_not_fu_269_p2;
wire   [0:0] tmp_6_fu_209_p2;
wire   [0:0] tmp4_fu_287_p2;
wire   [0:0] sel_tmp7_fu_275_p2;
wire   [0:0] tmp5_fu_293_p2;
wire   [0:0] tmp3_fu_281_p2;
wire   [0:0] brmerge_fu_223_p2;
wire   [0:0] sel_tmp1_fu_299_p2;
wire   [0:0] sel_tmp2_fu_305_p2;
wire   [0:0] sel_tmp4_fu_317_p2;
wire   [0:0] sel_tmp3_fu_311_p2;
wire   [0:0] sel_tmp6_fu_323_p2;
wire   [0:0] tmp6_fu_329_p2;
wire   [0:0] sel_tmp5_fu_263_p2;
wire   [0:0] tmp_8_fu_229_p2;
wire   [0:0] tmp_9_fu_234_p2;
wire   [0:0] tmp7_fu_341_p2;
wire   [0:0] sel_tmp8_fu_335_p2;
wire   [0:0] sel_tmp10_fu_353_p2;
wire   [0:0] sel_tmp9_fu_347_p2;
wire   [0:0] sel_tmp12_fu_367_p2;
wire   [0:0] sel_tmp13_fu_373_p2;
wire   [0:0] sel_tmp11_fu_359_p3;
wire   [0:0] not_sel_tmp_fu_379_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 state_orig_val_V_0 = 8'd0;
#0 state_orig_val_V_1 = 8'd0;
#0 state_in_count_V = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bmc_in_load_4_reg_492 <= bmc_in_q1;
        bmc_in_load_reg_485 <= bmc_in_q0;
    end
end

always @ (posedge ap_clk) begin
    if(ap_rst) begin
	state_in_count_V <= 0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_in_count_V <= tmp_1_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if(ap_rst) begin
	state_orig_val_V_0 <= 0;
	state_orig_val_V_1 <= 0;   
    end else if (((val_assign_11_demorg_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        state_orig_val_V_0 <= bmc_in_q0;
        state_orig_val_V_1 <= bmc_in_q1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bmc_in_address0 = op2_2_fu_147_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        bmc_in_address0 = op2_fu_123_p1;
    end else begin
        bmc_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bmc_in_address1 = p_0371_sum_cast_fu_158_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        bmc_in_address1 = p_0175_sum_cast_fu_134_p1;
    end else begin
        bmc_in_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        bmc_in_ce0 = 1'b1;
    end else begin
        bmc_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        bmc_in_ce1 = 1'b1;
    end else begin
        bmc_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (issue_dup_V_fu_385_p2 == 1'd1))) begin
        state_dup_idx_V_ap_vld = 1'b1;
    end else begin
        state_dup_idx_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (issue_dup_V_fu_385_p2 == 1'd1))) begin
        state_dup_in_V_ap_vld = 1'b1;
    end else begin
        state_dup_in_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (issue_dup_V_fu_385_p2 == 1'd1))) begin
        state_dup_issued_V_o = 1'd1;
    end else begin
        state_dup_issued_V_o = state_dup_issued_V_i;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (issue_dup_V_fu_385_p2 == 1'd1))) begin
        state_dup_issued_V_o_ap_vld = 1'b1;
    end else begin
        state_dup_issued_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (issue_dup_V_fu_385_p2 == 1'd1))) begin
        state_dup_val_V_0_ap_vld = 1'b1;
    end else begin
        state_dup_val_V_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (issue_dup_V_fu_385_p2 == 1'd1))) begin
        state_dup_val_V_1_ap_vld = 1'b1;
    end else begin
        state_dup_val_V_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((val_assign_11_demorg_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        state_orig_idx_V_ap_vld = 1'b1;
    end else begin
        state_orig_idx_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((val_assign_11_demorg_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        state_orig_in_V_ap_vld = 1'b1;
    end else begin
        state_orig_in_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((val_assign_11_demorg_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        state_orig_issued_V_o = 1'd1;
    end else begin
        state_orig_issued_V_o = state_orig_issued_V_i;
    end
end

always @ (*) begin
    if (((val_assign_11_demorg_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        state_orig_issued_V_o_ap_vld = 1'b1;
    end else begin
        state_orig_issued_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign brmerge_fu_223_p2 = (val_assign_11_demorg_fu_184_p2 | tmp_7_fu_218_p2);

assign issue_dup_V_fu_385_p2 = (sel_tmp11_fu_359_p3 & not_sel_tmp_fu_379_p2);

assign issue_orig_V_fu_190_p2 = (val_assign_11_demorg_fu_184_p2 ^ 1'd1);

assign not_sel_tmp_fu_379_p2 = (sel_tmp13_fu_373_p2 ^ 1'd1);

assign op2_2_fu_147_p1 = ret_V_2_fu_139_p3;

assign op2_fu_123_p1 = ret_V_fu_115_p3;

assign orig_V_not_fu_163_p2 = (orig_V ^ 1'd1);

assign p_0175_sum_cast_fu_134_p1 = p_0175_sum_fu_128_p2;

assign p_0175_sum_fu_128_p2 = (ret_V_fu_115_p3 | 3'd1);

assign p_0371_sum_cast_fu_158_p1 = p_0371_sum_fu_152_p2;

assign p_0371_sum_fu_152_p2 = (ret_V_2_fu_139_p3 | 3'd1);

assign ret_V_2_fu_139_p3 = {{orig_idx_V}, {1'd0}};

assign ret_V_fu_115_p3 = {{dup_idx_V}, {1'd0}};

assign sel_tmp10_fu_353_p2 = (sel_tmp1_fu_299_p2 & brmerge_fu_223_p2);

assign sel_tmp11_fu_359_p3 = ((sel_tmp10_fu_353_p2[0:0] === 1'b1) ? tmp_7_fu_218_p2 : sel_tmp9_fu_347_p2);

assign sel_tmp12_fu_367_p2 = (sel_tmp_fu_257_p2 | sel_tmp4_fu_317_p2);

assign sel_tmp13_fu_373_p2 = (val_assign_11_demorg_fu_184_p2 & sel_tmp12_fu_367_p2);

assign sel_tmp1_fu_299_p2 = (tmp5_fu_293_p2 & tmp3_fu_281_p2);

assign sel_tmp2_fu_305_p2 = (brmerge_fu_223_p2 ^ 1'd1);

assign sel_tmp3_fu_311_p2 = (sel_tmp2_fu_305_p2 & sel_tmp1_fu_299_p2);

assign sel_tmp4_fu_317_p2 = (tmp_6_fu_209_p2 ^ 1'd1);

assign sel_tmp5_fu_263_p2 = (sel_tmp_fu_257_p2 & issue_orig_V_fu_190_p2);

assign sel_tmp6_fu_323_p2 = (sel_tmp4_fu_317_p2 & issue_orig_V_fu_190_p2);

assign sel_tmp7_fu_275_p2 = (state_dup_issued_V_i ^ 1'd1);

assign sel_tmp8_fu_335_p2 = (tmp6_fu_329_p2 | sel_tmp5_fu_263_p2);

assign sel_tmp9_fu_347_p2 = (tmp7_fu_341_p2 & sel_tmp8_fu_335_p2);

assign sel_tmp_fu_257_p2 = (tmp2_fu_251_p2 | tmp1_fu_239_p2);

assign state_dup_idx_V = dup_idx_V;

assign state_dup_in_V = state_in_count_V;

assign state_dup_val_V_0 = bmc_in_load_reg_485;

assign state_dup_val_V_1 = bmc_in_load_4_reg_492;

assign state_orig_idx_V = orig_idx_V;

assign state_orig_in_V = state_in_count_V;

assign tmp1_fu_239_p2 = (tmp_5_fu_196_p2 | state_dup_issued_V_i);

assign tmp2_fu_251_p2 = (tmp39_demorgan_fu_245_p2 ^ 1'd1);

assign tmp39_demorgan_fu_245_p2 = (state_orig_issued_V_i & dup_V);

assign tmp3_fu_281_p2 = (tmp_19_not_fu_269_p2 & state_orig_issued_V_i);

assign tmp4_fu_287_p2 = (tmp_6_fu_209_p2 & dup_V);

assign tmp5_fu_293_p2 = (tmp4_fu_287_p2 & sel_tmp7_fu_275_p2);

assign tmp6_fu_329_p2 = (sel_tmp6_fu_323_p2 | sel_tmp3_fu_311_p2);

assign tmp7_fu_341_p2 = (tmp_9_fu_234_p2 & tmp_8_fu_229_p2);

assign tmp_19_not_fu_269_p2 = (tmp_5_fu_196_p2 ^ 1'd1);

assign tmp_1_fu_451_p2 = (state_in_count_V + 16'd1);

assign tmp_5_fu_196_p2 = ((dup_idx_V == 2'd3) ? 1'b1 : 1'b0);

assign tmp_6_fu_209_p2 = ((bmc_in_load_reg_485 == state_orig_val_V_0) ? 1'b1 : 1'b0);

assign tmp_7_fu_218_p2 = ((bmc_in_load_4_reg_492 == state_orig_val_V_1) ? 1'b1 : 1'b0);

assign tmp_8_fu_229_p2 = ((bmc_in_q0 == bmc_in_load_reg_485) ? 1'b1 : 1'b0);

assign tmp_9_fu_234_p2 = ((bmc_in_q1 == bmc_in_load_4_reg_492) ? 1'b1 : 1'b0);

assign tmp_fu_178_p2 = (tmp_s_fu_169_p2 | orig_V_not_fu_163_p2);

assign tmp_s_fu_169_p2 = ((orig_idx_V == 2'd3) ? 1'b1 : 1'b0);

assign val_assign_11_demorg_fu_184_p2 = (tmp_fu_178_p2 | state_orig_issued_V_i);

endmodule //aqed_in
