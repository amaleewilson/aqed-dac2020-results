-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aqed_in is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bmc_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bmc_in_ce0 : OUT STD_LOGIC;
    bmc_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bmc_in_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bmc_in_ce1 : OUT STD_LOGIC;
    bmc_in_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    orig_V : IN STD_LOGIC_VECTOR (0 downto 0);
    dup_V : IN STD_LOGIC_VECTOR (0 downto 0);
    orig_idx_V : IN STD_LOGIC_VECTOR (1 downto 0);
    dup_idx_V : IN STD_LOGIC_VECTOR (1 downto 0);
    state_orig_issued_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
    state_orig_issued_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    state_orig_issued_V_o_ap_vld : OUT STD_LOGIC;
    state_dup_issued_V_i : IN STD_LOGIC_VECTOR (0 downto 0);
    state_dup_issued_V_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    state_dup_issued_V_o_ap_vld : OUT STD_LOGIC;
    state_orig_in_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    state_orig_in_V_ap_vld : OUT STD_LOGIC;
    state_orig_idx_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    state_orig_idx_V_ap_vld : OUT STD_LOGIC;
    state_dup_in_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    state_dup_in_V_ap_vld : OUT STD_LOGIC;
    state_dup_idx_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    state_dup_idx_V_ap_vld : OUT STD_LOGIC;
    state_dup_val_V_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_dup_val_V_0_ap_vld : OUT STD_LOGIC;
    state_dup_val_V_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_dup_val_V_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of aqed_in is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_orig_val_V_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal state_orig_val_V_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal state_in_count_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bmc_in_load_reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal bmc_in_load_4_reg_492 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_fu_123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0368_sum_cast_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal op2_2_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0265_sum_cast_fu_158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal val_assign_11_demorg_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal issue_dup_V_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_115_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0368_sum_fu_128_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_fu_139_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0265_sum_fu_152_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal orig_V_not_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp39_demorgan_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal issue_orig_V_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_not_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_359_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bmc_in_load_4_reg_492 <= bmc_in_q1;
                bmc_in_load_reg_485 <= bmc_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                state_in_count_V <= tmp_1_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((val_assign_11_demorg_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_orig_val_V_0 <= bmc_in_q0;
                state_orig_val_V_1 <= bmc_in_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bmc_in_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, op2_fu_123_p1, op2_2_fu_147_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bmc_in_address0 <= op2_2_fu_147_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bmc_in_address0 <= op2_fu_123_p1(4 - 1 downto 0);
        else 
            bmc_in_address0 <= "XXXX";
        end if; 
    end process;


    bmc_in_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, p_0368_sum_cast_fu_134_p1, p_0265_sum_cast_fu_158_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bmc_in_address1 <= p_0265_sum_cast_fu_158_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bmc_in_address1 <= p_0368_sum_cast_fu_134_p1(4 - 1 downto 0);
        else 
            bmc_in_address1 <= "XXXX";
        end if; 
    end process;


    bmc_in_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bmc_in_ce0 <= ap_const_logic_1;
        else 
            bmc_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bmc_in_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bmc_in_ce1 <= ap_const_logic_1;
        else 
            bmc_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_fu_223_p2 <= (val_assign_11_demorg_fu_184_p2 or tmp_7_fu_218_p2);
    issue_dup_V_fu_385_p2 <= (sel_tmp11_fu_359_p3 and not_sel_tmp_fu_379_p2);
    issue_orig_V_fu_190_p2 <= (val_assign_11_demorg_fu_184_p2 xor ap_const_lv1_1);
    not_sel_tmp_fu_379_p2 <= (sel_tmp13_fu_373_p2 xor ap_const_lv1_1);
    op2_2_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_fu_139_p3),64));
    op2_fu_123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_115_p3),64));
    orig_V_not_fu_163_p2 <= (orig_V xor ap_const_lv1_1);
    p_0265_sum_cast_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0265_sum_fu_152_p2),64));
    p_0265_sum_fu_152_p2 <= (r_V_2_fu_139_p3 or ap_const_lv3_1);
    p_0368_sum_cast_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0368_sum_fu_128_p2),64));
    p_0368_sum_fu_128_p2 <= (r_V_fu_115_p3 or ap_const_lv3_1);
    r_V_2_fu_139_p3 <= (orig_idx_V & ap_const_lv1_0);
    r_V_fu_115_p3 <= (dup_idx_V & ap_const_lv1_0);
    sel_tmp10_fu_353_p2 <= (sel_tmp1_fu_299_p2 and brmerge_fu_223_p2);
    sel_tmp11_fu_359_p3 <= 
        tmp_7_fu_218_p2 when (sel_tmp10_fu_353_p2(0) = '1') else 
        sel_tmp9_fu_347_p2;
    sel_tmp12_fu_367_p2 <= (sel_tmp_fu_257_p2 or sel_tmp4_fu_317_p2);
    sel_tmp13_fu_373_p2 <= (val_assign_11_demorg_fu_184_p2 and sel_tmp12_fu_367_p2);
    sel_tmp1_fu_299_p2 <= (tmp5_fu_293_p2 and tmp3_fu_281_p2);
    sel_tmp2_fu_305_p2 <= (brmerge_fu_223_p2 xor ap_const_lv1_1);
    sel_tmp3_fu_311_p2 <= (sel_tmp2_fu_305_p2 and sel_tmp1_fu_299_p2);
    sel_tmp4_fu_317_p2 <= (tmp_6_fu_209_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_263_p2 <= (sel_tmp_fu_257_p2 and issue_orig_V_fu_190_p2);
    sel_tmp6_fu_323_p2 <= (sel_tmp4_fu_317_p2 and issue_orig_V_fu_190_p2);
    sel_tmp7_fu_275_p2 <= (state_dup_issued_V_i xor ap_const_lv1_1);
    sel_tmp8_fu_335_p2 <= (tmp6_fu_329_p2 or sel_tmp5_fu_263_p2);
    sel_tmp9_fu_347_p2 <= (tmp7_fu_341_p2 and sel_tmp8_fu_335_p2);
    sel_tmp_fu_257_p2 <= (tmp2_fu_251_p2 or tmp1_fu_239_p2);
    state_dup_idx_V <= dup_idx_V;

    state_dup_idx_V_ap_vld_assign_proc : process(ap_CS_fsm_state3, issue_dup_V_fu_385_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (issue_dup_V_fu_385_p2 = ap_const_lv1_1))) then 
            state_dup_idx_V_ap_vld <= ap_const_logic_1;
        else 
            state_dup_idx_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_dup_in_V <= state_in_count_V;

    state_dup_in_V_ap_vld_assign_proc : process(ap_CS_fsm_state3, issue_dup_V_fu_385_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (issue_dup_V_fu_385_p2 = ap_const_lv1_1))) then 
            state_dup_in_V_ap_vld <= ap_const_logic_1;
        else 
            state_dup_in_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_dup_issued_V_o_assign_proc : process(state_dup_issued_V_i, ap_CS_fsm_state3, issue_dup_V_fu_385_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (issue_dup_V_fu_385_p2 = ap_const_lv1_1))) then 
            state_dup_issued_V_o <= ap_const_lv1_1;
        else 
            state_dup_issued_V_o <= state_dup_issued_V_i;
        end if; 
    end process;


    state_dup_issued_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state3, issue_dup_V_fu_385_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (issue_dup_V_fu_385_p2 = ap_const_lv1_1))) then 
            state_dup_issued_V_o_ap_vld <= ap_const_logic_1;
        else 
            state_dup_issued_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_dup_val_V_0 <= bmc_in_load_reg_485;

    state_dup_val_V_0_ap_vld_assign_proc : process(ap_CS_fsm_state3, issue_dup_V_fu_385_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (issue_dup_V_fu_385_p2 = ap_const_lv1_1))) then 
            state_dup_val_V_0_ap_vld <= ap_const_logic_1;
        else 
            state_dup_val_V_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_dup_val_V_1 <= bmc_in_load_4_reg_492;

    state_dup_val_V_1_ap_vld_assign_proc : process(ap_CS_fsm_state3, issue_dup_V_fu_385_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (issue_dup_V_fu_385_p2 = ap_const_lv1_1))) then 
            state_dup_val_V_1_ap_vld <= ap_const_logic_1;
        else 
            state_dup_val_V_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_orig_idx_V <= orig_idx_V;

    state_orig_idx_V_ap_vld_assign_proc : process(ap_CS_fsm_state3, val_assign_11_demorg_fu_184_p2)
    begin
        if (((val_assign_11_demorg_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_orig_idx_V_ap_vld <= ap_const_logic_1;
        else 
            state_orig_idx_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_orig_in_V <= state_in_count_V;

    state_orig_in_V_ap_vld_assign_proc : process(ap_CS_fsm_state3, val_assign_11_demorg_fu_184_p2)
    begin
        if (((val_assign_11_demorg_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_orig_in_V_ap_vld <= ap_const_logic_1;
        else 
            state_orig_in_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_orig_issued_V_o_assign_proc : process(state_orig_issued_V_i, ap_CS_fsm_state3, val_assign_11_demorg_fu_184_p2)
    begin
        if (((val_assign_11_demorg_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_orig_issued_V_o <= ap_const_lv1_1;
        else 
            state_orig_issued_V_o <= state_orig_issued_V_i;
        end if; 
    end process;


    state_orig_issued_V_o_ap_vld_assign_proc : process(ap_CS_fsm_state3, val_assign_11_demorg_fu_184_p2)
    begin
        if (((val_assign_11_demorg_fu_184_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_orig_issued_V_o_ap_vld <= ap_const_logic_1;
        else 
            state_orig_issued_V_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_239_p2 <= (tmp_5_fu_196_p2 or state_dup_issued_V_i);
    tmp2_fu_251_p2 <= (tmp39_demorgan_fu_245_p2 xor ap_const_lv1_1);
    tmp39_demorgan_fu_245_p2 <= (state_orig_issued_V_i and dup_V);
    tmp3_fu_281_p2 <= (tmp_19_not_fu_269_p2 and state_orig_issued_V_i);
    tmp4_fu_287_p2 <= (tmp_6_fu_209_p2 and dup_V);
    tmp5_fu_293_p2 <= (tmp4_fu_287_p2 and sel_tmp7_fu_275_p2);
    tmp6_fu_329_p2 <= (sel_tmp6_fu_323_p2 or sel_tmp3_fu_311_p2);
    tmp7_fu_341_p2 <= (tmp_9_fu_234_p2 and tmp_8_fu_229_p2);
    tmp_19_not_fu_269_p2 <= (tmp_5_fu_196_p2 xor ap_const_lv1_1);
    tmp_1_fu_451_p2 <= std_logic_vector(unsigned(state_in_count_V) + unsigned(ap_const_lv16_1));
    tmp_5_fu_196_p2 <= "1" when (dup_idx_V = ap_const_lv2_3) else "0";
    tmp_6_fu_209_p2 <= "1" when (bmc_in_load_reg_485 = state_orig_val_V_0) else "0";
    tmp_7_fu_218_p2 <= "1" when (bmc_in_load_4_reg_492 = state_orig_val_V_1) else "0";
    tmp_8_fu_229_p2 <= "1" when (bmc_in_q0 = bmc_in_load_reg_485) else "0";
    tmp_9_fu_234_p2 <= "1" when (bmc_in_q1 = bmc_in_load_4_reg_492) else "0";
    tmp_fu_178_p2 <= (tmp_s_fu_169_p2 or orig_V_not_fu_163_p2);
    tmp_s_fu_169_p2 <= "1" when (orig_idx_V = ap_const_lv2_3) else "0";
    val_assign_11_demorg_fu_184_p2 <= (tmp_fu_178_p2 or state_orig_issued_V_i);
end behav;
