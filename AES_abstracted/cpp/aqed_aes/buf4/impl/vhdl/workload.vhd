-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity workload is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_we0 : OUT STD_LOGIC;
    data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of workload is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal local_key_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_key_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_fu_369_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_4_fu_381_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_4_reg_546 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_1_fu_387_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_551 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_391_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_555 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_2_fu_403_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_2_reg_563 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond5_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_419_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_1_1_7_fu_423_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal buf_1_1_8_fu_430_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_1_4_fu_437_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_1_6_fu_444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_3_reg_601 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_aes256_encrypt_ecb_fu_339_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_339_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_339_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_351_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_351_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_351_ap_done : STD_LOGIC;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal buf_0_1_3_reg_607 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_0_3_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_1_3_reg_619 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_5_fu_473_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_5_reg_628 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_5_fu_479_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_633 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_483_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_reg_638 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_3_fu_495_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_aes256_encrypt_ecb_fu_339_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_339_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_339_k_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_339_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_339_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_351_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_351_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_351_k_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_351_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_351_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_83 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_1_1_reg_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_0_reg_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_1_reg_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_reg_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_2_phi_fu_147_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal buf_1_1_1_reg_155 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal buf_1_0_1_reg_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_1_1_reg_177 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_1_reg_188 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_199 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_1_2_reg_210 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal buf_1_0_2_reg_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_1_2_reg_234 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_2_reg_246 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_258 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_1_2_be_reg_269 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_0_2_be_reg_281 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_1_2_be_reg_293 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_2_be_reg_305 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_3_reg_317 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_reg_328 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes256_encrypt_ecb_fu_339_ap_start_reg : STD_LOGIC := '0';
    signal grp_aes256_encrypt_ecb_fu_351_ap_start_reg : STD_LOGIC := '0';
    signal sum_cast_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp7_fu_409_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_501_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_1_load_phi_fu_505_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_load_phi_fu_511_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp8_fu_525_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component aes256_encrypt_ecb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce0 : OUT STD_LOGIC;
        k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component workload_local_keeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    local_key_0_U : component workload_local_keeOg
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_aes256_encrypt_ecb_fu_339_k_address0,
        ce0 => grp_aes256_encrypt_ecb_fu_339_k_ce0,
        q0 => local_key_0_q0);

    local_key_1_U : component workload_local_keeOg
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_aes256_encrypt_ecb_fu_351_k_address0,
        ce0 => grp_aes256_encrypt_ecb_fu_351_k_ce0,
        q0 => local_key_1_q0);

    grp_aes256_encrypt_ecb_fu_339 : component aes256_encrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_fu_339_ap_start,
        ap_done => grp_aes256_encrypt_ecb_fu_339_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_fu_339_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_fu_339_ap_ready,
        k_address0 => grp_aes256_encrypt_ecb_fu_339_k_address0,
        k_ce0 => grp_aes256_encrypt_ecb_fu_339_k_ce0,
        k_q0 => local_key_0_q0,
        p_read => buf_0_0_1_reg_188,
        p_read1 => buf_0_1_1_reg_177,
        ap_return_0 => grp_aes256_encrypt_ecb_fu_339_ap_return_0,
        ap_return_1 => grp_aes256_encrypt_ecb_fu_339_ap_return_1);

    grp_aes256_encrypt_ecb_fu_351 : component aes256_encrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_fu_351_ap_start,
        ap_done => grp_aes256_encrypt_ecb_fu_351_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_fu_351_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_fu_351_ap_ready,
        k_address0 => grp_aes256_encrypt_ecb_fu_351_k_address0,
        k_ce0 => grp_aes256_encrypt_ecb_fu_351_k_ce0,
        k_q0 => local_key_1_q0,
        p_read => buf_1_0_1_reg_166,
        p_read1 => buf_1_1_1_reg_155,
        ap_return_0 => grp_aes256_encrypt_ecb_fu_351_ap_return_0,
        ap_return_1 => grp_aes256_encrypt_ecb_fu_351_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_fu_339_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_fu_339_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond3_fu_375_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_aes256_encrypt_ecb_fu_339_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_fu_339_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_fu_339_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_fu_351_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_fu_351_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond3_fu_375_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_aes256_encrypt_ecb_fu_351_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_fu_351_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_fu_351_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buf_0_0_1_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                buf_0_0_1_reg_188 <= buf_0_0_2_reg_246;
            elsif (((ap_phi_mux_i_2_phi_fu_147_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buf_0_0_1_reg_188 <= buf_0_0_reg_130;
            end if; 
        end if;
    end process;

    buf_0_0_2_be_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((tmp_1_reg_551 = ap_const_lv1_0)) then 
                    buf_0_0_2_be_reg_305 <= buf_1_1_8_fu_430_p3;
                elsif ((tmp_1_reg_551 = ap_const_lv1_1)) then 
                    buf_0_0_2_be_reg_305 <= buf_0_0_2_reg_246;
                end if;
            end if; 
        end if;
    end process;

    buf_0_0_2_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buf_0_0_2_reg_246 <= buf_0_0_2_be_reg_305;
            elsif (((exitcond3_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buf_0_0_2_reg_246 <= buf_0_0_1_reg_188;
            end if; 
        end if;
    end process;

    buf_0_1_1_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                buf_0_1_1_reg_177 <= buf_0_1_2_reg_234;
            elsif (((ap_phi_mux_i_2_phi_fu_147_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buf_0_1_1_reg_177 <= buf_0_1_reg_118;
            end if; 
        end if;
    end process;

    buf_0_1_2_be_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((tmp_1_reg_551 = ap_const_lv1_0)) then 
                    buf_0_1_2_be_reg_293 <= buf_1_1_7_fu_423_p3;
                elsif ((tmp_1_reg_551 = ap_const_lv1_1)) then 
                    buf_0_1_2_be_reg_293 <= buf_0_1_2_reg_234;
                end if;
            end if; 
        end if;
    end process;

    buf_0_1_2_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buf_0_1_2_reg_234 <= buf_0_1_2_be_reg_293;
            elsif (((exitcond3_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buf_0_1_2_reg_234 <= buf_0_1_1_reg_177;
            end if; 
        end if;
    end process;

    buf_1_0_1_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                buf_1_0_1_reg_166 <= buf_1_0_2_reg_222;
            elsif (((ap_phi_mux_i_2_phi_fu_147_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buf_1_0_1_reg_166 <= buf_1_0_reg_106;
            end if; 
        end if;
    end process;

    buf_1_0_2_be_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((tmp_1_reg_551 = ap_const_lv1_0)) then 
                    buf_1_0_2_be_reg_281 <= buf_1_0_2_reg_222;
                elsif ((tmp_1_reg_551 = ap_const_lv1_1)) then 
                    buf_1_0_2_be_reg_281 <= buf_1_1_6_fu_444_p3;
                end if;
            end if; 
        end if;
    end process;

    buf_1_0_2_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buf_1_0_2_reg_222 <= buf_1_0_2_be_reg_281;
            elsif (((exitcond3_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buf_1_0_2_reg_222 <= buf_1_0_1_reg_166;
            end if; 
        end if;
    end process;

    buf_1_1_1_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                buf_1_1_1_reg_155 <= buf_1_1_2_reg_210;
            elsif (((ap_phi_mux_i_2_phi_fu_147_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buf_1_1_1_reg_155 <= buf_1_1_reg_94;
            end if; 
        end if;
    end process;

    buf_1_1_2_be_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((tmp_1_reg_551 = ap_const_lv1_0)) then 
                    buf_1_1_2_be_reg_269 <= buf_1_1_2_reg_210;
                elsif ((tmp_1_reg_551 = ap_const_lv1_1)) then 
                    buf_1_1_2_be_reg_269 <= buf_1_1_4_fu_437_p3;
                end if;
            end if; 
        end if;
    end process;

    buf_1_1_2_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buf_1_1_2_reg_210 <= buf_1_1_2_be_reg_269;
            elsif (((exitcond3_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buf_1_1_2_reg_210 <= buf_1_1_1_reg_155;
            end if; 
        end if;
    end process;

    i_2_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_2_reg_142 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_467_p2 = ap_const_lv1_1))) then 
                i_2_reg_142 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    j_1_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_1_reg_199 <= j_4_reg_546;
            elsif (((ap_phi_mux_i_2_phi_fu_147_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_1_reg_199 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_3_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
                j_3_reg_317 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_489_p2 = ap_const_lv1_1))) then 
                j_3_reg_317 <= j_5_reg_628;
            end if; 
        end if;
    end process;

    j_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_83 <= ap_const_lv6_0;
            elsif (((exitcond2_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_83 <= j_2_fu_369_p2;
            end if; 
        end if;
    end process;

    k_1_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                k_1_reg_328 <= k_3_fu_495_p2;
            elsif (((exitcond6_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                k_1_reg_328 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_reg_258 <= k_2_reg_563;
            elsif (((exitcond3_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_reg_258 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                buf_0_0_3_reg_601 <= grp_aes256_encrypt_ecb_fu_339_ap_return_0;
                buf_0_1_3_reg_607 <= grp_aes256_encrypt_ecb_fu_339_ap_return_1;
                buf_1_0_3_reg_613 <= grp_aes256_encrypt_ecb_fu_351_ap_return_0;
                buf_1_1_3_reg_619 <= grp_aes256_encrypt_ecb_fu_351_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_467_p2 = ap_const_lv1_1))) then
                buf_0_0_reg_130 <= buf_0_0_3_reg_601;
                buf_0_1_reg_118 <= buf_0_1_3_reg_607;
                buf_1_0_reg_106 <= buf_1_0_3_reg_613;
                buf_1_1_reg_94 <= buf_1_1_3_reg_619;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_4_reg_546 <= j_4_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_5_reg_628 <= j_5_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_2_reg_563 <= k_2_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_1_reg_551 <= tmp_1_fu_387_p1;
                    tmp_4_reg_555(1) <= tmp_4_fu_391_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_467_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_5_reg_633 <= tmp_5_fu_479_p1;
                    tmp_6_reg_638(1) <= tmp_6_fu_483_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_397_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_7_reg_573 <= tmp_7_fu_419_p1;
            end if;
        end if;
    end process;
    tmp_4_reg_555(0) <= '0';
    tmp_6_reg_638(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, exitcond3_fu_375_p2, ap_CS_fsm_state6, exitcond5_fu_397_p2, ap_CS_fsm_state9, ap_block_state9_on_subcall_done, ap_CS_fsm_state10, exitcond6_fu_467_p2, ap_CS_fsm_state11, exitcond2_fu_363_p2, ap_phi_mux_i_2_phi_fu_147_p4, ap_CS_fsm_state4, exitcond_fu_489_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_363_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_phi_mux_i_2_phi_fu_147_p4 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond3_fu_375_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond5_fu_397_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_467_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_489_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state9_on_subcall_done_assign_proc : process(grp_aes256_encrypt_ecb_fu_339_ap_done, grp_aes256_encrypt_ecb_fu_351_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_aes256_encrypt_ecb_fu_351_ap_done = ap_const_logic_0) or (grp_aes256_encrypt_ecb_fu_339_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_phi_mux_i_2_phi_fu_147_p4, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_phi_mux_i_2_phi_fu_147_p4 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_2_phi_fu_147_p4 <= i_2_reg_142;

    ap_ready_assign_proc : process(ap_phi_mux_i_2_phi_fu_147_p4, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_phi_mux_i_2_phi_fu_147_p4 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_load_phi_fu_511_p3 <= 
        buf_0_1_3_reg_607 when (tmp_9_fu_501_p1(0) = '1') else 
        buf_0_0_3_reg_601;
    buf_1_1_4_fu_437_p3 <= 
        data_q0 when (tmp_7_reg_573(0) = '1') else 
        buf_1_1_2_reg_210;
    buf_1_1_6_fu_444_p3 <= 
        buf_1_0_2_reg_222 when (tmp_7_reg_573(0) = '1') else 
        data_q0;
    buf_1_1_7_fu_423_p3 <= 
        data_q0 when (tmp_7_reg_573(0) = '1') else 
        buf_0_1_2_reg_234;
    buf_1_1_8_fu_430_p3 <= 
        buf_0_0_2_reg_246 when (tmp_7_reg_573(0) = '1') else 
        data_q0;
    buf_1_load_phi_fu_505_p3 <= 
        buf_1_1_3_reg_619 when (tmp_9_fu_501_p1(0) = '1') else 
        buf_1_0_3_reg_613;

    data_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, sum_cast_fu_414_p1, sum2_cast_fu_530_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_address0 <= sum2_cast_fu_530_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_address0 <= sum_cast_fu_414_p1(4 - 1 downto 0);
        else 
            data_address0 <= "XXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_d0 <= 
        buf_1_load_phi_fu_505_p3 when (tmp_5_reg_633(0) = '1') else 
        buf_0_load_phi_fu_511_p3;

    data_we0_assign_proc : process(ap_CS_fsm_state11, exitcond_fu_489_p2)
    begin
        if (((exitcond_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data_we0 <= ap_const_logic_1;
        else 
            data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_363_p2 <= "1" when (j_reg_83 = ap_const_lv6_20) else "0";
    exitcond3_fu_375_p2 <= "1" when (j_1_reg_199 = ap_const_lv2_2) else "0";
    exitcond5_fu_397_p2 <= "1" when (k_reg_258 = ap_const_lv2_2) else "0";
    exitcond6_fu_467_p2 <= "1" when (j_3_reg_317 = ap_const_lv2_2) else "0";
    exitcond_fu_489_p2 <= "1" when (k_1_reg_328 = ap_const_lv2_2) else "0";
    grp_aes256_encrypt_ecb_fu_339_ap_start <= grp_aes256_encrypt_ecb_fu_339_ap_start_reg;
    grp_aes256_encrypt_ecb_fu_351_ap_start <= grp_aes256_encrypt_ecb_fu_351_ap_start_reg;
    j_2_fu_369_p2 <= std_logic_vector(unsigned(j_reg_83) + unsigned(ap_const_lv6_1));
    j_4_fu_381_p2 <= std_logic_vector(unsigned(j_1_reg_199) + unsigned(ap_const_lv2_1));
    j_5_fu_473_p2 <= std_logic_vector(unsigned(j_3_reg_317) + unsigned(ap_const_lv2_1));
    k_2_fu_403_p2 <= std_logic_vector(unsigned(k_reg_258) + unsigned(ap_const_lv2_1));
    k_3_fu_495_p2 <= std_logic_vector(unsigned(k_1_reg_328) + unsigned(ap_const_lv2_1));
    sum2_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp8_fu_525_p2),64));
    sum_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_409_p2),64));
    tmp7_fu_409_p2 <= std_logic_vector(unsigned(k_reg_258) + unsigned(tmp_4_reg_555));
    tmp8_fu_525_p2 <= std_logic_vector(unsigned(k_1_reg_328) + unsigned(tmp_6_reg_638));
    tmp_1_fu_387_p1 <= j_1_reg_199(1 - 1 downto 0);
    tmp_4_fu_391_p2 <= std_logic_vector(shift_left(unsigned(j_1_reg_199),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_5_fu_479_p1 <= j_3_reg_317(1 - 1 downto 0);
    tmp_6_fu_483_p2 <= std_logic_vector(shift_left(unsigned(j_3_reg_317),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_7_fu_419_p1 <= k_reg_258(1 - 1 downto 0);
    tmp_9_fu_501_p1 <= k_1_reg_328(1 - 1 downto 0);
end behav;
