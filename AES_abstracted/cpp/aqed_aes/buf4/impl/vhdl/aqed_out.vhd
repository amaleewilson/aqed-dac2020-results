-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aqed_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_orig_issued_V : IN STD_LOGIC_VECTOR (0 downto 0);
    state_orig_in_V : IN STD_LOGIC_VECTOR (15 downto 0);
    state_orig_done_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    state_orig_done_V_ap_vld : OUT STD_LOGIC;
    state_dup_in_V : IN STD_LOGIC_VECTOR (15 downto 0);
    state_dup_issued_V : IN STD_LOGIC_VECTOR (0 downto 0);
    state_dup_idx_V : IN STD_LOGIC_VECTOR (1 downto 0);
    bmc_in_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bmc_in_ce0 : OUT STD_LOGIC;
    bmc_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bmc_in_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    bmc_in_ce1 : OUT STD_LOGIC;
    bmc_in_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of aqed_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_out_count_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal state_qed_done_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal state_orig_out_V_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal state_orig_out_V_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal state_qed_check_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal state_orig_issued_V_s_load_fu_98_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_out_count_V_lo_reg_303 : STD_LOGIC_VECTOR (15 downto 0);
    signal state_qed_done_V_loa_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal brmerge1_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge1_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal state_qed_done_V_fla_reg_69 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_qed_done_V_loc_reg_85 : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_056_sum_cast_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_256_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_state_qed_done_V_fl_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_5_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_not_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_not_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_196_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_056_sum_fu_209_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o2_qed_done_V_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_return_0_preg <= o2_qed_done_V_fu_272_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_return_1_preg <= state_qed_check_V;
                end if; 
            end if;
        end if;
    end process;


    state_qed_done_V_fla_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((brmerge1_fu_187_p2 = ap_const_lv1_1) and (state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                state_qed_done_V_fla_reg_69 <= ap_const_lv1_0;
            elsif (((state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_1) and (brmerge1_reg_326 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                state_qed_done_V_fla_reg_69 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    state_qed_done_V_loc_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((brmerge1_fu_187_p2 = ap_const_lv1_1) and (state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                state_qed_done_V_loc_reg_85 <= state_qed_done_V_loa_reg_310;
            elsif (((state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_1) and (brmerge1_reg_326 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                state_qed_done_V_loc_reg_85 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                brmerge1_reg_326 <= brmerge1_fu_187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                brmerge_reg_317 <= brmerge_fu_144_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_1) and (brmerge_reg_317 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                state_orig_out_V_0 <= bmc_in_q0;
                state_orig_out_V_1 <= bmc_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                state_out_count_V <= tmp_4_fu_256_p2;
                tmp_3_reg_340 <= tmp_3_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                state_out_count_V_lo_reg_303 <= state_out_count_V;
                state_qed_done_V_loa_reg_310 <= state_qed_done_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_1) and (brmerge1_reg_326 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_qed_check_V <= val_assign_5_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_state_qed_done_V_fl_fu_267_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                state_qed_done_V <= ap_const_lv1_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state4, o2_qed_done_V_fu_272_p2, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_return_0 <= o2_qed_done_V_fu_272_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(state_qed_check_V, ap_CS_fsm_state4, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_return_1 <= state_qed_check_V;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    bmc_in_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, op2_fu_204_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bmc_in_address0 <= op2_fu_204_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bmc_in_address0 <= ap_const_lv4_0;
        else 
            bmc_in_address0 <= "XXXX";
        end if; 
    end process;


    bmc_in_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, p_056_sum_cast_fu_215_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bmc_in_address1 <= p_056_sum_cast_fu_215_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bmc_in_address1 <= ap_const_lv4_1;
        else 
            bmc_in_address1 <= "XXXX";
        end if; 
    end process;


    bmc_in_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bmc_in_ce0 <= ap_const_logic_1;
        else 
            bmc_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bmc_in_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            bmc_in_ce1 <= ap_const_logic_1;
        else 
            bmc_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge1_fu_187_p2 <= (state_qed_done_V_loa_reg_310 or or_cond_not_fu_181_p2);
    brmerge_fu_144_p2 <= (tmp_not_fu_138_p2 or state_qed_done_V);
    o2_qed_done_V_fu_272_p2 <= (tmp_3_reg_340 or state_qed_done_V_loc_reg_85);
    op2_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_196_p3),64));
    or_cond_fu_175_p2 <= (tmp_s_fu_170_p2 and state_dup_issued_V);
    or_cond_not_fu_181_p2 <= (or_cond_fu_175_p2 xor ap_const_lv1_1);
    p_056_sum_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_056_sum_fu_209_p2),64));
    p_056_sum_fu_209_p2 <= (r_V_fu_196_p3 or ap_const_lv3_1);
    p_state_qed_done_V_fl_fu_267_p2 <= (tmp_3_reg_340 or state_qed_done_V_fla_reg_69);
    r_V_fu_196_p3 <= (state_dup_idx_V & ap_const_lv1_0);
    rev2_fu_126_p2 <= (ult_fu_120_p2 xor ap_const_lv1_1);

    state_orig_done_V_assign_proc : process(ap_start, ap_CS_fsm_state1, state_orig_issued_V_s_load_fu_98_p1, rev2_fu_126_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_1)) then 
                state_orig_done_V <= rev2_fu_126_p2;
            elsif ((state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_0)) then 
                state_orig_done_V <= ap_const_lv1_0;
            else 
                state_orig_done_V <= "X";
            end if;
        else 
            state_orig_done_V <= "X";
        end if; 
    end process;


    state_orig_done_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, state_orig_issued_V_s_load_fu_98_p1)
    begin
        if ((((ap_start = ap_const_logic_1) and (state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (state_orig_issued_V_s_load_fu_98_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_orig_done_V_ap_vld <= ap_const_logic_1;
        else 
            state_orig_done_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_orig_issued_V_s_load_fu_98_p1 <= state_orig_issued_V;
    tmp_1_fu_224_p2 <= "1" when (bmc_in_q0 = state_orig_out_V_0) else "0";
    tmp_2_fu_234_p2 <= "1" when (bmc_in_q1 = state_orig_out_V_1) else "0";
    tmp_3_fu_252_p2 <= "1" when (unsigned(state_out_count_V_lo_reg_303) > unsigned(state_dup_in_V)) else "0";
    tmp_4_fu_256_p2 <= std_logic_vector(unsigned(state_out_count_V_lo_reg_303) + unsigned(ap_const_lv16_1));
    tmp_not_fu_138_p2 <= "0" when (state_out_count_V = state_orig_in_V) else "1";
    tmp_s_fu_170_p2 <= "1" when (state_out_count_V_lo_reg_303 = state_dup_in_V) else "0";
    ult_fu_120_p2 <= "1" when (unsigned(state_out_count_V) < unsigned(state_orig_in_V)) else "0";
    val_assign_5_fu_240_p2 <= (tmp_2_fu_234_p2 and tmp_1_fu_224_p2);
end behav;
