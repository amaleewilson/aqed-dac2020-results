-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes256_encrypt_ecb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    k_ce0 : OUT STD_LOGIC;
    k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of aes256_encrypt_ecb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_169 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_reg_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf1_reg_190 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_reg_200 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_2_reg_211 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf13_2_reg_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i1_reg_233 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_4_reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf13_4_reg_255 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i7_reg_266 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_fu_283_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_s_fu_289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_487 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_10_fu_300_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_304_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_508 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_i_14_fu_314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_14_reg_513 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_i_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_i_reg_523 : STD_LOGIC_VECTOR (63 downto 0);
    signal buf_1_fu_347_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal buf13_1_fu_354_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i2_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal tmp_11_fu_367_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_371_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal buf_3_fu_390_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal buf13_3_fu_397_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i8_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i8_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state11_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal tmp_12_fu_410_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_414_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_584 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal buf_5_fu_442_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal buf13_5_fu_449_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state11 : STD_LOGIC;
    signal ctx_body_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_body_key_ce0 : STD_LOGIC;
    signal ctx_body_key_we0 : STD_LOGIC;
    signal ctx_body_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_body_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_body_key_ce1 : STD_LOGIC;
    signal ctx_body_key_we1 : STD_LOGIC;
    signal ctx_body_enckey_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_body_enckey_ce0 : STD_LOGIC;
    signal ctx_body_enckey_we0 : STD_LOGIC;
    signal ctx_body_enckey_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ctx_body_enckey_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ctx_body_enckey_ce1 : STD_LOGIC;
    signal ctx_body_enckey_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_i_i_phi_fu_204_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_buf_2_phi_fu_214_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_buf13_2_phi_fu_225_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_i_i7_phi_fu_270_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_26_i_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i9_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_fu_310_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_i_cast_fu_319_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_29_i_fu_323_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal buf_load_i_phi_fu_334_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_i_fu_341_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_load_i5_phi_fu_377_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_4_cast_fu_420_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_load_i13_phi_fu_429_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_i_fu_436_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component aes256_encrypt_ecbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_eccud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component aes256_encrypt_ecdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component aes256_encrypt_ecbkb
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0);

    ctx_body_key_U : component aes256_encrypt_eccud
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ctx_body_key_address0,
        ce0 => ctx_body_key_ce0,
        we0 => ctx_body_key_we0,
        d0 => ctx_body_enckey_q0,
        q0 => ctx_body_key_q0,
        address1 => ctx_body_key_address1,
        ce1 => ctx_body_key_ce1,
        we1 => ctx_body_key_we1,
        d1 => ctx_body_enckey_q1);

    ctx_body_enckey_U : component aes256_encrypt_ecdEe
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ctx_body_enckey_address0,
        ce0 => ctx_body_enckey_ce0,
        we0 => ctx_body_enckey_we0,
        d0 => k_q0,
        q0 => ctx_body_enckey_q0,
        address1 => ctx_body_enckey_address1,
        ce1 => ctx_body_enckey_ce1,
        q1 => ctx_body_enckey_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state11))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buf13_2_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                buf13_2_reg_222 <= buf1_reg_190;
            elsif (((tmp_i2_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                buf13_2_reg_222 <= buf13_3_fu_397_p3;
            end if; 
        end if;
    end process;

    buf13_4_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                buf13_4_reg_255 <= buf13_2_reg_222;
            elsif (((tmp_i8_reg_573 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                buf13_4_reg_255 <= buf13_5_fu_449_p3;
            end if; 
        end if;
    end process;

    buf1_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                buf1_reg_190 <= p_read1;
            elsif (((tmp_i_reg_497 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                buf1_reg_190 <= buf13_1_fu_354_p3;
            end if; 
        end if;
    end process;

    buf_2_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                buf_2_reg_211 <= buf_reg_180;
            elsif (((tmp_i2_reg_543 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                buf_2_reg_211 <= buf_3_fu_390_p3;
            end if; 
        end if;
    end process;

    buf_4_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                buf_4_reg_244 <= buf_2_reg_211;
            elsif (((tmp_i8_reg_573 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                buf_4_reg_244 <= buf_5_fu_442_p3;
            end if; 
        end if;
    end process;

    buf_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                buf_reg_180 <= p_read;
            elsif (((tmp_i_reg_497 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                buf_reg_180 <= buf_1_fu_347_p3;
            end if; 
        end if;
    end process;

    i_i1_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_i1_reg_233 <= ap_const_lv2_2;
            elsif (((tmp_i2_fu_361_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_i1_reg_233 <= i_3_fu_371_p2;
            end if; 
        end if;
    end process;

    i_i7_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_i7_reg_266 <= ap_const_lv2_2;
            elsif (((tmp_i8_reg_573 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_i7_reg_266 <= i_4_reg_584;
            end if; 
        end if;
    end process;

    i_i_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_reg_200 <= ap_const_lv2_2;
            elsif (((tmp_i_reg_497 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_i_reg_200 <= i_2_reg_508;
            end if; 
        end if;
    end process;

    i_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_fu_277_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_169 <= i_1_fu_283_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_169 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_294_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_2_reg_508 <= i_2_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i8_fu_404_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                i_4_reg_584 <= i_4_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_10_reg_501 <= tmp_10_fu_300_p1;
                    tmp_30_i_reg_523(4 downto 0) <= tmp_30_i_fu_329_p1(4 downto 0);
                    tmp_i_14_reg_513(7 downto 0) <= tmp_i_14_fu_314_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i2_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_11_reg_547 <= tmp_11_fu_367_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i8_fu_404_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                tmp_12_reg_577 <= tmp_12_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_i2_reg_543 <= tmp_i2_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                tmp_i8_reg_573 <= tmp_i8_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_i_reg_497 <= tmp_i_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_478 <= tmp_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_fu_277_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    tmp_s_reg_487(5 downto 0) <= tmp_s_fu_289_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_s_reg_487(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    tmp_i_14_reg_513(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_30_i_reg_523(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_277_p2, ap_enable_reg_pp0_iter0, tmp_i_fu_294_p2, ap_enable_reg_pp1_iter0, tmp_i2_fu_361_p2, ap_enable_reg_pp2_iter0, tmp_i8_fu_404_p2, ap_enable_reg_pp3_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((tmp_fu_277_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((tmp_fu_277_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_i_fu_294_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_i_fu_294_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_i2_fu_361_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (tmp_i2_fu_361_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (tmp_i8_fu_404_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (tmp_i8_fu_404_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_fu_277_p2)
    begin
        if ((tmp_fu_277_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(tmp_i_fu_294_p2)
    begin
        if ((tmp_i_fu_294_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state8_assign_proc : process(tmp_i2_fu_361_p2)
    begin
        if ((tmp_i2_fu_361_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state11_assign_proc : process(tmp_i8_fu_404_p2)
    begin
        if ((tmp_i8_fu_404_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_buf13_2_phi_fu_225_p4_assign_proc : process(buf13_2_reg_222, tmp_i2_reg_543, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, buf13_3_fu_397_p3, ap_block_pp2_stage0)
    begin
        if (((tmp_i2_reg_543 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_buf13_2_phi_fu_225_p4 <= buf13_3_fu_397_p3;
        else 
            ap_phi_mux_buf13_2_phi_fu_225_p4 <= buf13_2_reg_222;
        end if; 
    end process;


    ap_phi_mux_buf_2_phi_fu_214_p4_assign_proc : process(buf_2_reg_211, tmp_i2_reg_543, ap_CS_fsm_pp2_stage0, buf_3_fu_390_p3, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((tmp_i2_reg_543 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_buf_2_phi_fu_214_p4 <= buf_3_fu_390_p3;
        else 
            ap_phi_mux_buf_2_phi_fu_214_p4 <= buf_2_reg_211;
        end if; 
    end process;


    ap_phi_mux_i_i7_phi_fu_270_p4_assign_proc : process(i_i7_reg_266, tmp_i8_reg_573, ap_CS_fsm_pp3_stage0, i_4_reg_584, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((tmp_i8_reg_573 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_i_i7_phi_fu_270_p4 <= i_4_reg_584;
        else 
            ap_phi_mux_i_i7_phi_fu_270_p4 <= i_i7_reg_266;
        end if; 
    end process;


    ap_phi_mux_i_i_phi_fu_204_p4_assign_proc : process(i_i_reg_200, tmp_i_reg_497, ap_CS_fsm_pp1_stage0, i_2_reg_508, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((tmp_i_reg_497 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_i_i_phi_fu_204_p4 <= i_2_reg_508;
        else 
            ap_phi_mux_i_i_phi_fu_204_p4 <= i_i_reg_200;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= buf_4_reg_244;
    ap_return_1 <= buf13_4_reg_255;
    buf13_1_fu_354_p3 <= 
        buf1_reg_190 when (tmp_10_reg_501(0) = '1') else 
        tmp_27_i_fu_341_p2;
    buf13_3_fu_397_p3 <= 
        buf13_2_reg_222 when (tmp_11_reg_547(0) = '1') else 
        sbox_q0;
    buf13_5_fu_449_p3 <= 
        buf13_4_reg_255 when (tmp_12_reg_577(0) = '1') else 
        tmp_31_i_fu_436_p2;
    buf_1_fu_347_p3 <= 
        tmp_27_i_fu_341_p2 when (tmp_10_reg_501(0) = '1') else 
        buf_reg_180;
    buf_3_fu_390_p3 <= 
        sbox_q0 when (tmp_11_reg_547(0) = '1') else 
        buf_2_reg_211;
    buf_5_fu_442_p3 <= 
        tmp_31_i_fu_436_p2 when (tmp_12_reg_577(0) = '1') else 
        buf_4_reg_244;
    buf_load_i13_phi_fu_429_p3 <= 
        buf_4_reg_244 when (tmp_12_reg_577(0) = '1') else 
        buf13_4_reg_255;
    buf_load_i5_phi_fu_377_p3 <= 
        ap_phi_mux_buf_2_phi_fu_214_p4 when (tmp_11_fu_367_p1(0) = '1') else 
        ap_phi_mux_buf13_2_phi_fu_225_p4;
    buf_load_i_phi_fu_334_p3 <= 
        buf_reg_180 when (tmp_10_reg_501(0) = '1') else 
        buf1_reg_190;

    ctx_body_enckey_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_s_reg_487, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_i_14_fu_314_p1, ap_enable_reg_pp0_iter1, ap_block_pp1_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ctx_body_enckey_address0 <= tmp_i_14_fu_314_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ctx_body_enckey_address0 <= tmp_s_reg_487(5 - 1 downto 0);
        else 
            ctx_body_enckey_address0 <= "XXXXX";
        end if; 
    end process;

    ctx_body_enckey_address1 <= tmp_30_i_fu_329_p1(5 - 1 downto 0);

    ctx_body_enckey_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            ctx_body_enckey_ce0 <= ap_const_logic_1;
        else 
            ctx_body_enckey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_body_enckey_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            ctx_body_enckey_ce1 <= ap_const_logic_1;
        else 
            ctx_body_enckey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_body_enckey_we0_assign_proc : process(tmp_reg_478, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_reg_478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ctx_body_enckey_we0 <= ap_const_logic_1;
        else 
            ctx_body_enckey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_body_key_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, tmp_i_14_reg_513, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp1_stage0, ap_block_pp3_stage0, tmp_i9_fu_424_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ctx_body_key_address0 <= tmp_i9_fu_424_p1(5 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ctx_body_key_address0 <= tmp_i_14_reg_513(5 - 1 downto 0);
        else 
            ctx_body_key_address0 <= "XXXXX";
        end if; 
    end process;

    ctx_body_key_address1 <= tmp_30_i_reg_523(5 - 1 downto 0);

    ctx_body_key_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            ctx_body_key_ce0 <= ap_const_logic_1;
        else 
            ctx_body_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_body_key_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            ctx_body_key_ce1 <= ap_const_logic_1;
        else 
            ctx_body_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_body_key_we0_assign_proc : process(tmp_i_reg_497, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((tmp_i_reg_497 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            ctx_body_key_we0 <= ap_const_logic_1;
        else 
            ctx_body_key_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctx_body_key_we1_assign_proc : process(tmp_i_reg_497, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((tmp_i_reg_497 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            ctx_body_key_we1 <= ap_const_logic_1;
        else 
            ctx_body_key_we1 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_283_p2 <= std_logic_vector(unsigned(i_reg_169) + unsigned(ap_const_lv6_1));
        i_2_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_2_fu_304_p2),8));

    i_2_fu_304_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(ap_phi_mux_i_i_phi_fu_204_p4));
    i_3_fu_371_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(i_i1_reg_233));
        i_4_cast_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_4_fu_414_p2),8));

    i_4_fu_414_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(ap_phi_mux_i_i7_phi_fu_270_p4));
    k_address0 <= tmp_s_fu_289_p1(5 - 1 downto 0);

    k_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            k_ce0 <= ap_const_logic_1;
        else 
            k_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sbox_address0 <= tmp_26_i_fu_385_p1(8 - 1 downto 0);

    sbox_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_300_p1 <= ap_phi_mux_i_i_phi_fu_204_p4(1 - 1 downto 0);
    tmp_11_fu_367_p1 <= i_i1_reg_233(1 - 1 downto 0);
    tmp_12_fu_410_p1 <= ap_phi_mux_i_i7_phi_fu_270_p4(1 - 1 downto 0);
    tmp_26_i_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(buf_load_i5_phi_fu_377_p3),64));
    tmp_27_i_fu_341_p2 <= (ctx_body_enckey_q0 xor buf_load_i_phi_fu_334_p3);
        tmp_28_i_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_2_fu_304_p2),5));

    tmp_29_i_fu_323_p2 <= (tmp_28_i_cast_fu_319_p1 xor ap_const_lv5_10);
    tmp_30_i_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_i_fu_323_p2),64));
    tmp_31_i_fu_436_p2 <= (ctx_body_key_q0 xor buf_load_i13_phi_fu_429_p3);
    tmp_fu_277_p2 <= "1" when (i_reg_169 = ap_const_lv6_20) else "0";
    tmp_i2_fu_361_p2 <= "1" when (i_i1_reg_233 = ap_const_lv2_0) else "0";
    tmp_i8_fu_404_p2 <= "1" when (ap_phi_mux_i_i7_phi_fu_270_p4 = ap_const_lv2_0) else "0";
    tmp_i9_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_cast_fu_420_p1),64));
    tmp_i_14_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_cast_fu_310_p1),64));
    tmp_i_fu_294_p2 <= "1" when (ap_phi_mux_i_i_phi_fu_204_p4 = ap_const_lv2_0) else "0";
    tmp_s_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_169),64));
end behav;
