// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module workload (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_address0,
        data_ce0,
        data_we0,
        data_d0,
        data_q0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] data_address0;
output   data_ce0;
output   data_we0;
output  [7:0] data_d0;
input  [7:0] data_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] data_address0;
reg data_ce0;
reg data_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] local_key_0_q0;
wire   [7:0] local_key_1_q0;
wire   [5:0] j_2_fu_469_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] j_4_fu_481_p2;
reg   [1:0] j_4_reg_690;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_1_fu_487_p1;
reg   [0:0] tmp_1_reg_695;
wire   [0:0] exitcond3_fu_475_p2;
wire   [2:0] tmp_2_fu_491_p3;
reg   [2:0] tmp_2_reg_699;
wire   [2:0] k_2_fu_505_p2;
reg   [2:0] k_2_reg_707;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond5_fu_499_p2;
wire   [1:0] tmp_10_fu_521_p1;
reg   [1:0] tmp_10_reg_717;
wire    ap_CS_fsm_state7;
reg   [7:0] buf_0_0_3_reg_729;
wire    ap_CS_fsm_state9;
wire    grp_aes256_encrypt_ecb_fu_439_ap_ready;
wire    grp_aes256_encrypt_ecb_fu_439_ap_done;
wire    grp_aes256_encrypt_ecb_fu_451_ap_ready;
wire    grp_aes256_encrypt_ecb_fu_451_ap_done;
reg    ap_block_state9_on_subcall_done;
reg   [7:0] buf_0_1_3_reg_735;
reg   [7:0] buf_1_0_3_reg_741;
reg   [7:0] buf_1_1_3_reg_747;
wire   [1:0] j_5_fu_567_p2;
reg   [1:0] j_5_reg_756;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_7_fu_573_p1;
reg   [0:0] tmp_7_reg_761;
wire   [0:0] exitcond6_fu_561_p2;
wire   [2:0] tmp_9_fu_577_p3;
reg   [2:0] tmp_9_reg_766;
wire   [2:0] k_3_fu_591_p2;
wire    ap_CS_fsm_state11;
wire    grp_aes256_encrypt_ecb_fu_439_ap_start;
wire    grp_aes256_encrypt_ecb_fu_439_ap_idle;
wire   [4:0] grp_aes256_encrypt_ecb_fu_439_k_address0;
wire    grp_aes256_encrypt_ecb_fu_439_k_ce0;
wire   [7:0] grp_aes256_encrypt_ecb_fu_439_ap_return_0;
wire   [7:0] grp_aes256_encrypt_ecb_fu_439_ap_return_1;
wire    grp_aes256_encrypt_ecb_fu_451_ap_start;
wire    grp_aes256_encrypt_ecb_fu_451_ap_idle;
wire   [4:0] grp_aes256_encrypt_ecb_fu_451_k_address0;
wire    grp_aes256_encrypt_ecb_fu_451_k_ce0;
wire   [7:0] grp_aes256_encrypt_ecb_fu_451_ap_return_0;
wire   [7:0] grp_aes256_encrypt_ecb_fu_451_ap_return_1;
reg   [5:0] j_reg_111;
wire   [0:0] exitcond2_fu_463_p2;
reg   [7:0] buf_1_1_reg_122;
reg   [7:0] buf_1_0_reg_134;
reg   [7:0] buf_0_1_reg_146;
reg   [7:0] buf_0_0_reg_158;
wire   [0:0] ap_phi_mux_i_2_phi_fu_175_p4;
reg   [0:0] i_2_reg_170;
wire    ap_CS_fsm_state3;
reg   [7:0] buf_1_1_1_reg_183;
wire    ap_CS_fsm_state4;
reg   [7:0] buf_1_0_1_reg_194;
reg   [7:0] buf_0_1_1_reg_205;
reg   [7:0] buf_0_0_1_reg_216;
reg   [1:0] j_1_reg_227;
reg   [7:0] buf_1_1_2_reg_238;
wire    ap_CS_fsm_state8;
reg   [7:0] buf_1_0_2_reg_250;
reg   [7:0] buf_0_1_2_reg_262;
reg   [7:0] buf_0_0_2_reg_274;
reg   [2:0] k_reg_286;
reg   [7:0] buf_1_1_2_be_reg_297;
reg   [7:0] buf_1_0_2_be_reg_327;
reg   [7:0] buf_0_1_2_be_reg_357;
reg   [7:0] buf_0_0_2_be_reg_387;
reg   [1:0] j_3_reg_417;
wire   [0:0] exitcond_fu_585_p2;
reg   [2:0] k_1_reg_428;
reg    grp_aes256_encrypt_ecb_fu_439_ap_start_reg;
reg    grp_aes256_encrypt_ecb_fu_451_ap_start_reg;
wire   [63:0] sum_cast_fu_516_p1;
wire   [63:0] sum2_cast_fu_650_p1;
reg   [7:0] buf_1_3_fu_74;
reg   [7:0] buf_1_3_1_fu_78;
reg   [7:0] buf_1_3_2_fu_82;
reg   [7:0] buf_1_3_3_fu_86;
wire   [2:0] tmp1_fu_511_p2;
wire   [1:0] tmp_11_fu_609_p1;
wire   [7:0] tmp_3_fu_613_p6;
wire   [7:0] tmp_8_fu_625_p6;
wire   [2:0] tmp9_fu_645_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_aes256_encrypt_ecb_fu_439_ap_start_reg = 1'b0;
#0 grp_aes256_encrypt_ecb_fu_451_ap_start_reg = 1'b0;
end

workload_local_key_0 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
local_key_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_aes256_encrypt_ecb_fu_439_k_address0),
    .ce0(grp_aes256_encrypt_ecb_fu_439_k_ce0),
    .q0(local_key_0_q0)
);

workload_local_key_0 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
local_key_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_aes256_encrypt_ecb_fu_451_k_address0),
    .ce0(grp_aes256_encrypt_ecb_fu_451_k_ce0),
    .q0(local_key_1_q0)
);

aes256_encrypt_ecb grp_aes256_encrypt_ecb_fu_439(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes256_encrypt_ecb_fu_439_ap_start),
    .ap_done(grp_aes256_encrypt_ecb_fu_439_ap_done),
    .ap_idle(grp_aes256_encrypt_ecb_fu_439_ap_idle),
    .ap_ready(grp_aes256_encrypt_ecb_fu_439_ap_ready),
    .k_address0(grp_aes256_encrypt_ecb_fu_439_k_address0),
    .k_ce0(grp_aes256_encrypt_ecb_fu_439_k_ce0),
    .k_q0(local_key_0_q0),
    .p_read(buf_0_0_1_reg_216),
    .p_read1(buf_0_1_1_reg_205),
    .ap_return_0(grp_aes256_encrypt_ecb_fu_439_ap_return_0),
    .ap_return_1(grp_aes256_encrypt_ecb_fu_439_ap_return_1)
);

aes256_encrypt_ecb grp_aes256_encrypt_ecb_fu_451(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aes256_encrypt_ecb_fu_451_ap_start),
    .ap_done(grp_aes256_encrypt_ecb_fu_451_ap_done),
    .ap_idle(grp_aes256_encrypt_ecb_fu_451_ap_idle),
    .ap_ready(grp_aes256_encrypt_ecb_fu_451_ap_ready),
    .k_address0(grp_aes256_encrypt_ecb_fu_451_k_address0),
    .k_ce0(grp_aes256_encrypt_ecb_fu_451_k_ce0),
    .k_q0(local_key_1_q0),
    .p_read(buf_1_0_1_reg_194),
    .p_read1(buf_1_1_1_reg_183),
    .ap_return_0(grp_aes256_encrypt_ecb_fu_451_ap_return_0),
    .ap_return_1(grp_aes256_encrypt_ecb_fu_451_ap_return_1)
);

aqed_top_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
aqed_top_mux_42_8_1_1_U20(
    .din0(buf_1_0_3_reg_741),
    .din1(buf_1_1_3_reg_747),
    .din2(buf_1_3_2_fu_82),
    .din3(buf_1_3_3_fu_86),
    .din4(tmp_11_fu_609_p1),
    .dout(tmp_3_fu_613_p6)
);

aqed_top_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
aqed_top_mux_42_8_1_1_U21(
    .din0(buf_0_0_3_reg_729),
    .din1(buf_0_1_3_reg_735),
    .din2(buf_1_3_fu_74),
    .din3(buf_1_3_1_fu_78),
    .din4(tmp_11_fu_609_p1),
    .dout(tmp_8_fu_625_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes256_encrypt_ecb_fu_439_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond3_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_aes256_encrypt_ecb_fu_439_ap_start_reg <= 1'b1;
        end else if ((grp_aes256_encrypt_ecb_fu_439_ap_ready == 1'b1)) begin
            grp_aes256_encrypt_ecb_fu_439_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_aes256_encrypt_ecb_fu_451_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond3_fu_475_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_aes256_encrypt_ecb_fu_451_ap_start_reg <= 1'b1;
        end else if ((grp_aes256_encrypt_ecb_fu_451_ap_ready == 1'b1)) begin
            grp_aes256_encrypt_ecb_fu_451_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        buf_0_0_1_reg_216 <= buf_0_0_2_reg_274;
    end else if (((ap_phi_mux_i_2_phi_fu_175_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buf_0_0_1_reg_216 <= buf_0_0_reg_158;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_717 == 2'd0) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        buf_0_0_2_be_reg_387 <= data_q0;
    end else if ((((tmp_10_reg_717 == 2'd1) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd2) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd3) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd0) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd1) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd2) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd3) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        buf_0_0_2_be_reg_387 <= buf_0_0_2_reg_274;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_0_0_2_reg_274 <= buf_0_0_2_be_reg_387;
    end else if (((exitcond3_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        buf_0_0_2_reg_274 <= buf_0_0_1_reg_216;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        buf_0_1_1_reg_205 <= buf_0_1_2_reg_262;
    end else if (((ap_phi_mux_i_2_phi_fu_175_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buf_0_1_1_reg_205 <= buf_0_1_reg_146;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_717 == 2'd1) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        buf_0_1_2_be_reg_357 <= data_q0;
    end else if ((((tmp_10_reg_717 == 2'd0) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd2) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd3) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd0) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd1) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd2) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd3) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        buf_0_1_2_be_reg_357 <= buf_0_1_2_reg_262;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_0_1_2_reg_262 <= buf_0_1_2_be_reg_357;
    end else if (((exitcond3_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        buf_0_1_2_reg_262 <= buf_0_1_1_reg_205;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        buf_1_0_1_reg_194 <= buf_1_0_2_reg_250;
    end else if (((ap_phi_mux_i_2_phi_fu_175_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buf_1_0_1_reg_194 <= buf_1_0_reg_134;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_717 == 2'd0) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        buf_1_0_2_be_reg_327 <= data_q0;
    end else if ((((tmp_10_reg_717 == 2'd0) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd1) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd2) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd3) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd1) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd2) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd3) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        buf_1_0_2_be_reg_327 <= buf_1_0_2_reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_1_0_2_reg_250 <= buf_1_0_2_be_reg_327;
    end else if (((exitcond3_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        buf_1_0_2_reg_250 <= buf_1_0_1_reg_194;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        buf_1_1_1_reg_183 <= buf_1_1_2_reg_238;
    end else if (((ap_phi_mux_i_2_phi_fu_175_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        buf_1_1_1_reg_183 <= buf_1_1_reg_122;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_717 == 2'd1) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        buf_1_1_2_be_reg_297 <= data_q0;
    end else if ((((tmp_10_reg_717 == 2'd0) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd1) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd2) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd3) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd0) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd2) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((tmp_10_reg_717 == 2'd3) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7)))) begin
        buf_1_1_2_be_reg_297 <= buf_1_1_2_reg_238;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_1_1_2_reg_238 <= buf_1_1_2_be_reg_297;
    end else if (((exitcond3_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        buf_1_1_2_reg_238 <= buf_1_1_1_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_170 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_561_p2 == 1'd1))) begin
        i_2_reg_170 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        j_1_reg_227 <= j_4_reg_690;
    end else if (((ap_phi_mux_i_2_phi_fu_175_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_1_reg_227 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        j_3_reg_417 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_585_p2 == 1'd1))) begin
        j_3_reg_417 <= j_5_reg_756;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_111 <= 6'd0;
    end else if (((exitcond2_fu_463_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_111 <= j_2_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_585_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        k_1_reg_428 <= k_3_fu_591_p2;
    end else if (((exitcond6_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        k_1_reg_428 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_reg_286 <= k_2_reg_707;
    end else if (((exitcond3_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_reg_286 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
        buf_0_0_3_reg_729 <= grp_aes256_encrypt_ecb_fu_439_ap_return_0;
        buf_0_1_3_reg_735 <= grp_aes256_encrypt_ecb_fu_439_ap_return_1;
        buf_1_0_3_reg_741 <= grp_aes256_encrypt_ecb_fu_451_ap_return_0;
        buf_1_1_3_reg_747 <= grp_aes256_encrypt_ecb_fu_451_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_561_p2 == 1'd1))) begin
        buf_0_0_reg_158 <= buf_0_0_3_reg_729;
        buf_0_1_reg_146 <= buf_0_1_3_reg_735;
        buf_1_0_reg_134 <= buf_1_0_3_reg_741;
        buf_1_1_reg_122 <= buf_1_1_3_reg_747;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_717 == 2'd3) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        buf_1_3_1_fu_78 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_717 == 2'd2) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        buf_1_3_2_fu_82 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_717 == 2'd3) & (tmp_1_reg_695 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        buf_1_3_3_fu_86 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_717 == 2'd2) & (tmp_1_reg_695 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        buf_1_3_fu_74 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_4_reg_690 <= j_4_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_5_reg_756 <= j_5_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_2_reg_707 <= k_2_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_499_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_10_reg_717 <= tmp_10_fu_521_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_1_reg_695 <= tmp_1_fu_487_p1;
        tmp_2_reg_699[2] <= tmp_2_fu_491_p3[2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_561_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_7_reg_761 <= tmp_7_fu_573_p1;
        tmp_9_reg_766[2] <= tmp_9_fu_577_p3[2];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_i_2_phi_fu_175_p4 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_i_2_phi_fu_175_p4 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        data_address0 = sum2_cast_fu_650_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        data_address0 = sum_cast_fu_516_p1;
    end else begin
        data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11))) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_585_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        data_we0 = 1'b1;
    end else begin
        data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_463_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_phi_mux_i_2_phi_fu_175_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond3_fu_475_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond5_fu_499_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond6_fu_561_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_585_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state9_on_subcall_done = ((grp_aes256_encrypt_ecb_fu_451_ap_done == 1'b0) | (grp_aes256_encrypt_ecb_fu_439_ap_done == 1'b0));
end

assign ap_phi_mux_i_2_phi_fu_175_p4 = i_2_reg_170;

assign data_d0 = ((tmp_7_reg_761[0:0] === 1'b1) ? tmp_3_fu_613_p6 : tmp_8_fu_625_p6);

assign exitcond2_fu_463_p2 = ((j_reg_111 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond3_fu_475_p2 = ((j_1_reg_227 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond5_fu_499_p2 = ((k_reg_286 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond6_fu_561_p2 = ((j_3_reg_417 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond_fu_585_p2 = ((k_1_reg_428 == 3'd4) ? 1'b1 : 1'b0);

assign grp_aes256_encrypt_ecb_fu_439_ap_start = grp_aes256_encrypt_ecb_fu_439_ap_start_reg;

assign grp_aes256_encrypt_ecb_fu_451_ap_start = grp_aes256_encrypt_ecb_fu_451_ap_start_reg;

assign j_2_fu_469_p2 = (j_reg_111 + 6'd1);

assign j_4_fu_481_p2 = (j_1_reg_227 + 2'd1);

assign j_5_fu_567_p2 = (j_3_reg_417 + 2'd1);

assign k_2_fu_505_p2 = (k_reg_286 + 3'd1);

assign k_3_fu_591_p2 = (k_1_reg_428 + 3'd1);

assign sum2_cast_fu_650_p1 = tmp9_fu_645_p2;

assign sum_cast_fu_516_p1 = tmp1_fu_511_p2;

assign tmp1_fu_511_p2 = (tmp_2_reg_699 + k_reg_286);

assign tmp9_fu_645_p2 = (tmp_9_reg_766 + k_1_reg_428);

assign tmp_10_fu_521_p1 = k_reg_286[1:0];

assign tmp_11_fu_609_p1 = k_1_reg_428[1:0];

assign tmp_1_fu_487_p1 = j_1_reg_227[0:0];

assign tmp_2_fu_491_p3 = {{tmp_1_fu_487_p1}, {2'd0}};

assign tmp_7_fu_573_p1 = j_3_reg_417[0:0];

assign tmp_9_fu_577_p3 = {{tmp_7_fu_573_p1}, {2'd0}};

always @ (posedge ap_clk) begin
    tmp_2_reg_699[1:0] <= 2'b00;
    tmp_9_reg_766[1:0] <= 2'b00;
end

endmodule //workload
