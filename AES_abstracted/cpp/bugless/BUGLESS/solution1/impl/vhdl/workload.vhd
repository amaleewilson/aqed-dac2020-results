-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity workload is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_we0 : OUT STD_LOGIC;
    data_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_offset : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of workload is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal local_key_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_key_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_2_fu_379_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_4_fu_391_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_4_reg_580 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_1_fu_397_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_585 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_401_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_589 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_2_fu_413_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_2_reg_597 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond5_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_438_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_1_1_7_fu_442_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal buf_1_1_8_fu_449_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_1_4_fu_456_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_1_6_fu_463_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_3_reg_635 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_aes256_encrypt_ecb_fu_349_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_349_ap_done : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_361_ap_ready : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_361_ap_done : STD_LOGIC;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal buf_0_1_3_reg_641 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_0_3_reg_647 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_1_3_reg_653 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_5_fu_492_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_5_reg_662 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_5_fu_498_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond6_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_502_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_reg_672 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_3_fu_514_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_aes256_encrypt_ecb_fu_349_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_349_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_349_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_349_k_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_349_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_349_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_361_ap_start : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_361_ap_idle : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_361_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_aes256_encrypt_ecb_fu_361_k_ce0 : STD_LOGIC;
    signal grp_aes256_encrypt_ecb_fu_361_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aes256_encrypt_ecb_fu_361_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_93 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_1_1_reg_104 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_0_reg_116 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_1_reg_128 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_reg_140 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_2_phi_fu_157_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_152 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal buf_1_1_1_reg_165 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal buf_1_0_1_reg_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_1_1_reg_187 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_1_reg_198 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_1_2_reg_220 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal buf_1_0_2_reg_232 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_1_2_reg_244 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_2_reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_268 : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_1_1_2_be_reg_279 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_1_0_2_be_reg_291 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_1_2_be_reg_303 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_0_2_be_reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_3_reg_327 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_1_reg_338 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_aes256_encrypt_ecb_fu_349_ap_start_reg : STD_LOGIC := '0';
    signal grp_aes256_encrypt_ecb_fu_361_ap_start_reg : STD_LOGIC := '0';
    signal sum_cast_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp8_fu_419_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp8_cast_fu_424_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_fu_428_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_520_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_1_load_phi_fu_524_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal buf_0_load_phi_fu_530_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_544_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp10_cast_fu_549_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum2_fu_553_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component aes256_encrypt_ecb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        k_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        k_ce0 : OUT STD_LOGIC;
        k_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component workload_local_key_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    local_key_0_U : component workload_local_key_0
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_aes256_encrypt_ecb_fu_349_k_address0,
        ce0 => grp_aes256_encrypt_ecb_fu_349_k_ce0,
        q0 => local_key_0_q0);

    local_key_1_U : component workload_local_key_0
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_aes256_encrypt_ecb_fu_361_k_address0,
        ce0 => grp_aes256_encrypt_ecb_fu_361_k_ce0,
        q0 => local_key_1_q0);

    grp_aes256_encrypt_ecb_fu_349 : component aes256_encrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_fu_349_ap_start,
        ap_done => grp_aes256_encrypt_ecb_fu_349_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_fu_349_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_fu_349_ap_ready,
        k_address0 => grp_aes256_encrypt_ecb_fu_349_k_address0,
        k_ce0 => grp_aes256_encrypt_ecb_fu_349_k_ce0,
        k_q0 => local_key_0_q0,
        p_read => buf_0_0_1_reg_198,
        p_read1 => buf_0_1_1_reg_187,
        ap_return_0 => grp_aes256_encrypt_ecb_fu_349_ap_return_0,
        ap_return_1 => grp_aes256_encrypt_ecb_fu_349_ap_return_1);

    grp_aes256_encrypt_ecb_fu_361 : component aes256_encrypt_ecb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aes256_encrypt_ecb_fu_361_ap_start,
        ap_done => grp_aes256_encrypt_ecb_fu_361_ap_done,
        ap_idle => grp_aes256_encrypt_ecb_fu_361_ap_idle,
        ap_ready => grp_aes256_encrypt_ecb_fu_361_ap_ready,
        k_address0 => grp_aes256_encrypt_ecb_fu_361_k_address0,
        k_ce0 => grp_aes256_encrypt_ecb_fu_361_k_ce0,
        k_q0 => local_key_1_q0,
        p_read => buf_1_0_1_reg_176,
        p_read1 => buf_1_1_1_reg_165,
        ap_return_0 => grp_aes256_encrypt_ecb_fu_361_ap_return_0,
        ap_return_1 => grp_aes256_encrypt_ecb_fu_361_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_fu_349_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_fu_349_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond3_fu_385_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_aes256_encrypt_ecb_fu_349_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_fu_349_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_fu_349_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aes256_encrypt_ecb_fu_361_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_aes256_encrypt_ecb_fu_361_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond3_fu_385_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_aes256_encrypt_ecb_fu_361_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aes256_encrypt_ecb_fu_361_ap_ready = ap_const_logic_1)) then 
                    grp_aes256_encrypt_ecb_fu_361_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    buf_0_0_1_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                buf_0_0_1_reg_198 <= buf_0_0_2_reg_256;
            elsif (((ap_phi_mux_i_2_phi_fu_157_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buf_0_0_1_reg_198 <= buf_0_0_reg_140;
            end if; 
        end if;
    end process;

    buf_0_0_2_be_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((tmp_1_reg_585 = ap_const_lv1_0)) then 
                    buf_0_0_2_be_reg_315 <= buf_1_1_8_fu_449_p3;
                elsif ((tmp_1_reg_585 = ap_const_lv1_1)) then 
                    buf_0_0_2_be_reg_315 <= buf_0_0_2_reg_256;
                end if;
            end if; 
        end if;
    end process;

    buf_0_0_2_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buf_0_0_2_reg_256 <= buf_0_0_2_be_reg_315;
            elsif (((exitcond3_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buf_0_0_2_reg_256 <= buf_0_0_1_reg_198;
            end if; 
        end if;
    end process;

    buf_0_1_1_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                buf_0_1_1_reg_187 <= buf_0_1_2_reg_244;
            elsif (((ap_phi_mux_i_2_phi_fu_157_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buf_0_1_1_reg_187 <= buf_0_1_reg_128;
            end if; 
        end if;
    end process;

    buf_0_1_2_be_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((tmp_1_reg_585 = ap_const_lv1_0)) then 
                    buf_0_1_2_be_reg_303 <= buf_1_1_7_fu_442_p3;
                elsif ((tmp_1_reg_585 = ap_const_lv1_1)) then 
                    buf_0_1_2_be_reg_303 <= buf_0_1_2_reg_244;
                end if;
            end if; 
        end if;
    end process;

    buf_0_1_2_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buf_0_1_2_reg_244 <= buf_0_1_2_be_reg_303;
            elsif (((exitcond3_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buf_0_1_2_reg_244 <= buf_0_1_1_reg_187;
            end if; 
        end if;
    end process;

    buf_1_0_1_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                buf_1_0_1_reg_176 <= buf_1_0_2_reg_232;
            elsif (((ap_phi_mux_i_2_phi_fu_157_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buf_1_0_1_reg_176 <= buf_1_0_reg_116;
            end if; 
        end if;
    end process;

    buf_1_0_2_be_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((tmp_1_reg_585 = ap_const_lv1_0)) then 
                    buf_1_0_2_be_reg_291 <= buf_1_0_2_reg_232;
                elsif ((tmp_1_reg_585 = ap_const_lv1_1)) then 
                    buf_1_0_2_be_reg_291 <= buf_1_1_6_fu_463_p3;
                end if;
            end if; 
        end if;
    end process;

    buf_1_0_2_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buf_1_0_2_reg_232 <= buf_1_0_2_be_reg_291;
            elsif (((exitcond3_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buf_1_0_2_reg_232 <= buf_1_0_1_reg_176;
            end if; 
        end if;
    end process;

    buf_1_1_1_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                buf_1_1_1_reg_165 <= buf_1_1_2_reg_220;
            elsif (((ap_phi_mux_i_2_phi_fu_157_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                buf_1_1_1_reg_165 <= buf_1_1_reg_104;
            end if; 
        end if;
    end process;

    buf_1_1_2_be_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((tmp_1_reg_585 = ap_const_lv1_0)) then 
                    buf_1_1_2_be_reg_279 <= buf_1_1_2_reg_220;
                elsif ((tmp_1_reg_585 = ap_const_lv1_1)) then 
                    buf_1_1_2_be_reg_279 <= buf_1_1_4_fu_456_p3;
                end if;
            end if; 
        end if;
    end process;

    buf_1_1_2_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                buf_1_1_2_reg_220 <= buf_1_1_2_be_reg_279;
            elsif (((exitcond3_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                buf_1_1_2_reg_220 <= buf_1_1_1_reg_165;
            end if; 
        end if;
    end process;

    i_2_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_2_reg_152 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_486_p2 = ap_const_lv1_1))) then 
                i_2_reg_152 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    j_1_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_1_reg_209 <= j_4_reg_580;
            elsif (((ap_phi_mux_i_2_phi_fu_157_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_1_reg_209 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_3_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then 
                j_3_reg_327 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_508_p2 = ap_const_lv1_1))) then 
                j_3_reg_327 <= j_5_reg_662;
            end if; 
        end if;
    end process;

    j_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_93 <= ap_const_lv6_0;
            elsif (((exitcond2_fu_373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_93 <= j_2_fu_379_p2;
            end if; 
        end if;
    end process;

    k_1_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                k_1_reg_338 <= k_3_fu_514_p2;
            elsif (((exitcond6_fu_486_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                k_1_reg_338 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_reg_268 <= k_2_reg_597;
            elsif (((exitcond3_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                k_reg_268 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                buf_0_0_3_reg_635 <= grp_aes256_encrypt_ecb_fu_349_ap_return_0;
                buf_0_1_3_reg_641 <= grp_aes256_encrypt_ecb_fu_349_ap_return_1;
                buf_1_0_3_reg_647 <= grp_aes256_encrypt_ecb_fu_361_ap_return_0;
                buf_1_1_3_reg_653 <= grp_aes256_encrypt_ecb_fu_361_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_486_p2 = ap_const_lv1_1))) then
                buf_0_0_reg_140 <= buf_0_0_3_reg_635;
                buf_0_1_reg_128 <= buf_0_1_3_reg_641;
                buf_1_0_reg_116 <= buf_1_0_3_reg_647;
                buf_1_1_reg_104 <= buf_1_1_3_reg_653;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_4_reg_580 <= j_4_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_5_reg_662 <= j_5_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_2_reg_597 <= k_2_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_1_reg_585 <= tmp_1_fu_397_p1;
                    tmp_4_reg_589(1) <= tmp_4_fu_401_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_486_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_5_reg_667 <= tmp_5_fu_498_p1;
                    tmp_6_reg_672(1) <= tmp_6_fu_502_p2(1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_407_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_7_reg_607 <= tmp_7_fu_438_p1;
            end if;
        end if;
    end process;
    tmp_4_reg_589(0) <= '0';
    tmp_6_reg_672(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, exitcond3_fu_385_p2, ap_CS_fsm_state6, exitcond5_fu_407_p2, ap_CS_fsm_state9, ap_block_state9_on_subcall_done, ap_CS_fsm_state10, exitcond6_fu_486_p2, ap_CS_fsm_state11, exitcond2_fu_373_p2, ap_phi_mux_i_2_phi_fu_157_p4, ap_CS_fsm_state4, exitcond_fu_508_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_phi_mux_i_2_phi_fu_157_p4 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond3_fu_385_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond5_fu_407_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_boolean_0 = ap_block_state9_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond6_fu_486_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_508_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state9_on_subcall_done_assign_proc : process(grp_aes256_encrypt_ecb_fu_349_ap_done, grp_aes256_encrypt_ecb_fu_361_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((grp_aes256_encrypt_ecb_fu_361_ap_done = ap_const_logic_0) or (grp_aes256_encrypt_ecb_fu_349_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_phi_mux_i_2_phi_fu_157_p4, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_phi_mux_i_2_phi_fu_157_p4 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_2_phi_fu_157_p4 <= i_2_reg_152;

    ap_ready_assign_proc : process(ap_phi_mux_i_2_phi_fu_157_p4, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_phi_mux_i_2_phi_fu_157_p4 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_0_load_phi_fu_530_p3 <= 
        buf_0_1_3_reg_641 when (tmp_9_fu_520_p1(0) = '1') else 
        buf_0_0_3_reg_635;
    buf_1_1_4_fu_456_p3 <= 
        data_q0 when (tmp_7_reg_607(0) = '1') else 
        buf_1_1_2_reg_220;
    buf_1_1_6_fu_463_p3 <= 
        buf_1_0_2_reg_232 when (tmp_7_reg_607(0) = '1') else 
        data_q0;
    buf_1_1_7_fu_442_p3 <= 
        data_q0 when (tmp_7_reg_607(0) = '1') else 
        buf_0_1_2_reg_244;
    buf_1_1_8_fu_449_p3 <= 
        buf_0_0_2_reg_256 when (tmp_7_reg_607(0) = '1') else 
        data_q0;
    buf_1_load_phi_fu_524_p3 <= 
        buf_1_1_3_reg_653 when (tmp_9_fu_520_p1(0) = '1') else 
        buf_1_0_3_reg_647;

    data_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11, sum_cast_fu_433_p1, sum2_cast_fu_558_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_address0 <= sum2_cast_fu_558_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            data_address0 <= sum_cast_fu_433_p1(4 - 1 downto 0);
        else 
            data_address0 <= "XXXX";
        end if; 
    end process;


    data_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_d0 <= 
        buf_1_load_phi_fu_524_p3 when (tmp_5_reg_667(0) = '1') else 
        buf_0_load_phi_fu_530_p3;

    data_we0_assign_proc : process(ap_CS_fsm_state11, exitcond_fu_508_p2)
    begin
        if (((exitcond_fu_508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            data_we0 <= ap_const_logic_1;
        else 
            data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_373_p2 <= "1" when (j_reg_93 = ap_const_lv6_20) else "0";
    exitcond3_fu_385_p2 <= "1" when (j_1_reg_209 = ap_const_lv2_2) else "0";
    exitcond5_fu_407_p2 <= "1" when (k_reg_268 = ap_const_lv2_2) else "0";
    exitcond6_fu_486_p2 <= "1" when (j_3_reg_327 = ap_const_lv2_2) else "0";
    exitcond_fu_508_p2 <= "1" when (k_1_reg_338 = ap_const_lv2_2) else "0";
    grp_aes256_encrypt_ecb_fu_349_ap_start <= grp_aes256_encrypt_ecb_fu_349_ap_start_reg;
    grp_aes256_encrypt_ecb_fu_361_ap_start <= grp_aes256_encrypt_ecb_fu_361_ap_start_reg;
    j_2_fu_379_p2 <= std_logic_vector(unsigned(j_reg_93) + unsigned(ap_const_lv6_1));
    j_4_fu_391_p2 <= std_logic_vector(unsigned(j_1_reg_209) + unsigned(ap_const_lv2_1));
    j_5_fu_492_p2 <= std_logic_vector(unsigned(j_3_reg_327) + unsigned(ap_const_lv2_1));
    k_2_fu_413_p2 <= std_logic_vector(unsigned(k_reg_268) + unsigned(ap_const_lv2_1));
    k_3_fu_514_p2 <= std_logic_vector(unsigned(k_1_reg_338) + unsigned(ap_const_lv2_1));
    sum2_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_553_p2),64));
    sum2_fu_553_p2 <= std_logic_vector(unsigned(data_offset) + unsigned(tmp10_cast_fu_549_p1));
    sum_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_428_p2),64));
    sum_fu_428_p2 <= std_logic_vector(unsigned(data_offset) + unsigned(tmp8_cast_fu_424_p1));
    tmp10_cast_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_544_p2),4));
    tmp1_fu_544_p2 <= std_logic_vector(unsigned(k_1_reg_338) + unsigned(tmp_6_reg_672));
    tmp8_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp8_fu_419_p2),4));
    tmp8_fu_419_p2 <= std_logic_vector(unsigned(k_reg_268) + unsigned(tmp_4_reg_589));
    tmp_1_fu_397_p1 <= j_1_reg_209(1 - 1 downto 0);
    tmp_4_fu_401_p2 <= std_logic_vector(shift_left(unsigned(j_1_reg_209),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_5_fu_498_p1 <= j_3_reg_327(1 - 1 downto 0);
    tmp_6_fu_502_p2 <= std_logic_vector(shift_left(unsigned(j_3_reg_327),to_integer(unsigned('0' & ap_const_lv2_1(2-1 downto 0)))));
    tmp_7_fu_438_p1 <= k_reg_268(1 - 1 downto 0);
    tmp_9_fu_520_p1 <= k_1_reg_338(1 - 1 downto 0);
end behav;
