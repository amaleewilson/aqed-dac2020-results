// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aes256_encrypt_ecb_HH_
#define _aes256_encrypt_ecb_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "aes256_encrypt_ecb_sbox.h"
#include "aes256_encrypt_ecb_ctx_body_key.h"
#include "aes256_encrypt_ecb_ctx_body_enckey.h"

namespace ap_rtl {

struct aes256_encrypt_ecb : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > k_address0;
    sc_out< sc_logic > k_ce0;
    sc_in< sc_lv<8> > k_q0;
    sc_in< sc_lv<8> > p_read;
    sc_in< sc_lv<8> > p_read1;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;


    // Module declarations
    aes256_encrypt_ecb(sc_module_name name);
    SC_HAS_PROCESS(aes256_encrypt_ecb);

    ~aes256_encrypt_ecb();

    sc_trace_file* mVcdFile;

    aes256_encrypt_ecb_sbox* sbox_U;
    aes256_encrypt_ecb_ctx_body_key* ctx_body_key_U;
    aes256_encrypt_ecb_ctx_body_enckey* ctx_body_enckey_U;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > sbox_address0;
    sc_signal< sc_logic > sbox_ce0;
    sc_signal< sc_lv<8> > sbox_q0;
    sc_signal< sc_lv<6> > i_reg_169;
    sc_signal< sc_lv<8> > buf_2_reg_211;
    sc_signal< sc_lv<8> > buf13_2_reg_222;
    sc_signal< sc_lv<2> > i_i1_reg_233;
    sc_signal< sc_lv<8> > buf_4_reg_244;
    sc_signal< sc_lv<8> > buf13_4_reg_255;
    sc_signal< sc_lv<2> > i_i7_reg_266;
    sc_signal< sc_lv<1> > tmp_fu_277_p2;
    sc_signal< sc_lv<1> > tmp_reg_478;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > i_1_fu_283_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > tmp_s_fu_289_p1;
    sc_signal< sc_lv<64> > tmp_s_reg_487;
    sc_signal< sc_lv<1> > tmp_16_fu_294_p1;
    sc_signal< sc_lv<1> > tmp_16_reg_497;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<2> > i_2_fu_298_p2;
    sc_signal< sc_lv<2> > i_2_reg_504;
    sc_signal< sc_lv<1> > tmp_i_fu_308_p2;
    sc_signal< sc_lv<64> > tmp_i_16_fu_314_p1;
    sc_signal< sc_lv<64> > tmp_i_16_reg_513;
    sc_signal< sc_lv<64> > tmp_46_i_fu_329_p1;
    sc_signal< sc_lv<64> > tmp_46_i_reg_523;
    sc_signal< sc_lv<8> > buf_1_fu_347_p3;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<8> > buf13_1_fu_354_p3;
    sc_signal< sc_lv<1> > tmp_i2_fu_361_p2;
    sc_signal< sc_lv<1> > tmp_i2_reg_543;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state7_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state8_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<1> > tmp_17_fu_367_p1;
    sc_signal< sc_lv<1> > tmp_17_reg_547;
    sc_signal< sc_lv<2> > i_3_fu_371_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<8> > buf_3_fu_390_p3;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<8> > buf13_3_fu_397_p3;
    sc_signal< sc_lv<1> > tmp_i8_fu_404_p2;
    sc_signal< sc_lv<1> > tmp_i8_reg_573;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< bool > ap_block_state10_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state11_pp2_stage0_iter1;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<1> > tmp_18_fu_410_p1;
    sc_signal< sc_lv<1> > tmp_18_reg_577;
    sc_signal< sc_lv<2> > i_4_fu_414_p2;
    sc_signal< sc_lv<2> > i_4_reg_584;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< sc_lv<8> > buf_5_fu_442_p3;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< sc_lv<8> > buf13_5_fu_449_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state7;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state10;
    sc_signal< sc_lv<5> > ctx_body_key_address0;
    sc_signal< sc_logic > ctx_body_key_ce0;
    sc_signal< sc_logic > ctx_body_key_we0;
    sc_signal< sc_lv<8> > ctx_body_key_q0;
    sc_signal< sc_lv<5> > ctx_body_key_address1;
    sc_signal< sc_logic > ctx_body_key_ce1;
    sc_signal< sc_logic > ctx_body_key_we1;
    sc_signal< sc_lv<5> > ctx_body_enckey_address0;
    sc_signal< sc_logic > ctx_body_enckey_ce0;
    sc_signal< sc_logic > ctx_body_enckey_we0;
    sc_signal< sc_lv<8> > ctx_body_enckey_q0;
    sc_signal< sc_lv<5> > ctx_body_enckey_address1;
    sc_signal< sc_logic > ctx_body_enckey_ce1;
    sc_signal< sc_lv<8> > ctx_body_enckey_q1;
    sc_signal< sc_lv<8> > buf_reg_180;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > buf1_reg_190;
    sc_signal< sc_lv<2> > i_i_reg_200;
    sc_signal< sc_lv<8> > ap_phi_mux_buf_2_phi_fu_214_p4;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<8> > ap_phi_mux_buf13_2_phi_fu_225_p4;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<2> > ap_phi_mux_i_i7_phi_fu_270_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > tmp_42_i_fu_385_p1;
    sc_signal< sc_lv<64> > tmp_i9_fu_424_p1;
    sc_signal< sc_lv<8> > i_2_cast_fu_304_p1;
    sc_signal< sc_lv<5> > tmp_44_i_cast_fu_319_p1;
    sc_signal< sc_lv<5> > tmp_45_i_fu_323_p2;
    sc_signal< sc_lv<8> > buf_load_i_phi_fu_334_p3;
    sc_signal< sc_lv<8> > tmp_43_i_fu_341_p2;
    sc_signal< sc_lv<8> > buf_load_i5_phi_fu_377_p3;
    sc_signal< sc_lv<8> > i_4_cast_fu_420_p1;
    sc_signal< sc_lv<8> > buf_load_i13_phi_fu_429_p3;
    sc_signal< sc_lv<8> > tmp_47_i_fu_436_p2;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_pp0_stage0;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_pp1_stage0;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<9> ap_ST_fsm_pp2_stage0;
    static const sc_lv<9> ap_ST_fsm_state12;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_state10_pp2_stage0_iter0();
    void thread_ap_block_state11_pp2_stage0_iter1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state7_pp1_stage0_iter0();
    void thread_ap_block_state8_pp1_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state7();
    void thread_ap_condition_pp2_exit_iter0_state10();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_phi_mux_buf13_2_phi_fu_225_p4();
    void thread_ap_phi_mux_buf_2_phi_fu_214_p4();
    void thread_ap_phi_mux_i_i7_phi_fu_270_p4();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_buf13_1_fu_354_p3();
    void thread_buf13_3_fu_397_p3();
    void thread_buf13_5_fu_449_p3();
    void thread_buf_1_fu_347_p3();
    void thread_buf_3_fu_390_p3();
    void thread_buf_5_fu_442_p3();
    void thread_buf_load_i13_phi_fu_429_p3();
    void thread_buf_load_i5_phi_fu_377_p3();
    void thread_buf_load_i_phi_fu_334_p3();
    void thread_ctx_body_enckey_address0();
    void thread_ctx_body_enckey_address1();
    void thread_ctx_body_enckey_ce0();
    void thread_ctx_body_enckey_ce1();
    void thread_ctx_body_enckey_we0();
    void thread_ctx_body_key_address0();
    void thread_ctx_body_key_address1();
    void thread_ctx_body_key_ce0();
    void thread_ctx_body_key_ce1();
    void thread_ctx_body_key_we0();
    void thread_ctx_body_key_we1();
    void thread_i_1_fu_283_p2();
    void thread_i_2_cast_fu_304_p1();
    void thread_i_2_fu_298_p2();
    void thread_i_3_fu_371_p2();
    void thread_i_4_cast_fu_420_p1();
    void thread_i_4_fu_414_p2();
    void thread_k_address0();
    void thread_k_ce0();
    void thread_sbox_address0();
    void thread_sbox_ce0();
    void thread_tmp_16_fu_294_p1();
    void thread_tmp_17_fu_367_p1();
    void thread_tmp_18_fu_410_p1();
    void thread_tmp_42_i_fu_385_p1();
    void thread_tmp_43_i_fu_341_p2();
    void thread_tmp_44_i_cast_fu_319_p1();
    void thread_tmp_45_i_fu_323_p2();
    void thread_tmp_46_i_fu_329_p1();
    void thread_tmp_47_i_fu_436_p2();
    void thread_tmp_fu_277_p2();
    void thread_tmp_i2_fu_361_p2();
    void thread_tmp_i8_fu_404_p2();
    void thread_tmp_i9_fu_424_p1();
    void thread_tmp_i_16_fu_314_p1();
    void thread_tmp_i_fu_308_p2();
    void thread_tmp_s_fu_289_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
