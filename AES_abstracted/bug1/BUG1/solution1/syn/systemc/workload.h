// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _workload_HH_
#define _workload_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "aes256_encrypt_ecb.h"
#include "workload_local_key_0.h"

namespace ap_rtl {

struct workload : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > data_address0;
    sc_out< sc_logic > data_ce0;
    sc_out< sc_logic > data_we0;
    sc_out< sc_lv<8> > data_d0;
    sc_in< sc_lv<8> > data_q0;
    sc_in< sc_lv<4> > data_offset;


    // Module declarations
    workload(sc_module_name name);
    SC_HAS_PROCESS(workload);

    ~workload();

    sc_trace_file* mVcdFile;

    workload_local_key_0* local_key_0_U;
    workload_local_key_0* local_key_1_U;
    aes256_encrypt_ecb* grp_aes256_encrypt_ecb_fu_359;
    aes256_encrypt_ecb* grp_aes256_encrypt_ecb_fu_371;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > local_key_0_q0;
    sc_signal< sc_lv<8> > local_key_1_q0;
    sc_signal< sc_lv<6> > j_2_fu_389_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<5> > tmp7_cast_fu_395_p1;
    sc_signal< sc_lv<5> > tmp7_cast_reg_593;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > j_4_fu_404_p2;
    sc_signal< sc_lv<2> > j_4_reg_602;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > tmp_1_fu_410_p1;
    sc_signal< sc_lv<1> > tmp_1_reg_607;
    sc_signal< sc_lv<1> > exitcond3_fu_398_p2;
    sc_signal< sc_lv<3> > tmp_2_fu_414_p3;
    sc_signal< sc_lv<3> > tmp_2_reg_611;
    sc_signal< sc_lv<3> > k_2_fu_428_p2;
    sc_signal< sc_lv<3> > k_2_reg_619;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > exitcond5_fu_422_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_453_p1;
    sc_signal< sc_lv<1> > tmp_7_reg_629;
    sc_signal< sc_lv<8> > buf_1_1_7_fu_457_p3;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<8> > buf_1_1_8_fu_464_p3;
    sc_signal< sc_lv<8> > buf_1_1_4_fu_471_p3;
    sc_signal< sc_lv<8> > buf_1_1_6_fu_478_p3;
    sc_signal< sc_lv<8> > buf_0_0_3_reg_657;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_359_ap_ready;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_359_ap_done;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_371_ap_ready;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_371_ap_done;
    sc_signal< bool > ap_block_state9_on_subcall_done;
    sc_signal< sc_lv<8> > buf_0_1_3_reg_663;
    sc_signal< sc_lv<8> > buf_1_0_3_reg_669;
    sc_signal< sc_lv<8> > buf_1_1_3_reg_675;
    sc_signal< sc_lv<2> > j_5_fu_507_p2;
    sc_signal< sc_lv<2> > j_5_reg_684;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<1> > tmp_3_fu_513_p1;
    sc_signal< sc_lv<1> > tmp_3_reg_689;
    sc_signal< sc_lv<1> > exitcond6_fu_501_p2;
    sc_signal< sc_lv<3> > tmp_9_fu_517_p3;
    sc_signal< sc_lv<3> > tmp_9_reg_694;
    sc_signal< sc_lv<3> > k_3_fu_531_p2;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_359_ap_start;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_359_ap_idle;
    sc_signal< sc_lv<5> > grp_aes256_encrypt_ecb_fu_359_k_address0;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_359_k_ce0;
    sc_signal< sc_lv<8> > grp_aes256_encrypt_ecb_fu_359_ap_return_0;
    sc_signal< sc_lv<8> > grp_aes256_encrypt_ecb_fu_359_ap_return_1;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_371_ap_start;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_371_ap_idle;
    sc_signal< sc_lv<5> > grp_aes256_encrypt_ecb_fu_371_k_address0;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_371_k_ce0;
    sc_signal< sc_lv<8> > grp_aes256_encrypt_ecb_fu_371_ap_return_0;
    sc_signal< sc_lv<8> > grp_aes256_encrypt_ecb_fu_371_ap_return_1;
    sc_signal< sc_lv<6> > j_reg_103;
    sc_signal< sc_lv<1> > exitcond2_fu_383_p2;
    sc_signal< sc_lv<8> > buf_1_1_reg_114;
    sc_signal< sc_lv<8> > buf_1_0_reg_126;
    sc_signal< sc_lv<8> > buf_0_1_reg_138;
    sc_signal< sc_lv<8> > buf_0_0_reg_150;
    sc_signal< sc_lv<1> > ap_phi_mux_i_2_phi_fu_167_p4;
    sc_signal< sc_lv<1> > i_2_reg_162;
    sc_signal< sc_lv<8> > buf_1_1_1_reg_175;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > buf_1_0_1_reg_186;
    sc_signal< sc_lv<8> > buf_0_1_1_reg_197;
    sc_signal< sc_lv<8> > buf_0_0_1_reg_208;
    sc_signal< sc_lv<2> > j_1_reg_219;
    sc_signal< sc_lv<8> > buf_1_1_2_reg_230;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<8> > buf_1_0_2_reg_242;
    sc_signal< sc_lv<8> > buf_0_1_2_reg_254;
    sc_signal< sc_lv<8> > buf_0_0_2_reg_266;
    sc_signal< sc_lv<3> > k_reg_278;
    sc_signal< sc_lv<8> > buf_1_1_2_be_reg_289;
    sc_signal< sc_lv<8> > buf_1_0_2_be_reg_301;
    sc_signal< sc_lv<8> > buf_0_1_2_be_reg_313;
    sc_signal< sc_lv<8> > buf_0_0_2_be_reg_325;
    sc_signal< sc_lv<2> > j_3_reg_337;
    sc_signal< sc_lv<1> > exitcond_fu_525_p2;
    sc_signal< sc_lv<3> > k_1_reg_348;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_359_ap_start_reg;
    sc_signal< sc_logic > grp_aes256_encrypt_ecb_fu_371_ap_start_reg;
    sc_signal< sc_lv<64> > sum_cast_fu_448_p1;
    sc_signal< sc_lv<64> > sum2_cast_fu_575_p1;
    sc_signal< sc_lv<3> > tmp8_fu_434_p2;
    sc_signal< sc_lv<5> > tmp8_cast_fu_439_p1;
    sc_signal< sc_lv<5> > sum_fu_443_p2;
    sc_signal< sc_lv<1> > tmp_8_fu_537_p1;
    sc_signal< sc_lv<8> > buf_1_load_phi_fu_541_p3;
    sc_signal< sc_lv<8> > buf_0_load_phi_fu_547_p3;
    sc_signal< sc_lv<3> > tmp1_fu_561_p2;
    sc_signal< sc_lv<5> > tmp10_cast_fu_566_p1;
    sc_signal< sc_lv<5> > sum2_fu_570_p2;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state9_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_i_2_phi_fu_167_p4();
    void thread_ap_ready();
    void thread_buf_0_load_phi_fu_547_p3();
    void thread_buf_1_1_4_fu_471_p3();
    void thread_buf_1_1_6_fu_478_p3();
    void thread_buf_1_1_7_fu_457_p3();
    void thread_buf_1_1_8_fu_464_p3();
    void thread_buf_1_load_phi_fu_541_p3();
    void thread_data_address0();
    void thread_data_ce0();
    void thread_data_d0();
    void thread_data_we0();
    void thread_exitcond2_fu_383_p2();
    void thread_exitcond3_fu_398_p2();
    void thread_exitcond5_fu_422_p2();
    void thread_exitcond6_fu_501_p2();
    void thread_exitcond_fu_525_p2();
    void thread_grp_aes256_encrypt_ecb_fu_359_ap_start();
    void thread_grp_aes256_encrypt_ecb_fu_371_ap_start();
    void thread_j_2_fu_389_p2();
    void thread_j_4_fu_404_p2();
    void thread_j_5_fu_507_p2();
    void thread_k_2_fu_428_p2();
    void thread_k_3_fu_531_p2();
    void thread_sum2_cast_fu_575_p1();
    void thread_sum2_fu_570_p2();
    void thread_sum_cast_fu_448_p1();
    void thread_sum_fu_443_p2();
    void thread_tmp10_cast_fu_566_p1();
    void thread_tmp1_fu_561_p2();
    void thread_tmp7_cast_fu_395_p1();
    void thread_tmp8_cast_fu_439_p1();
    void thread_tmp8_fu_434_p2();
    void thread_tmp_1_fu_410_p1();
    void thread_tmp_2_fu_414_p3();
    void thread_tmp_3_fu_513_p1();
    void thread_tmp_7_fu_453_p1();
    void thread_tmp_8_fu_537_p1();
    void thread_tmp_9_fu_517_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
