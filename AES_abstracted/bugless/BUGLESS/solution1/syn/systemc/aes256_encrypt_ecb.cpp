// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes256_encrypt_ecb.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes256_encrypt_ecb::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes256_encrypt_ecb::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> aes256_encrypt_ecb::ap_ST_fsm_state1 = "1";
const sc_lv<9> aes256_encrypt_ecb::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<9> aes256_encrypt_ecb::ap_ST_fsm_state4 = "100";
const sc_lv<9> aes256_encrypt_ecb::ap_ST_fsm_state5 = "1000";
const sc_lv<9> aes256_encrypt_ecb::ap_ST_fsm_state6 = "10000";
const sc_lv<9> aes256_encrypt_ecb::ap_ST_fsm_pp1_stage0 = "100000";
const sc_lv<9> aes256_encrypt_ecb::ap_ST_fsm_state9 = "1000000";
const sc_lv<9> aes256_encrypt_ecb::ap_ST_fsm_pp2_stage0 = "10000000";
const sc_lv<9> aes256_encrypt_ecb::ap_ST_fsm_state12 = "100000000";
const bool aes256_encrypt_ecb::ap_const_boolean_1 = true;
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_1 = "1";
const bool aes256_encrypt_ecb::ap_const_boolean_0 = false;
const sc_lv<1> aes256_encrypt_ecb::ap_const_lv1_0 = "0";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_3 = "11";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_4 = "100";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_5 = "101";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_7 = "111";
const sc_lv<1> aes256_encrypt_ecb::ap_const_lv1_1 = "1";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_6 = "110";
const sc_lv<6> aes256_encrypt_ecb::ap_const_lv6_0 = "000000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_2 = "10";
const sc_lv<2> aes256_encrypt_ecb::ap_const_lv2_2 = "10";
const sc_lv<6> aes256_encrypt_ecb::ap_const_lv6_20 = "100000";
const sc_lv<6> aes256_encrypt_ecb::ap_const_lv6_1 = "1";
const sc_lv<2> aes256_encrypt_ecb::ap_const_lv2_3 = "11";
const sc_lv<2> aes256_encrypt_ecb::ap_const_lv2_0 = "00";
const sc_lv<5> aes256_encrypt_ecb::ap_const_lv5_10 = "10000";
const sc_lv<32> aes256_encrypt_ecb::ap_const_lv32_8 = "1000";

aes256_encrypt_ecb::aes256_encrypt_ecb(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new aes256_encrypt_ecb_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    ctx_body_key_U = new aes256_encrypt_ecb_ctx_body_key("ctx_body_key_U");
    ctx_body_key_U->clk(ap_clk);
    ctx_body_key_U->reset(ap_rst);
    ctx_body_key_U->address0(ctx_body_key_address0);
    ctx_body_key_U->ce0(ctx_body_key_ce0);
    ctx_body_key_U->we0(ctx_body_key_we0);
    ctx_body_key_U->d0(ctx_body_enckey_q0);
    ctx_body_key_U->q0(ctx_body_key_q0);
    ctx_body_key_U->address1(ctx_body_key_address1);
    ctx_body_key_U->ce1(ctx_body_key_ce1);
    ctx_body_key_U->we1(ctx_body_key_we1);
    ctx_body_key_U->d1(ctx_body_enckey_q1);
    ctx_body_enckey_U = new aes256_encrypt_ecb_ctx_body_enckey("ctx_body_enckey_U");
    ctx_body_enckey_U->clk(ap_clk);
    ctx_body_enckey_U->reset(ap_rst);
    ctx_body_enckey_U->address0(ctx_body_enckey_address0);
    ctx_body_enckey_U->ce0(ctx_body_enckey_ce0);
    ctx_body_enckey_U->we0(ctx_body_enckey_we0);
    ctx_body_enckey_U->d0(k_q0);
    ctx_body_enckey_U->q0(ctx_body_enckey_q0);
    ctx_body_enckey_U->address1(ctx_body_enckey_address1);
    ctx_body_enckey_U->ce1(ctx_body_enckey_ce1);
    ctx_body_enckey_U->q1(ctx_body_enckey_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp2_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);

    SC_METHOD(thread_ap_block_pp2_stage0);

    SC_METHOD(thread_ap_block_pp2_stage0_11001);

    SC_METHOD(thread_ap_block_pp2_stage0_subdone);

    SC_METHOD(thread_ap_block_state10_pp2_stage0_iter0);

    SC_METHOD(thread_ap_block_state11_pp2_stage0_iter1);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state7_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state8_pp1_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( tmp_fu_277_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state7);
    sensitive << ( tmp_i2_fu_361_p2 );

    SC_METHOD(thread_ap_condition_pp2_exit_iter0_state10);
    sensitive << ( tmp_i8_fu_404_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_enable_pp2);
    sensitive << ( ap_idle_pp2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_idle_pp2);
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_enable_reg_pp2_iter1 );

    SC_METHOD(thread_ap_phi_mux_buf13_2_phi_fu_225_p4);
    sensitive << ( buf13_2_reg_222 );
    sensitive << ( tmp_i2_reg_543 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( buf13_3_fu_397_p3 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_ap_phi_mux_buf_2_phi_fu_214_p4);
    sensitive << ( buf_2_reg_211 );
    sensitive << ( tmp_i2_reg_543 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( buf_3_fu_390_p3 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_ap_phi_mux_i_i7_phi_fu_270_p4);
    sensitive << ( i_i7_reg_266 );
    sensitive << ( tmp_i8_reg_573 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( i_4_reg_584 );
    sensitive << ( ap_enable_reg_pp2_iter1 );
    sensitive << ( ap_block_pp2_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( buf_4_reg_244 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( buf13_4_reg_255 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_buf13_1_fu_354_p3);
    sensitive << ( tmp_16_reg_497 );
    sensitive << ( buf1_reg_190 );
    sensitive << ( tmp_43_i_fu_341_p2 );

    SC_METHOD(thread_buf13_3_fu_397_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( buf13_2_reg_222 );
    sensitive << ( tmp_17_reg_547 );

    SC_METHOD(thread_buf13_5_fu_449_p3);
    sensitive << ( buf13_4_reg_255 );
    sensitive << ( tmp_18_reg_577 );
    sensitive << ( tmp_47_i_fu_436_p2 );

    SC_METHOD(thread_buf_1_fu_347_p3);
    sensitive << ( tmp_16_reg_497 );
    sensitive << ( buf_reg_180 );
    sensitive << ( tmp_43_i_fu_341_p2 );

    SC_METHOD(thread_buf_3_fu_390_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( buf_2_reg_211 );
    sensitive << ( tmp_17_reg_547 );

    SC_METHOD(thread_buf_5_fu_442_p3);
    sensitive << ( buf_4_reg_244 );
    sensitive << ( tmp_18_reg_577 );
    sensitive << ( tmp_47_i_fu_436_p2 );

    SC_METHOD(thread_buf_load_i13_phi_fu_429_p3);
    sensitive << ( buf_4_reg_244 );
    sensitive << ( buf13_4_reg_255 );
    sensitive << ( tmp_18_reg_577 );

    SC_METHOD(thread_buf_load_i5_phi_fu_377_p3);
    sensitive << ( tmp_17_fu_367_p1 );
    sensitive << ( ap_phi_mux_buf_2_phi_fu_214_p4 );
    sensitive << ( ap_phi_mux_buf13_2_phi_fu_225_p4 );

    SC_METHOD(thread_buf_load_i_phi_fu_334_p3);
    sensitive << ( tmp_16_reg_497 );
    sensitive << ( buf_reg_180 );
    sensitive << ( buf1_reg_190 );

    SC_METHOD(thread_ctx_body_enckey_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_s_reg_487 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_i_16_fu_314_p1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ctx_body_enckey_address1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_46_i_fu_329_p1 );

    SC_METHOD(thread_ctx_body_enckey_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ctx_body_enckey_ce1);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ctx_body_enckey_we0);
    sensitive << ( tmp_reg_478 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ctx_body_key_address0);
    sensitive << ( tmp_i_16_reg_513 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_block_pp2_stage0 );
    sensitive << ( tmp_i9_fu_424_p1 );

    SC_METHOD(thread_ctx_body_key_address1);
    sensitive << ( tmp_46_i_reg_523 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_body_key_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );

    SC_METHOD(thread_ctx_body_key_ce1);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_body_key_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ctx_body_key_we1);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_1_fu_283_p2);
    sensitive << ( i_reg_169 );

    SC_METHOD(thread_i_2_cast_fu_304_p1);
    sensitive << ( i_2_fu_298_p2 );

    SC_METHOD(thread_i_2_fu_298_p2);
    sensitive << ( i_i_reg_200 );

    SC_METHOD(thread_i_3_fu_371_p2);
    sensitive << ( i_i1_reg_233 );

    SC_METHOD(thread_i_4_cast_fu_420_p1);
    sensitive << ( i_4_fu_414_p2 );

    SC_METHOD(thread_i_4_fu_414_p2);
    sensitive << ( ap_phi_mux_i_i7_phi_fu_270_p4 );

    SC_METHOD(thread_k_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_s_fu_289_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_k_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_42_i_fu_385_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_tmp_16_fu_294_p1);
    sensitive << ( i_i_reg_200 );

    SC_METHOD(thread_tmp_17_fu_367_p1);
    sensitive << ( i_i1_reg_233 );

    SC_METHOD(thread_tmp_18_fu_410_p1);
    sensitive << ( ap_phi_mux_i_i7_phi_fu_270_p4 );

    SC_METHOD(thread_tmp_42_i_fu_385_p1);
    sensitive << ( buf_load_i5_phi_fu_377_p3 );

    SC_METHOD(thread_tmp_43_i_fu_341_p2);
    sensitive << ( ctx_body_enckey_q0 );
    sensitive << ( buf_load_i_phi_fu_334_p3 );

    SC_METHOD(thread_tmp_44_i_cast_fu_319_p1);
    sensitive << ( i_2_fu_298_p2 );

    SC_METHOD(thread_tmp_45_i_fu_323_p2);
    sensitive << ( tmp_44_i_cast_fu_319_p1 );

    SC_METHOD(thread_tmp_46_i_fu_329_p1);
    sensitive << ( tmp_45_i_fu_323_p2 );

    SC_METHOD(thread_tmp_47_i_fu_436_p2);
    sensitive << ( ctx_body_key_q0 );
    sensitive << ( buf_load_i13_phi_fu_429_p3 );

    SC_METHOD(thread_tmp_fu_277_p2);
    sensitive << ( i_reg_169 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_tmp_i2_fu_361_p2);
    sensitive << ( i_i1_reg_233 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_tmp_i8_fu_404_p2);
    sensitive << ( ap_CS_fsm_pp2_stage0 );
    sensitive << ( ap_block_pp2_stage0_11001 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_phi_mux_i_i7_phi_fu_270_p4 );

    SC_METHOD(thread_tmp_i9_fu_424_p1);
    sensitive << ( i_4_cast_fu_420_p1 );

    SC_METHOD(thread_tmp_i_16_fu_314_p1);
    sensitive << ( i_2_cast_fu_304_p1 );

    SC_METHOD(thread_tmp_i_fu_308_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_i_reg_200 );

    SC_METHOD(thread_tmp_s_fu_289_p1);
    sensitive << ( i_reg_169 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_277_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_i_fu_308_p2 );
    sensitive << ( tmp_i2_fu_361_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( tmp_i8_fu_404_p2 );
    sensitive << ( ap_enable_reg_pp2_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_block_pp2_stage0_subdone );

    ap_CS_fsm = "000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp2_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes256_encrypt_ecb_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, k_address0, "(port)k_address0");
    sc_trace(mVcdFile, k_ce0, "(port)k_ce0");
    sc_trace(mVcdFile, k_q0, "(port)k_q0");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, i_reg_169, "i_reg_169");
    sc_trace(mVcdFile, buf_2_reg_211, "buf_2_reg_211");
    sc_trace(mVcdFile, buf13_2_reg_222, "buf13_2_reg_222");
    sc_trace(mVcdFile, i_i1_reg_233, "i_i1_reg_233");
    sc_trace(mVcdFile, buf_4_reg_244, "buf_4_reg_244");
    sc_trace(mVcdFile, buf13_4_reg_255, "buf13_4_reg_255");
    sc_trace(mVcdFile, i_i7_reg_266, "i_i7_reg_266");
    sc_trace(mVcdFile, tmp_fu_277_p2, "tmp_fu_277_p2");
    sc_trace(mVcdFile, tmp_reg_478, "tmp_reg_478");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_1_fu_283_p2, "i_1_fu_283_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_s_fu_289_p1, "tmp_s_fu_289_p1");
    sc_trace(mVcdFile, tmp_s_reg_487, "tmp_s_reg_487");
    sc_trace(mVcdFile, tmp_16_fu_294_p1, "tmp_16_fu_294_p1");
    sc_trace(mVcdFile, tmp_16_reg_497, "tmp_16_reg_497");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_2_fu_298_p2, "i_2_fu_298_p2");
    sc_trace(mVcdFile, i_2_reg_504, "i_2_reg_504");
    sc_trace(mVcdFile, tmp_i_fu_308_p2, "tmp_i_fu_308_p2");
    sc_trace(mVcdFile, tmp_i_16_fu_314_p1, "tmp_i_16_fu_314_p1");
    sc_trace(mVcdFile, tmp_i_16_reg_513, "tmp_i_16_reg_513");
    sc_trace(mVcdFile, tmp_46_i_fu_329_p1, "tmp_46_i_fu_329_p1");
    sc_trace(mVcdFile, tmp_46_i_reg_523, "tmp_46_i_reg_523");
    sc_trace(mVcdFile, buf_1_fu_347_p3, "buf_1_fu_347_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, buf13_1_fu_354_p3, "buf13_1_fu_354_p3");
    sc_trace(mVcdFile, tmp_i2_fu_361_p2, "tmp_i2_fu_361_p2");
    sc_trace(mVcdFile, tmp_i2_reg_543, "tmp_i2_reg_543");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state7_pp1_stage0_iter0, "ap_block_state7_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state8_pp1_stage0_iter1, "ap_block_state8_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, tmp_17_fu_367_p1, "tmp_17_fu_367_p1");
    sc_trace(mVcdFile, tmp_17_reg_547, "tmp_17_reg_547");
    sc_trace(mVcdFile, i_3_fu_371_p2, "i_3_fu_371_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, buf_3_fu_390_p3, "buf_3_fu_390_p3");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, buf13_3_fu_397_p3, "buf13_3_fu_397_p3");
    sc_trace(mVcdFile, tmp_i8_fu_404_p2, "tmp_i8_fu_404_p2");
    sc_trace(mVcdFile, tmp_i8_reg_573, "tmp_i8_reg_573");
    sc_trace(mVcdFile, ap_CS_fsm_pp2_stage0, "ap_CS_fsm_pp2_stage0");
    sc_trace(mVcdFile, ap_block_state10_pp2_stage0_iter0, "ap_block_state10_pp2_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp2_stage0_iter1, "ap_block_state11_pp2_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp2_stage0_11001, "ap_block_pp2_stage0_11001");
    sc_trace(mVcdFile, tmp_18_fu_410_p1, "tmp_18_fu_410_p1");
    sc_trace(mVcdFile, tmp_18_reg_577, "tmp_18_reg_577");
    sc_trace(mVcdFile, i_4_fu_414_p2, "i_4_fu_414_p2");
    sc_trace(mVcdFile, i_4_reg_584, "i_4_reg_584");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter0, "ap_enable_reg_pp2_iter0");
    sc_trace(mVcdFile, buf_5_fu_442_p3, "buf_5_fu_442_p3");
    sc_trace(mVcdFile, ap_enable_reg_pp2_iter1, "ap_enable_reg_pp2_iter1");
    sc_trace(mVcdFile, buf13_5_fu_449_p3, "buf13_5_fu_449_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state7, "ap_condition_pp1_exit_iter0_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_block_pp2_stage0_subdone, "ap_block_pp2_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp2_exit_iter0_state10, "ap_condition_pp2_exit_iter0_state10");
    sc_trace(mVcdFile, ctx_body_key_address0, "ctx_body_key_address0");
    sc_trace(mVcdFile, ctx_body_key_ce0, "ctx_body_key_ce0");
    sc_trace(mVcdFile, ctx_body_key_we0, "ctx_body_key_we0");
    sc_trace(mVcdFile, ctx_body_key_q0, "ctx_body_key_q0");
    sc_trace(mVcdFile, ctx_body_key_address1, "ctx_body_key_address1");
    sc_trace(mVcdFile, ctx_body_key_ce1, "ctx_body_key_ce1");
    sc_trace(mVcdFile, ctx_body_key_we1, "ctx_body_key_we1");
    sc_trace(mVcdFile, ctx_body_enckey_address0, "ctx_body_enckey_address0");
    sc_trace(mVcdFile, ctx_body_enckey_ce0, "ctx_body_enckey_ce0");
    sc_trace(mVcdFile, ctx_body_enckey_we0, "ctx_body_enckey_we0");
    sc_trace(mVcdFile, ctx_body_enckey_q0, "ctx_body_enckey_q0");
    sc_trace(mVcdFile, ctx_body_enckey_address1, "ctx_body_enckey_address1");
    sc_trace(mVcdFile, ctx_body_enckey_ce1, "ctx_body_enckey_ce1");
    sc_trace(mVcdFile, ctx_body_enckey_q1, "ctx_body_enckey_q1");
    sc_trace(mVcdFile, buf_reg_180, "buf_reg_180");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, buf1_reg_190, "buf1_reg_190");
    sc_trace(mVcdFile, i_i_reg_200, "i_i_reg_200");
    sc_trace(mVcdFile, ap_phi_mux_buf_2_phi_fu_214_p4, "ap_phi_mux_buf_2_phi_fu_214_p4");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, ap_phi_mux_buf13_2_phi_fu_225_p4, "ap_phi_mux_buf13_2_phi_fu_225_p4");
    sc_trace(mVcdFile, ap_block_pp2_stage0, "ap_block_pp2_stage0");
    sc_trace(mVcdFile, ap_phi_mux_i_i7_phi_fu_270_p4, "ap_phi_mux_i_i7_phi_fu_270_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_42_i_fu_385_p1, "tmp_42_i_fu_385_p1");
    sc_trace(mVcdFile, tmp_i9_fu_424_p1, "tmp_i9_fu_424_p1");
    sc_trace(mVcdFile, i_2_cast_fu_304_p1, "i_2_cast_fu_304_p1");
    sc_trace(mVcdFile, tmp_44_i_cast_fu_319_p1, "tmp_44_i_cast_fu_319_p1");
    sc_trace(mVcdFile, tmp_45_i_fu_323_p2, "tmp_45_i_fu_323_p2");
    sc_trace(mVcdFile, buf_load_i_phi_fu_334_p3, "buf_load_i_phi_fu_334_p3");
    sc_trace(mVcdFile, tmp_43_i_fu_341_p2, "tmp_43_i_fu_341_p2");
    sc_trace(mVcdFile, buf_load_i5_phi_fu_377_p3, "buf_load_i5_phi_fu_377_p3");
    sc_trace(mVcdFile, i_4_cast_fu_420_p1, "i_4_cast_fu_420_p1");
    sc_trace(mVcdFile, buf_load_i13_phi_fu_429_p3, "buf_load_i13_phi_fu_429_p3");
    sc_trace(mVcdFile, tmp_47_i_fu_436_p2, "tmp_47_i_fu_436_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
    sc_trace(mVcdFile, ap_idle_pp2, "ap_idle_pp2");
    sc_trace(mVcdFile, ap_enable_pp2, "ap_enable_pp2");
#endif

    }
}

aes256_encrypt_ecb::~aes256_encrypt_ecb() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete ctx_body_key_U;
    delete ctx_body_enckey_U;
}

void aes256_encrypt_ecb::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state7.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                    esl_seteq<1,1,1>(tmp_i_fu_308_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state7.read()))) {
            ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state7.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                    esl_seteq<1,1,1>(tmp_i_fu_308_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state10.read()))) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_enable_reg_pp2_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp2_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp2_exit_iter0_state10.read()))) {
            ap_enable_reg_pp2_iter1 = (ap_condition_pp2_exit_iter0_state10.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp2_iter1 = ap_enable_reg_pp2_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
            ap_enable_reg_pp2_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_308_p2.read(), ap_const_lv1_1))) {
        buf13_2_reg_222 = buf1_reg_190.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i2_reg_543.read()))) {
        buf13_2_reg_222 = buf13_3_fu_397_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        buf13_4_reg_255 = buf13_2_reg_222.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_reg_573.read()))) {
        buf13_4_reg_255 = buf13_5_fu_449_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buf1_reg_190 = p_read1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        buf1_reg_190 = buf13_1_fu_354_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_308_p2.read(), ap_const_lv1_1))) {
        buf_2_reg_211 = buf_reg_180.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i2_reg_543.read()))) {
        buf_2_reg_211 = buf_3_fu_390_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        buf_4_reg_244 = buf_2_reg_211.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_reg_573.read()))) {
        buf_4_reg_244 = buf_5_fu_442_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        buf_reg_180 = p_read.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        buf_reg_180 = buf_1_fu_347_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_308_p2.read(), ap_const_lv1_1))) {
        i_i1_reg_233 = ap_const_lv2_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i2_fu_361_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        i_i1_reg_233 = i_3_fu_371_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_i7_reg_266 = ap_const_lv2_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_reg_573.read()))) {
        i_i7_reg_266 = i_4_reg_584.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_i_reg_200 = ap_const_lv2_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_i_reg_200 = i_2_reg_504.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(tmp_fu_277_p2.read(), ap_const_lv1_0))) {
        i_reg_169 = i_1_fu_283_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_169 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_2_reg_504 = i_2_fu_298_p2.read();
        tmp_16_reg_497 = tmp_16_fu_294_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_fu_404_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()))) {
        i_4_reg_584 = i_4_fu_414_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i2_fu_361_p2.read()))) {
        tmp_17_reg_547 = tmp_17_fu_367_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_fu_404_p2.read()))) {
        tmp_18_reg_577 = tmp_18_fu_410_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_fu_308_p2.read()))) {
        tmp_46_i_reg_523 = tmp_46_i_fu_329_p1.read();
        tmp_i_16_reg_513 = tmp_i_16_fu_314_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_i2_reg_543 = tmp_i2_fu_361_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_i8_reg_573 = tmp_i8_fu_404_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_reg_478 = tmp_fu_277_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_277_p2.read(), ap_const_lv1_0))) {
        tmp_s_reg_487 = tmp_s_fu_289_p1.read();
    }
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[5];
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_pp2_stage0() {
    ap_CS_fsm_pp2_stage0 = ap_CS_fsm.read()[7];
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[8];
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[3];
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[4];
}

void aes256_encrypt_ecb::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[6];
}

void aes256_encrypt_ecb::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_pp2_stage0() {
    ap_block_pp2_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_pp2_stage0_11001() {
    ap_block_pp2_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_pp2_stage0_subdone() {
    ap_block_pp2_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_state10_pp2_stage0_iter0() {
    ap_block_state10_pp2_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_state11_pp2_stage0_iter1() {
    ap_block_state11_pp2_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_state7_pp1_stage0_iter0() {
    ap_block_state7_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_block_state8_pp1_stage0_iter1() {
    ap_block_state8_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aes256_encrypt_ecb::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(tmp_fu_277_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_condition_pp1_exit_iter0_state7() {
    if (esl_seteq<1,1,1>(tmp_i2_fu_361_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state7 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state7 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_condition_pp2_exit_iter0_state10() {
    if (esl_seteq<1,1,1>(tmp_i8_fu_404_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp2_exit_iter0_state10 = ap_const_logic_1;
    } else {
        ap_condition_pp2_exit_iter0_state10 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void aes256_encrypt_ecb::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void aes256_encrypt_ecb::thread_ap_enable_pp2() {
    ap_enable_pp2 = (ap_idle_pp2.read() ^ ap_const_logic_1);
}

void aes256_encrypt_ecb::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_idle_pp2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp2_iter1.read()))) {
        ap_idle_pp2 = ap_const_logic_1;
    } else {
        ap_idle_pp2 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_phi_mux_buf13_2_phi_fu_225_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i2_reg_543.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_buf13_2_phi_fu_225_p4 = buf13_3_fu_397_p3.read();
    } else {
        ap_phi_mux_buf13_2_phi_fu_225_p4 = buf13_2_reg_222.read();
    }
}

void aes256_encrypt_ecb::thread_ap_phi_mux_buf_2_phi_fu_214_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i2_reg_543.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_buf_2_phi_fu_214_p4 = buf_3_fu_390_p3.read();
    } else {
        ap_phi_mux_buf_2_phi_fu_214_p4 = buf_2_reg_211.read();
    }
}

void aes256_encrypt_ecb::thread_ap_phi_mux_i_i7_phi_fu_270_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i8_reg_573.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i_i7_phi_fu_270_p4 = i_4_reg_584.read();
    } else {
        ap_phi_mux_i_i7_phi_fu_270_p4 = i_i7_reg_266.read();
    }
}

void aes256_encrypt_ecb::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ap_return_0() {
    ap_return_0 = buf_4_reg_244.read();
}

void aes256_encrypt_ecb::thread_ap_return_1() {
    ap_return_1 = buf13_4_reg_255.read();
}

void aes256_encrypt_ecb::thread_buf13_1_fu_354_p3() {
    buf13_1_fu_354_p3 = (!tmp_16_reg_497.read()[0].is_01())? sc_lv<8>(): ((tmp_16_reg_497.read()[0].to_bool())? buf1_reg_190.read(): tmp_43_i_fu_341_p2.read());
}

void aes256_encrypt_ecb::thread_buf13_3_fu_397_p3() {
    buf13_3_fu_397_p3 = (!tmp_17_reg_547.read()[0].is_01())? sc_lv<8>(): ((tmp_17_reg_547.read()[0].to_bool())? buf13_2_reg_222.read(): sbox_q0.read());
}

void aes256_encrypt_ecb::thread_buf13_5_fu_449_p3() {
    buf13_5_fu_449_p3 = (!tmp_18_reg_577.read()[0].is_01())? sc_lv<8>(): ((tmp_18_reg_577.read()[0].to_bool())? buf13_4_reg_255.read(): tmp_47_i_fu_436_p2.read());
}

void aes256_encrypt_ecb::thread_buf_1_fu_347_p3() {
    buf_1_fu_347_p3 = (!tmp_16_reg_497.read()[0].is_01())? sc_lv<8>(): ((tmp_16_reg_497.read()[0].to_bool())? tmp_43_i_fu_341_p2.read(): buf_reg_180.read());
}

void aes256_encrypt_ecb::thread_buf_3_fu_390_p3() {
    buf_3_fu_390_p3 = (!tmp_17_reg_547.read()[0].is_01())? sc_lv<8>(): ((tmp_17_reg_547.read()[0].to_bool())? sbox_q0.read(): buf_2_reg_211.read());
}

void aes256_encrypt_ecb::thread_buf_5_fu_442_p3() {
    buf_5_fu_442_p3 = (!tmp_18_reg_577.read()[0].is_01())? sc_lv<8>(): ((tmp_18_reg_577.read()[0].to_bool())? tmp_47_i_fu_436_p2.read(): buf_4_reg_244.read());
}

void aes256_encrypt_ecb::thread_buf_load_i13_phi_fu_429_p3() {
    buf_load_i13_phi_fu_429_p3 = (!tmp_18_reg_577.read()[0].is_01())? sc_lv<8>(): ((tmp_18_reg_577.read()[0].to_bool())? buf_4_reg_244.read(): buf13_4_reg_255.read());
}

void aes256_encrypt_ecb::thread_buf_load_i5_phi_fu_377_p3() {
    buf_load_i5_phi_fu_377_p3 = (!tmp_17_fu_367_p1.read()[0].is_01())? sc_lv<8>(): ((tmp_17_fu_367_p1.read()[0].to_bool())? ap_phi_mux_buf_2_phi_fu_214_p4.read(): ap_phi_mux_buf13_2_phi_fu_225_p4.read());
}

void aes256_encrypt_ecb::thread_buf_load_i_phi_fu_334_p3() {
    buf_load_i_phi_fu_334_p3 = (!tmp_16_reg_497.read()[0].is_01())? sc_lv<8>(): ((tmp_16_reg_497.read()[0].to_bool())? buf_reg_180.read(): buf1_reg_190.read());
}

void aes256_encrypt_ecb::thread_ctx_body_enckey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ctx_body_enckey_address0 =  (sc_lv<5>) (tmp_i_16_fu_314_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        ctx_body_enckey_address0 =  (sc_lv<5>) (tmp_s_reg_487.read());
    } else {
        ctx_body_enckey_address0 = "XXXXX";
    }
}

void aes256_encrypt_ecb::thread_ctx_body_enckey_address1() {
    ctx_body_enckey_address1 =  (sc_lv<5>) (tmp_46_i_fu_329_p1.read());
}

void aes256_encrypt_ecb::thread_ctx_body_enckey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        ctx_body_enckey_ce0 = ap_const_logic_1;
    } else {
        ctx_body_enckey_ce0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_body_enckey_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ctx_body_enckey_ce1 = ap_const_logic_1;
    } else {
        ctx_body_enckey_ce1 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_body_enckey_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_reg_478.read(), ap_const_lv1_0))) {
        ctx_body_enckey_we0 = ap_const_logic_1;
    } else {
        ctx_body_enckey_we0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_body_key_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp2_stage0.read(), ap_const_boolean_0))) {
        ctx_body_key_address0 =  (sc_lv<5>) (tmp_i9_fu_424_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_body_key_address0 =  (sc_lv<5>) (tmp_i_16_reg_513.read());
    } else {
        ctx_body_key_address0 = "XXXXX";
    }
}

void aes256_encrypt_ecb::thread_ctx_body_key_address1() {
    ctx_body_key_address1 =  (sc_lv<5>) (tmp_46_i_reg_523.read());
}

void aes256_encrypt_ecb::thread_ctx_body_key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp2_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp2_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read())))) {
        ctx_body_key_ce0 = ap_const_logic_1;
    } else {
        ctx_body_key_ce0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_body_key_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_body_key_ce1 = ap_const_logic_1;
    } else {
        ctx_body_key_ce1 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_body_key_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_body_key_we0 = ap_const_logic_1;
    } else {
        ctx_body_key_we0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_ctx_body_key_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ctx_body_key_we1 = ap_const_logic_1;
    } else {
        ctx_body_key_we1 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_i_1_fu_283_p2() {
    i_1_fu_283_p2 = (!i_reg_169.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_169.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void aes256_encrypt_ecb::thread_i_2_cast_fu_304_p1() {
    i_2_cast_fu_304_p1 = esl_sext<8,2>(i_2_fu_298_p2.read());
}

void aes256_encrypt_ecb::thread_i_2_fu_298_p2() {
    i_2_fu_298_p2 = (!ap_const_lv2_3.is_01() || !i_i_reg_200.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_3) + sc_biguint<2>(i_i_reg_200.read()));
}

void aes256_encrypt_ecb::thread_i_3_fu_371_p2() {
    i_3_fu_371_p2 = (!ap_const_lv2_3.is_01() || !i_i1_reg_233.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_3) + sc_biguint<2>(i_i1_reg_233.read()));
}

void aes256_encrypt_ecb::thread_i_4_cast_fu_420_p1() {
    i_4_cast_fu_420_p1 = esl_sext<8,2>(i_4_fu_414_p2.read());
}

void aes256_encrypt_ecb::thread_i_4_fu_414_p2() {
    i_4_fu_414_p2 = (!ap_const_lv2_3.is_01() || !ap_phi_mux_i_i7_phi_fu_270_p4.read().is_01())? sc_lv<2>(): (sc_bigint<2>(ap_const_lv2_3) + sc_biguint<2>(ap_phi_mux_i_i7_phi_fu_270_p4.read()));
}

void aes256_encrypt_ecb::thread_k_address0() {
    k_address0 =  (sc_lv<5>) (tmp_s_fu_289_p1.read());
}

void aes256_encrypt_ecb::thread_k_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        k_ce0 = ap_const_logic_1;
    } else {
        k_ce0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_sbox_address0() {
    sbox_address0 =  (sc_lv<8>) (tmp_42_i_fu_385_p1.read());
}

void aes256_encrypt_ecb::thread_sbox_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void aes256_encrypt_ecb::thread_tmp_16_fu_294_p1() {
    tmp_16_fu_294_p1 = i_i_reg_200.read().range(1-1, 0);
}

void aes256_encrypt_ecb::thread_tmp_17_fu_367_p1() {
    tmp_17_fu_367_p1 = i_i1_reg_233.read().range(1-1, 0);
}

void aes256_encrypt_ecb::thread_tmp_18_fu_410_p1() {
    tmp_18_fu_410_p1 = ap_phi_mux_i_i7_phi_fu_270_p4.read().range(1-1, 0);
}

void aes256_encrypt_ecb::thread_tmp_42_i_fu_385_p1() {
    tmp_42_i_fu_385_p1 = esl_zext<64,8>(buf_load_i5_phi_fu_377_p3.read());
}

void aes256_encrypt_ecb::thread_tmp_43_i_fu_341_p2() {
    tmp_43_i_fu_341_p2 = (ctx_body_enckey_q0.read() ^ buf_load_i_phi_fu_334_p3.read());
}

void aes256_encrypt_ecb::thread_tmp_44_i_cast_fu_319_p1() {
    tmp_44_i_cast_fu_319_p1 = esl_sext<5,2>(i_2_fu_298_p2.read());
}

void aes256_encrypt_ecb::thread_tmp_45_i_fu_323_p2() {
    tmp_45_i_fu_323_p2 = (tmp_44_i_cast_fu_319_p1.read() ^ ap_const_lv5_10);
}

void aes256_encrypt_ecb::thread_tmp_46_i_fu_329_p1() {
    tmp_46_i_fu_329_p1 = esl_zext<64,5>(tmp_45_i_fu_323_p2.read());
}

void aes256_encrypt_ecb::thread_tmp_47_i_fu_436_p2() {
    tmp_47_i_fu_436_p2 = (ctx_body_key_q0.read() ^ buf_load_i13_phi_fu_429_p3.read());
}

void aes256_encrypt_ecb::thread_tmp_fu_277_p2() {
    tmp_fu_277_p2 = (!i_reg_169.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_169.read() == ap_const_lv6_20);
}

void aes256_encrypt_ecb::thread_tmp_i2_fu_361_p2() {
    tmp_i2_fu_361_p2 = (!i_i1_reg_233.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(i_i1_reg_233.read() == ap_const_lv2_0);
}

void aes256_encrypt_ecb::thread_tmp_i8_fu_404_p2() {
    tmp_i8_fu_404_p2 = (!ap_phi_mux_i_i7_phi_fu_270_p4.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_i7_phi_fu_270_p4.read() == ap_const_lv2_0);
}

void aes256_encrypt_ecb::thread_tmp_i9_fu_424_p1() {
    tmp_i9_fu_424_p1 = esl_zext<64,8>(i_4_cast_fu_420_p1.read());
}

void aes256_encrypt_ecb::thread_tmp_i_16_fu_314_p1() {
    tmp_i_16_fu_314_p1 = esl_zext<64,8>(i_2_cast_fu_304_p1.read());
}

void aes256_encrypt_ecb::thread_tmp_i_fu_308_p2() {
    tmp_i_fu_308_p2 = (!i_i_reg_200.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_200.read() == ap_const_lv2_0);
}

void aes256_encrypt_ecb::thread_tmp_s_fu_289_p1() {
    tmp_s_fu_289_p1 = esl_zext<64,6>(i_reg_169.read());
}

void aes256_encrypt_ecb::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_277_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_fu_277_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(tmp_i_fu_308_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 32 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_i2_fu_361_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_i2_fu_361_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            break;
        case 128 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_i8_fu_404_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp2_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp2_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_i8_fu_404_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<9>) ("XXXXXXXXX");
            break;
    }
}

}

