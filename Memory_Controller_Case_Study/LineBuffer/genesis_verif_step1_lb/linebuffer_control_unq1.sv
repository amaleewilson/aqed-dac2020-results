//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11904 $ --- $Date: 2013/08/03 $   |
//	-----------------------------------------------
//	
//
//  Source file: /home/jarvis/Documents/memory_core/genesis_new/linebuffer_control.svp
//  Source template: linebuffer_control
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter dwidth 	= 64
// Parameter wwidth 	= 16
// Parameter bbanks 	= 2
// Parameter ddepth 	= 128
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

///////////////////////////////////////////////////////////////////
// CGRA memory generator
//////////////////////////////////////////////////////////////////
`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

// dwidth (_GENESIS2_INHERITANCE_PRIORITY_) = 64
//
// wwidth (_GENESIS2_INHERITANCE_PRIORITY_) = 16
//
// ddepth (_GENESIS2_INHERITANCE_PRIORITY_) = 128
//
// bbanks (_GENESIS2_INHERITANCE_PRIORITY_) = 2
//

module linebuffer_control_unq1(

   clk,
   clk_en,
   reset,
   flush,
   wen,

   stencil_width,
   depth,
   valid,
   num_words_mem,
   ren_to_fifo

);

input logic                 clk;
input logic                 clk_en;
input logic                 reset;
input logic                 flush;
input logic                 wen;

input logic [31:0]          stencil_width;
input logic [12:0]          depth;
output logic                valid;
input logic [12:0]          num_words_mem;
output logic                ren_to_fifo;

logic [31:0] lb_config_rd_data;
// Is this the last line in the thing? Valid_out should be gated based on the stencil
logic [31:0] vg_ctr;
logic valid_gate;
logic valid_int;
logic [12:0] depth_int;

assign valid_gate = (stencil_width == 0) ? 1 : vg_ctr >= (stencil_width - 1); 
assign valid = valid_gate ? valid_int : 0;
assign ren_to_fifo = (depth_int > 0) ? (num_words_mem >= (depth_int-1)) & wen: 0; //updated

always @(posedge clk, posedge reset) begin
    if(reset) begin
       vg_ctr <= 0; 
    end
    else begin
        if(valid_int) begin
            vg_ctr <= (vg_ctr + 1) % depth_int;
        end
    end
end 

always @(posedge clk, posedge reset) begin
    if (reset) begin
        depth_int <= 0;
        valid_int <= 0;
        lb_config_rd_data <= 0;
    end
    else begin
        if (flush) begin
           depth_int <= depth;
           valid_int <= 0;
           lb_config_rd_data <= 0;
        end
        else begin
           depth_int <= depth;

           if (((num_words_mem >= depth_int-1) & wen) & (depth_int > 0)) begin //updated
               valid_int <= 1;
           end
           else begin
               valid_int <= 0;
           end
        end
    end
end

endmodule
