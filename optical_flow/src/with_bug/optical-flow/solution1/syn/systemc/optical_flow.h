// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _optical_flow_HH_
#define _optical_flow_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "optical_flow_entry12.h"
#include "Loop_FRAMES_CP_OUTER.h"
#include "gradient_xy_calc.h"
#include "gradient_z_calc.h"
#include "gradient_weight_y.h"
#include "gradient_weight_x.h"
#include "outer_product.h"
#include "tensor_weight_y.h"
#include "tensor_weight_x.h"
#include "flow_calc.h"
#include "fifo_w32_d2_A.h"
#include "fifo_w8_d10_A.h"
#include "fifo_w32_d10_A.h"
#include "fifo_w32_d40_A.h"
#include "fifo_w1_d10_A.h"
#include "fifo_w191_d10_A.h"
#include "fifo_w192_d10_A.h"
#include "start_for_flow_caCeG.h"
#include "start_for_gradienDeQ.h"
#include "start_for_gradienEe0.h"
#include "start_for_gradienFfa.h"
#include "start_for_gradienGfk.h"
#include "start_for_outer_pHfu.h"
#include "start_for_tensor_IfE.h"
#include "start_for_tensor_JfO.h"
#include "optical_flow_control_s_axi.h"
#include "optical_flow_gmem0_m_axi.h"
#include "optical_flow_gmem1_m_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CONTROL_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CONTROL_DATA_WIDTH = 32,
         unsigned int C_M_AXI_GMEM0_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_GMEM0_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_DATA_WIDTH = 64,
         unsigned int C_M_AXI_GMEM0_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM0_BUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_GMEM1_ID_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_DATA_WIDTH = 64,
         unsigned int C_M_AXI_GMEM1_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_GMEM1_BUSER_WIDTH = 1>
struct optical_flow : public sc_module {
    // Port declarations 110
    sc_in< sc_logic > s_axi_control_AWVALID;
    sc_out< sc_logic > s_axi_control_AWREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_AWADDR;
    sc_in< sc_logic > s_axi_control_WVALID;
    sc_out< sc_logic > s_axi_control_WREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_WDATA;
    sc_in< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH/8> > s_axi_control_WSTRB;
    sc_in< sc_logic > s_axi_control_ARVALID;
    sc_out< sc_logic > s_axi_control_ARREADY;
    sc_in< sc_uint<C_S_AXI_CONTROL_ADDR_WIDTH> > s_axi_control_ARADDR;
    sc_out< sc_logic > s_axi_control_RVALID;
    sc_in< sc_logic > s_axi_control_RREADY;
    sc_out< sc_uint<C_S_AXI_CONTROL_DATA_WIDTH> > s_axi_control_RDATA;
    sc_out< sc_lv<2> > s_axi_control_RRESP;
    sc_out< sc_logic > s_axi_control_BVALID;
    sc_in< sc_logic > s_axi_control_BREADY;
    sc_out< sc_lv<2> > s_axi_control_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_out< sc_logic > m_axi_gmem0_AWVALID;
    sc_in< sc_logic > m_axi_gmem0_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM0_ADDR_WIDTH> > m_axi_gmem0_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_AWID;
    sc_out< sc_lv<8> > m_axi_gmem0_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem0_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem0_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem0_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem0_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem0_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem0_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem0_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM0_AWUSER_WIDTH> > m_axi_gmem0_AWUSER;
    sc_out< sc_logic > m_axi_gmem0_WVALID;
    sc_in< sc_logic > m_axi_gmem0_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM0_DATA_WIDTH> > m_axi_gmem0_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM0_DATA_WIDTH/8> > m_axi_gmem0_WSTRB;
    sc_out< sc_logic > m_axi_gmem0_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_WID;
    sc_out< sc_uint<C_M_AXI_GMEM0_WUSER_WIDTH> > m_axi_gmem0_WUSER;
    sc_out< sc_logic > m_axi_gmem0_ARVALID;
    sc_in< sc_logic > m_axi_gmem0_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM0_ADDR_WIDTH> > m_axi_gmem0_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_ARID;
    sc_out< sc_lv<8> > m_axi_gmem0_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem0_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem0_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem0_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem0_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem0_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem0_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem0_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM0_ARUSER_WIDTH> > m_axi_gmem0_ARUSER;
    sc_in< sc_logic > m_axi_gmem0_RVALID;
    sc_out< sc_logic > m_axi_gmem0_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM0_DATA_WIDTH> > m_axi_gmem0_RDATA;
    sc_in< sc_logic > m_axi_gmem0_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_RID;
    sc_in< sc_uint<C_M_AXI_GMEM0_RUSER_WIDTH> > m_axi_gmem0_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem0_RRESP;
    sc_in< sc_logic > m_axi_gmem0_BVALID;
    sc_out< sc_logic > m_axi_gmem0_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem0_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM0_ID_WIDTH> > m_axi_gmem0_BID;
    sc_in< sc_uint<C_M_AXI_GMEM0_BUSER_WIDTH> > m_axi_gmem0_BUSER;
    sc_out< sc_logic > m_axi_gmem1_AWVALID;
    sc_in< sc_logic > m_axi_gmem1_AWREADY;
    sc_out< sc_uint<C_M_AXI_GMEM1_ADDR_WIDTH> > m_axi_gmem1_AWADDR;
    sc_out< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_AWID;
    sc_out< sc_lv<8> > m_axi_gmem1_AWLEN;
    sc_out< sc_lv<3> > m_axi_gmem1_AWSIZE;
    sc_out< sc_lv<2> > m_axi_gmem1_AWBURST;
    sc_out< sc_lv<2> > m_axi_gmem1_AWLOCK;
    sc_out< sc_lv<4> > m_axi_gmem1_AWCACHE;
    sc_out< sc_lv<3> > m_axi_gmem1_AWPROT;
    sc_out< sc_lv<4> > m_axi_gmem1_AWQOS;
    sc_out< sc_lv<4> > m_axi_gmem1_AWREGION;
    sc_out< sc_uint<C_M_AXI_GMEM1_AWUSER_WIDTH> > m_axi_gmem1_AWUSER;
    sc_out< sc_logic > m_axi_gmem1_WVALID;
    sc_in< sc_logic > m_axi_gmem1_WREADY;
    sc_out< sc_uint<C_M_AXI_GMEM1_DATA_WIDTH> > m_axi_gmem1_WDATA;
    sc_out< sc_uint<C_M_AXI_GMEM1_DATA_WIDTH/8> > m_axi_gmem1_WSTRB;
    sc_out< sc_logic > m_axi_gmem1_WLAST;
    sc_out< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_WID;
    sc_out< sc_uint<C_M_AXI_GMEM1_WUSER_WIDTH> > m_axi_gmem1_WUSER;
    sc_out< sc_logic > m_axi_gmem1_ARVALID;
    sc_in< sc_logic > m_axi_gmem1_ARREADY;
    sc_out< sc_uint<C_M_AXI_GMEM1_ADDR_WIDTH> > m_axi_gmem1_ARADDR;
    sc_out< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_ARID;
    sc_out< sc_lv<8> > m_axi_gmem1_ARLEN;
    sc_out< sc_lv<3> > m_axi_gmem1_ARSIZE;
    sc_out< sc_lv<2> > m_axi_gmem1_ARBURST;
    sc_out< sc_lv<2> > m_axi_gmem1_ARLOCK;
    sc_out< sc_lv<4> > m_axi_gmem1_ARCACHE;
    sc_out< sc_lv<3> > m_axi_gmem1_ARPROT;
    sc_out< sc_lv<4> > m_axi_gmem1_ARQOS;
    sc_out< sc_lv<4> > m_axi_gmem1_ARREGION;
    sc_out< sc_uint<C_M_AXI_GMEM1_ARUSER_WIDTH> > m_axi_gmem1_ARUSER;
    sc_in< sc_logic > m_axi_gmem1_RVALID;
    sc_out< sc_logic > m_axi_gmem1_RREADY;
    sc_in< sc_uint<C_M_AXI_GMEM1_DATA_WIDTH> > m_axi_gmem1_RDATA;
    sc_in< sc_logic > m_axi_gmem1_RLAST;
    sc_in< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_RID;
    sc_in< sc_uint<C_M_AXI_GMEM1_RUSER_WIDTH> > m_axi_gmem1_RUSER;
    sc_in< sc_lv<2> > m_axi_gmem1_RRESP;
    sc_in< sc_logic > m_axi_gmem1_BVALID;
    sc_out< sc_logic > m_axi_gmem1_BREADY;
    sc_in< sc_lv<2> > m_axi_gmem1_BRESP;
    sc_in< sc_uint<C_M_AXI_GMEM1_ID_WIDTH> > m_axi_gmem1_BID;
    sc_in< sc_uint<C_M_AXI_GMEM1_BUSER_WIDTH> > m_axi_gmem1_BUSER;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<4> > ap_var_for_const6;
    sc_signal< sc_lv<64> > ap_var_for_const7;
    sc_signal< sc_lv<8> > ap_var_for_const8;


    // Module declarations
    optical_flow(sc_module_name name);
    SC_HAS_PROCESS(optical_flow);

    ~optical_flow();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    optical_flow_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>* optical_flow_control_s_axi_U;
    optical_flow_gmem0_m_axi<0,64,32,5,16,16,16,16,C_M_AXI_GMEM0_ID_WIDTH,C_M_AXI_GMEM0_ADDR_WIDTH,C_M_AXI_GMEM0_DATA_WIDTH,C_M_AXI_GMEM0_AWUSER_WIDTH,C_M_AXI_GMEM0_ARUSER_WIDTH,C_M_AXI_GMEM0_WUSER_WIDTH,C_M_AXI_GMEM0_RUSER_WIDTH,C_M_AXI_GMEM0_BUSER_WIDTH,C_M_AXI_GMEM0_USER_VALUE,C_M_AXI_GMEM0_PROT_VALUE,C_M_AXI_GMEM0_CACHE_VALUE>* optical_flow_gmem0_m_axi_U;
    optical_flow_gmem1_m_axi<0,64,32,5,16,16,16,16,C_M_AXI_GMEM1_ID_WIDTH,C_M_AXI_GMEM1_ADDR_WIDTH,C_M_AXI_GMEM1_DATA_WIDTH,C_M_AXI_GMEM1_AWUSER_WIDTH,C_M_AXI_GMEM1_ARUSER_WIDTH,C_M_AXI_GMEM1_WUSER_WIDTH,C_M_AXI_GMEM1_RUSER_WIDTH,C_M_AXI_GMEM1_BUSER_WIDTH,C_M_AXI_GMEM1_USER_VALUE,C_M_AXI_GMEM1_PROT_VALUE,C_M_AXI_GMEM1_CACHE_VALUE>* optical_flow_gmem1_m_axi_U;
    optical_flow_entry12* optical_flow_entry12_U0;
    Loop_FRAMES_CP_OUTER* Loop_FRAMES_CP_OUTER_U0;
    gradient_xy_calc* gradient_xy_calc_U0;
    gradient_z_calc* gradient_z_calc_U0;
    gradient_weight_y* gradient_weight_y_U0;
    gradient_weight_x* gradient_weight_x_U0;
    outer_product* outer_product_U0;
    tensor_weight_y* tensor_weight_y_U0;
    tensor_weight_x* tensor_weight_x_U0;
    flow_calc* flow_calc_U0;
    fifo_w32_d2_A* frames_V_c_U;
    fifo_w32_d2_A* outputs_c_U;
    fifo_w8_d10_A* frame1_a_V_U;
    fifo_w8_d10_A* frame2_a_V_U;
    fifo_w8_d10_A* frame3_a_V_U;
    fifo_w8_d10_A* frame3_b_V_U;
    fifo_w8_d10_A* frame4_a_V_U;
    fifo_w8_d10_A* frame5_a_V_U;
    fifo_w32_d10_A* gradient_x_V_U;
    fifo_w32_d10_A* gradient_y_V_U;
    fifo_w32_d40_A* gradient_z_V_U;
    fifo_w1_d10_A* y_filtered_x_V_U;
    fifo_w1_d10_A* y_filtered_y_V_U;
    fifo_w1_d10_A* y_filtered_z_V_U;
    fifo_w32_d10_A* filtered_gradient_x_s_U;
    fifo_w32_d10_A* filtered_gradient_y_s_U;
    fifo_w32_d10_A* filtered_gradient_z_s_U;
    fifo_w191_d10_A* out_product_val_V_U;
    fifo_w192_d10_A* tensor_y_val_V_U;
    fifo_w192_d10_A* tensor_val_V_U;
    start_for_flow_caCeG* start_for_flow_caCeG_U;
    start_for_gradienDeQ* start_for_gradienDeQ_U;
    start_for_gradienEe0* start_for_gradienEe0_U;
    start_for_gradienFfa* start_for_gradienFfa_U;
    start_for_gradienGfk* start_for_gradienGfk_U;
    start_for_outer_pHfu* start_for_outer_pHfu_U;
    start_for_tensor_IfE* start_for_tensor_IfE_U;
    start_for_tensor_JfO* start_for_tensor_JfO_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > frames_V;
    sc_signal< sc_lv<32> > outputs;
    sc_signal< sc_logic > gmem0_AWREADY;
    sc_signal< sc_logic > gmem0_WREADY;
    sc_signal< sc_logic > gmem0_ARREADY;
    sc_signal< sc_logic > gmem0_RVALID;
    sc_signal< sc_lv<64> > gmem0_RDATA;
    sc_signal< sc_logic > gmem0_RLAST;
    sc_signal< sc_lv<1> > gmem0_RID;
    sc_signal< sc_lv<1> > gmem0_RUSER;
    sc_signal< sc_lv<2> > gmem0_RRESP;
    sc_signal< sc_logic > gmem0_BVALID;
    sc_signal< sc_lv<2> > gmem0_BRESP;
    sc_signal< sc_lv<1> > gmem0_BID;
    sc_signal< sc_lv<1> > gmem0_BUSER;
    sc_signal< sc_logic > gmem1_AWREADY;
    sc_signal< sc_logic > gmem1_WREADY;
    sc_signal< sc_logic > gmem1_ARREADY;
    sc_signal< sc_logic > gmem1_RVALID;
    sc_signal< sc_lv<64> > gmem1_RDATA;
    sc_signal< sc_logic > gmem1_RLAST;
    sc_signal< sc_lv<1> > gmem1_RID;
    sc_signal< sc_lv<1> > gmem1_RUSER;
    sc_signal< sc_lv<2> > gmem1_RRESP;
    sc_signal< sc_logic > gmem1_BVALID;
    sc_signal< sc_lv<2> > gmem1_BRESP;
    sc_signal< sc_lv<1> > gmem1_BID;
    sc_signal< sc_lv<1> > gmem1_BUSER;
    sc_signal< sc_logic > optical_flow_entry12_U0_ap_start;
    sc_signal< sc_logic > optical_flow_entry12_U0_ap_done;
    sc_signal< sc_logic > optical_flow_entry12_U0_ap_continue;
    sc_signal< sc_logic > optical_flow_entry12_U0_ap_idle;
    sc_signal< sc_logic > optical_flow_entry12_U0_ap_ready;
    sc_signal< sc_logic > optical_flow_entry12_U0_start_out;
    sc_signal< sc_logic > optical_flow_entry12_U0_start_write;
    sc_signal< sc_lv<32> > optical_flow_entry12_U0_frames_V_out_din;
    sc_signal< sc_logic > optical_flow_entry12_U0_frames_V_out_write;
    sc_signal< sc_lv<32> > optical_flow_entry12_U0_outputs_out_din;
    sc_signal< sc_logic > optical_flow_entry12_U0_outputs_out_write;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_ap_start;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_start_full_n;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_ap_done;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_ap_continue;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_ap_idle;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_ap_ready;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_start_out;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_start_write;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWVALID;
    sc_signal< sc_lv<32> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWADDR;
    sc_signal< sc_lv<1> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWID;
    sc_signal< sc_lv<32> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLEN;
    sc_signal< sc_lv<3> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWSIZE;
    sc_signal< sc_lv<2> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWBURST;
    sc_signal< sc_lv<2> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLOCK;
    sc_signal< sc_lv<4> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWCACHE;
    sc_signal< sc_lv<3> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWPROT;
    sc_signal< sc_lv<4> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWQOS;
    sc_signal< sc_lv<4> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWREGION;
    sc_signal< sc_lv<1> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWUSER;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WVALID;
    sc_signal< sc_lv<64> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WDATA;
    sc_signal< sc_lv<8> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WSTRB;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WLAST;
    sc_signal< sc_lv<1> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WID;
    sc_signal< sc_lv<1> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WUSER;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARVALID;
    sc_signal< sc_lv<32> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARADDR;
    sc_signal< sc_lv<1> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARID;
    sc_signal< sc_lv<32> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLEN;
    sc_signal< sc_lv<3> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARSIZE;
    sc_signal< sc_lv<2> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARBURST;
    sc_signal< sc_lv<2> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLOCK;
    sc_signal< sc_lv<4> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARCACHE;
    sc_signal< sc_lv<3> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARPROT;
    sc_signal< sc_lv<4> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARQOS;
    sc_signal< sc_lv<4> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARREGION;
    sc_signal< sc_lv<1> > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARUSER;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_RREADY;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_BREADY;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_frames_V_offset_read;
    sc_signal< sc_lv<8> > Loop_FRAMES_CP_OUTER_U0_frame1_a_V_din;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_frame1_a_V_write;
    sc_signal< sc_lv<8> > Loop_FRAMES_CP_OUTER_U0_frame2_a_V_din;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_frame2_a_V_write;
    sc_signal< sc_lv<8> > Loop_FRAMES_CP_OUTER_U0_frame3_a_V_din;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_frame3_a_V_write;
    sc_signal< sc_lv<8> > Loop_FRAMES_CP_OUTER_U0_frame3_b_V_din;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_frame3_b_V_write;
    sc_signal< sc_lv<8> > Loop_FRAMES_CP_OUTER_U0_frame4_a_V_din;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_frame4_a_V_write;
    sc_signal< sc_lv<8> > Loop_FRAMES_CP_OUTER_U0_frame5_a_V_din;
    sc_signal< sc_logic > Loop_FRAMES_CP_OUTER_U0_frame5_a_V_write;
    sc_signal< sc_logic > gradient_xy_calc_U0_ap_start;
    sc_signal< sc_logic > gradient_xy_calc_U0_ap_done;
    sc_signal< sc_logic > gradient_xy_calc_U0_ap_continue;
    sc_signal< sc_logic > gradient_xy_calc_U0_ap_idle;
    sc_signal< sc_logic > gradient_xy_calc_U0_ap_ready;
    sc_signal< sc_logic > gradient_xy_calc_U0_start_out;
    sc_signal< sc_logic > gradient_xy_calc_U0_start_write;
    sc_signal< sc_logic > gradient_xy_calc_U0_frame3_a_V_read;
    sc_signal< sc_lv<32> > gradient_xy_calc_U0_gradient_x_V_din;
    sc_signal< sc_logic > gradient_xy_calc_U0_gradient_x_V_write;
    sc_signal< sc_lv<32> > gradient_xy_calc_U0_gradient_y_V_din;
    sc_signal< sc_logic > gradient_xy_calc_U0_gradient_y_V_write;
    sc_signal< sc_logic > gradient_z_calc_U0_ap_start;
    sc_signal< sc_logic > gradient_z_calc_U0_ap_done;
    sc_signal< sc_logic > gradient_z_calc_U0_ap_continue;
    sc_signal< sc_logic > gradient_z_calc_U0_ap_idle;
    sc_signal< sc_logic > gradient_z_calc_U0_ap_ready;
    sc_signal< sc_logic > gradient_z_calc_U0_frame1_a_V_read;
    sc_signal< sc_logic > gradient_z_calc_U0_frame2_a_V_read;
    sc_signal< sc_logic > gradient_z_calc_U0_frame3_b_V_read;
    sc_signal< sc_logic > gradient_z_calc_U0_frame4_a_V_read;
    sc_signal< sc_logic > gradient_z_calc_U0_frame5_a_V_read;
    sc_signal< sc_lv<32> > gradient_z_calc_U0_gradient_z_V_din;
    sc_signal< sc_logic > gradient_z_calc_U0_gradient_z_V_write;
    sc_signal< sc_logic > gradient_weight_y_U0_ap_start;
    sc_signal< sc_logic > gradient_weight_y_U0_ap_done;
    sc_signal< sc_logic > gradient_weight_y_U0_ap_continue;
    sc_signal< sc_logic > gradient_weight_y_U0_ap_idle;
    sc_signal< sc_logic > gradient_weight_y_U0_ap_ready;
    sc_signal< sc_logic > gradient_weight_y_U0_start_out;
    sc_signal< sc_logic > gradient_weight_y_U0_start_write;
    sc_signal< sc_logic > gradient_weight_y_U0_gradient_x_V_read;
    sc_signal< sc_logic > gradient_weight_y_U0_gradient_y_V_read;
    sc_signal< sc_logic > gradient_weight_y_U0_gradient_z_V_read;
    sc_signal< sc_lv<1> > gradient_weight_y_U0_y_filtered_x_V_din;
    sc_signal< sc_logic > gradient_weight_y_U0_y_filtered_x_V_write;
    sc_signal< sc_lv<1> > gradient_weight_y_U0_y_filtered_y_V_din;
    sc_signal< sc_logic > gradient_weight_y_U0_y_filtered_y_V_write;
    sc_signal< sc_lv<1> > gradient_weight_y_U0_y_filtered_z_V_din;
    sc_signal< sc_logic > gradient_weight_y_U0_y_filtered_z_V_write;
    sc_signal< sc_logic > gradient_weight_x_U0_ap_start;
    sc_signal< sc_logic > gradient_weight_x_U0_ap_done;
    sc_signal< sc_logic > gradient_weight_x_U0_ap_continue;
    sc_signal< sc_logic > gradient_weight_x_U0_ap_idle;
    sc_signal< sc_logic > gradient_weight_x_U0_ap_ready;
    sc_signal< sc_logic > gradient_weight_x_U0_start_out;
    sc_signal< sc_logic > gradient_weight_x_U0_start_write;
    sc_signal< sc_logic > gradient_weight_x_U0_y_filtered_x_V_read;
    sc_signal< sc_logic > gradient_weight_x_U0_y_filtered_y_V_read;
    sc_signal< sc_logic > gradient_weight_x_U0_y_filtered_z_V_read;
    sc_signal< sc_lv<32> > gradient_weight_x_U0_filtered_gradient_x_s_din;
    sc_signal< sc_logic > gradient_weight_x_U0_filtered_gradient_x_s_write;
    sc_signal< sc_lv<32> > gradient_weight_x_U0_filtered_gradient_y_s_din;
    sc_signal< sc_logic > gradient_weight_x_U0_filtered_gradient_y_s_write;
    sc_signal< sc_lv<32> > gradient_weight_x_U0_filtered_gradient_z_s_din;
    sc_signal< sc_logic > gradient_weight_x_U0_filtered_gradient_z_s_write;
    sc_signal< sc_logic > outer_product_U0_ap_start;
    sc_signal< sc_logic > outer_product_U0_ap_done;
    sc_signal< sc_logic > outer_product_U0_ap_continue;
    sc_signal< sc_logic > outer_product_U0_ap_idle;
    sc_signal< sc_logic > outer_product_U0_ap_ready;
    sc_signal< sc_logic > outer_product_U0_start_out;
    sc_signal< sc_logic > outer_product_U0_start_write;
    sc_signal< sc_logic > outer_product_U0_filtered_gradient_x_s_read;
    sc_signal< sc_logic > outer_product_U0_filtered_gradient_y_s_read;
    sc_signal< sc_logic > outer_product_U0_filtered_gradient_z_s_read;
    sc_signal< sc_lv<191> > outer_product_U0_out_product_val_V_din;
    sc_signal< sc_logic > outer_product_U0_out_product_val_V_write;
    sc_signal< sc_logic > tensor_weight_y_U0_ap_start;
    sc_signal< sc_logic > tensor_weight_y_U0_ap_done;
    sc_signal< sc_logic > tensor_weight_y_U0_ap_continue;
    sc_signal< sc_logic > tensor_weight_y_U0_ap_idle;
    sc_signal< sc_logic > tensor_weight_y_U0_ap_ready;
    sc_signal< sc_logic > tensor_weight_y_U0_start_out;
    sc_signal< sc_logic > tensor_weight_y_U0_start_write;
    sc_signal< sc_logic > tensor_weight_y_U0_out_product_val_V_read;
    sc_signal< sc_lv<192> > tensor_weight_y_U0_tensor_y_val_V_din;
    sc_signal< sc_logic > tensor_weight_y_U0_tensor_y_val_V_write;
    sc_signal< sc_logic > tensor_weight_x_U0_ap_start;
    sc_signal< sc_logic > tensor_weight_x_U0_ap_done;
    sc_signal< sc_logic > tensor_weight_x_U0_ap_continue;
    sc_signal< sc_logic > tensor_weight_x_U0_ap_idle;
    sc_signal< sc_logic > tensor_weight_x_U0_ap_ready;
    sc_signal< sc_logic > tensor_weight_x_U0_tensor_y_val_V_read;
    sc_signal< sc_lv<192> > tensor_weight_x_U0_tensor_val_V_din;
    sc_signal< sc_logic > tensor_weight_x_U0_tensor_val_V_write;
    sc_signal< sc_logic > flow_calc_U0_ap_start;
    sc_signal< sc_logic > flow_calc_U0_ap_done;
    sc_signal< sc_logic > flow_calc_U0_ap_continue;
    sc_signal< sc_logic > flow_calc_U0_ap_idle;
    sc_signal< sc_logic > flow_calc_U0_ap_ready;
    sc_signal< sc_logic > flow_calc_U0_m_axi_outputs_AWVALID;
    sc_signal< sc_lv<32> > flow_calc_U0_m_axi_outputs_AWADDR;
    sc_signal< sc_lv<1> > flow_calc_U0_m_axi_outputs_AWID;
    sc_signal< sc_lv<32> > flow_calc_U0_m_axi_outputs_AWLEN;
    sc_signal< sc_lv<3> > flow_calc_U0_m_axi_outputs_AWSIZE;
    sc_signal< sc_lv<2> > flow_calc_U0_m_axi_outputs_AWBURST;
    sc_signal< sc_lv<2> > flow_calc_U0_m_axi_outputs_AWLOCK;
    sc_signal< sc_lv<4> > flow_calc_U0_m_axi_outputs_AWCACHE;
    sc_signal< sc_lv<3> > flow_calc_U0_m_axi_outputs_AWPROT;
    sc_signal< sc_lv<4> > flow_calc_U0_m_axi_outputs_AWQOS;
    sc_signal< sc_lv<4> > flow_calc_U0_m_axi_outputs_AWREGION;
    sc_signal< sc_lv<1> > flow_calc_U0_m_axi_outputs_AWUSER;
    sc_signal< sc_logic > flow_calc_U0_m_axi_outputs_WVALID;
    sc_signal< sc_lv<64> > flow_calc_U0_m_axi_outputs_WDATA;
    sc_signal< sc_lv<8> > flow_calc_U0_m_axi_outputs_WSTRB;
    sc_signal< sc_logic > flow_calc_U0_m_axi_outputs_WLAST;
    sc_signal< sc_lv<1> > flow_calc_U0_m_axi_outputs_WID;
    sc_signal< sc_lv<1> > flow_calc_U0_m_axi_outputs_WUSER;
    sc_signal< sc_logic > flow_calc_U0_m_axi_outputs_ARVALID;
    sc_signal< sc_lv<32> > flow_calc_U0_m_axi_outputs_ARADDR;
    sc_signal< sc_lv<1> > flow_calc_U0_m_axi_outputs_ARID;
    sc_signal< sc_lv<32> > flow_calc_U0_m_axi_outputs_ARLEN;
    sc_signal< sc_lv<3> > flow_calc_U0_m_axi_outputs_ARSIZE;
    sc_signal< sc_lv<2> > flow_calc_U0_m_axi_outputs_ARBURST;
    sc_signal< sc_lv<2> > flow_calc_U0_m_axi_outputs_ARLOCK;
    sc_signal< sc_lv<4> > flow_calc_U0_m_axi_outputs_ARCACHE;
    sc_signal< sc_lv<3> > flow_calc_U0_m_axi_outputs_ARPROT;
    sc_signal< sc_lv<4> > flow_calc_U0_m_axi_outputs_ARQOS;
    sc_signal< sc_lv<4> > flow_calc_U0_m_axi_outputs_ARREGION;
    sc_signal< sc_lv<1> > flow_calc_U0_m_axi_outputs_ARUSER;
    sc_signal< sc_logic > flow_calc_U0_m_axi_outputs_RREADY;
    sc_signal< sc_logic > flow_calc_U0_m_axi_outputs_BREADY;
    sc_signal< sc_logic > flow_calc_U0_outputs_offset_read;
    sc_signal< sc_logic > flow_calc_U0_tensor_val_V_read;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > frames_V_c_full_n;
    sc_signal< sc_lv<32> > frames_V_c_dout;
    sc_signal< sc_logic > frames_V_c_empty_n;
    sc_signal< sc_logic > outputs_c_full_n;
    sc_signal< sc_lv<32> > outputs_c_dout;
    sc_signal< sc_logic > outputs_c_empty_n;
    sc_signal< sc_logic > frame1_a_V_full_n;
    sc_signal< sc_lv<8> > frame1_a_V_dout;
    sc_signal< sc_logic > frame1_a_V_empty_n;
    sc_signal< sc_logic > frame2_a_V_full_n;
    sc_signal< sc_lv<8> > frame2_a_V_dout;
    sc_signal< sc_logic > frame2_a_V_empty_n;
    sc_signal< sc_logic > frame3_a_V_full_n;
    sc_signal< sc_lv<8> > frame3_a_V_dout;
    sc_signal< sc_logic > frame3_a_V_empty_n;
    sc_signal< sc_logic > frame3_b_V_full_n;
    sc_signal< sc_lv<8> > frame3_b_V_dout;
    sc_signal< sc_logic > frame3_b_V_empty_n;
    sc_signal< sc_logic > frame4_a_V_full_n;
    sc_signal< sc_lv<8> > frame4_a_V_dout;
    sc_signal< sc_logic > frame4_a_V_empty_n;
    sc_signal< sc_logic > frame5_a_V_full_n;
    sc_signal< sc_lv<8> > frame5_a_V_dout;
    sc_signal< sc_logic > frame5_a_V_empty_n;
    sc_signal< sc_logic > gradient_x_V_full_n;
    sc_signal< sc_lv<32> > gradient_x_V_dout;
    sc_signal< sc_logic > gradient_x_V_empty_n;
    sc_signal< sc_logic > gradient_y_V_full_n;
    sc_signal< sc_lv<32> > gradient_y_V_dout;
    sc_signal< sc_logic > gradient_y_V_empty_n;
    sc_signal< sc_logic > gradient_z_V_full_n;
    sc_signal< sc_lv<32> > gradient_z_V_dout;
    sc_signal< sc_logic > gradient_z_V_empty_n;
    sc_signal< sc_logic > y_filtered_x_V_full_n;
    sc_signal< sc_lv<1> > y_filtered_x_V_dout;
    sc_signal< sc_logic > y_filtered_x_V_empty_n;
    sc_signal< sc_logic > y_filtered_y_V_full_n;
    sc_signal< sc_lv<1> > y_filtered_y_V_dout;
    sc_signal< sc_logic > y_filtered_y_V_empty_n;
    sc_signal< sc_logic > y_filtered_z_V_full_n;
    sc_signal< sc_lv<1> > y_filtered_z_V_dout;
    sc_signal< sc_logic > y_filtered_z_V_empty_n;
    sc_signal< sc_logic > filtered_gradient_x_s_full_n;
    sc_signal< sc_lv<32> > filtered_gradient_x_s_dout;
    sc_signal< sc_logic > filtered_gradient_x_s_empty_n;
    sc_signal< sc_logic > filtered_gradient_y_s_full_n;
    sc_signal< sc_lv<32> > filtered_gradient_y_s_dout;
    sc_signal< sc_logic > filtered_gradient_y_s_empty_n;
    sc_signal< sc_logic > filtered_gradient_z_s_full_n;
    sc_signal< sc_lv<32> > filtered_gradient_z_s_dout;
    sc_signal< sc_logic > filtered_gradient_z_s_empty_n;
    sc_signal< sc_logic > out_product_val_V_full_n;
    sc_signal< sc_lv<191> > out_product_val_V_dout;
    sc_signal< sc_logic > out_product_val_V_empty_n;
    sc_signal< sc_logic > tensor_y_val_V_full_n;
    sc_signal< sc_lv<192> > tensor_y_val_V_dout;
    sc_signal< sc_logic > tensor_y_val_V_empty_n;
    sc_signal< sc_logic > tensor_val_V_full_n;
    sc_signal< sc_lv<192> > tensor_val_V_dout;
    sc_signal< sc_logic > tensor_val_V_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready;
    sc_signal< sc_lv<2> > Loop_FRAMES_CP_OUTER_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_optical_flow_entry12_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_optical_flow_entry12_U0_ap_ready;
    sc_signal< sc_lv<2> > optical_flow_entry12_U0_ap_ready_count;
    sc_signal< sc_lv<1> > start_for_flow_calc_U0_din;
    sc_signal< sc_logic > start_for_flow_calc_U0_full_n;
    sc_signal< sc_lv<1> > start_for_flow_calc_U0_dout;
    sc_signal< sc_logic > start_for_flow_calc_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_gradient_xy_calc_U0_din;
    sc_signal< sc_logic > start_for_gradient_xy_calc_U0_full_n;
    sc_signal< sc_lv<1> > start_for_gradient_xy_calc_U0_dout;
    sc_signal< sc_logic > start_for_gradient_xy_calc_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_gradient_z_calc_U0_din;
    sc_signal< sc_logic > start_for_gradient_z_calc_U0_full_n;
    sc_signal< sc_lv<1> > start_for_gradient_z_calc_U0_dout;
    sc_signal< sc_logic > start_for_gradient_z_calc_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_gradient_weight_y_U0_din;
    sc_signal< sc_logic > start_for_gradient_weight_y_U0_full_n;
    sc_signal< sc_lv<1> > start_for_gradient_weight_y_U0_dout;
    sc_signal< sc_logic > start_for_gradient_weight_y_U0_empty_n;
    sc_signal< sc_logic > gradient_z_calc_U0_start_full_n;
    sc_signal< sc_logic > gradient_z_calc_U0_start_write;
    sc_signal< sc_lv<1> > start_for_gradient_weight_x_U0_din;
    sc_signal< sc_logic > start_for_gradient_weight_x_U0_full_n;
    sc_signal< sc_lv<1> > start_for_gradient_weight_x_U0_dout;
    sc_signal< sc_logic > start_for_gradient_weight_x_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_outer_product_U0_din;
    sc_signal< sc_logic > start_for_outer_product_U0_full_n;
    sc_signal< sc_lv<1> > start_for_outer_product_U0_dout;
    sc_signal< sc_logic > start_for_outer_product_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_tensor_weight_y_U0_din;
    sc_signal< sc_logic > start_for_tensor_weight_y_U0_full_n;
    sc_signal< sc_lv<1> > start_for_tensor_weight_y_U0_dout;
    sc_signal< sc_logic > start_for_tensor_weight_y_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_tensor_weight_x_U0_din;
    sc_signal< sc_logic > start_for_tensor_weight_x_U0_full_n;
    sc_signal< sc_lv<1> > start_for_tensor_weight_x_U0_dout;
    sc_signal< sc_logic > start_for_tensor_weight_x_U0_empty_n;
    sc_signal< sc_logic > tensor_weight_x_U0_start_full_n;
    sc_signal< sc_logic > tensor_weight_x_U0_start_write;
    sc_signal< sc_logic > flow_calc_U0_start_full_n;
    sc_signal< sc_logic > flow_calc_U0_start_write;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const int C_M_AXI_GMEM0_USER_VALUE;
    static const int C_M_AXI_GMEM0_PROT_VALUE;
    static const int C_M_AXI_GMEM0_CACHE_VALUE;
    static const int C_M_AXI_ID_WIDTH;
    static const int C_M_AXI_ADDR_WIDTH;
    static const int C_M_AXI_DATA_WIDTH;
    static const int C_M_AXI_WSTRB_WIDTH;
    static const int C_M_AXI_AWUSER_WIDTH;
    static const int C_M_AXI_ARUSER_WIDTH;
    static const int C_M_AXI_WUSER_WIDTH;
    static const int C_M_AXI_RUSER_WIDTH;
    static const int C_M_AXI_BUSER_WIDTH;
    static const int C_M_AXI_GMEM1_USER_VALUE;
    static const int C_M_AXI_GMEM1_PROT_VALUE;
    static const int C_M_AXI_GMEM1_CACHE_VALUE;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_Loop_FRAMES_CP_OUTER_U0_ap_continue();
    void thread_Loop_FRAMES_CP_OUTER_U0_ap_start();
    void thread_Loop_FRAMES_CP_OUTER_U0_start_full_n();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_optical_flow_entry12_U0_ap_ready();
    void thread_ap_sync_ready();
    void thread_flow_calc_U0_ap_continue();
    void thread_flow_calc_U0_ap_start();
    void thread_flow_calc_U0_start_full_n();
    void thread_flow_calc_U0_start_write();
    void thread_gradient_weight_x_U0_ap_continue();
    void thread_gradient_weight_x_U0_ap_start();
    void thread_gradient_weight_y_U0_ap_continue();
    void thread_gradient_weight_y_U0_ap_start();
    void thread_gradient_xy_calc_U0_ap_continue();
    void thread_gradient_xy_calc_U0_ap_start();
    void thread_gradient_z_calc_U0_ap_continue();
    void thread_gradient_z_calc_U0_ap_start();
    void thread_gradient_z_calc_U0_start_full_n();
    void thread_gradient_z_calc_U0_start_write();
    void thread_optical_flow_entry12_U0_ap_continue();
    void thread_optical_flow_entry12_U0_ap_start();
    void thread_outer_product_U0_ap_continue();
    void thread_outer_product_U0_ap_start();
    void thread_start_for_flow_calc_U0_din();
    void thread_start_for_gradient_weight_x_U0_din();
    void thread_start_for_gradient_weight_y_U0_din();
    void thread_start_for_gradient_xy_calc_U0_din();
    void thread_start_for_gradient_z_calc_U0_din();
    void thread_start_for_outer_product_U0_din();
    void thread_start_for_tensor_weight_x_U0_din();
    void thread_start_for_tensor_weight_y_U0_din();
    void thread_tensor_weight_x_U0_ap_continue();
    void thread_tensor_weight_x_U0_ap_start();
    void thread_tensor_weight_x_U0_start_full_n();
    void thread_tensor_weight_x_U0_start_write();
    void thread_tensor_weight_y_U0_ap_continue();
    void thread_tensor_weight_y_U0_ap_start();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
