// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "optical_flow.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int optical_flow::C_S_AXI_DATA_WIDTH = "100000";
const int optical_flow::C_S_AXI_WSTRB_WIDTH = "100";
const int optical_flow::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic optical_flow::ap_const_logic_1 = sc_dt::Log_1;
const int optical_flow::C_M_AXI_GMEM0_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int optical_flow::C_M_AXI_GMEM0_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int optical_flow::C_M_AXI_GMEM0_CACHE_VALUE = "11";
const int optical_flow::C_M_AXI_ID_WIDTH = "1";
const int optical_flow::C_M_AXI_ADDR_WIDTH = "100000";
const int optical_flow::C_M_AXI_DATA_WIDTH = "100000";
const int optical_flow::C_M_AXI_WSTRB_WIDTH = "100";
const int optical_flow::C_M_AXI_AWUSER_WIDTH = "1";
const int optical_flow::C_M_AXI_ARUSER_WIDTH = "1";
const int optical_flow::C_M_AXI_WUSER_WIDTH = "1";
const int optical_flow::C_M_AXI_RUSER_WIDTH = "1";
const int optical_flow::C_M_AXI_BUSER_WIDTH = "1";
const int optical_flow::C_M_AXI_GMEM1_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int optical_flow::C_M_AXI_GMEM1_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int optical_flow::C_M_AXI_GMEM1_CACHE_VALUE = "11";
const sc_logic optical_flow::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> optical_flow::ap_const_lv2_0 = "00";
const sc_lv<2> optical_flow::ap_const_lv2_1 = "1";
const bool optical_flow::ap_const_boolean_1 = true;
const sc_lv<32> optical_flow::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> optical_flow::ap_const_lv32_1 = "1";
const sc_lv<1> optical_flow::ap_const_lv1_0 = "0";
const sc_lv<1> optical_flow::ap_const_lv1_1 = "1";
const sc_lv<3> optical_flow::ap_const_lv3_0 = "000";
const sc_lv<3> optical_flow::ap_const_lv3_1 = "1";
const sc_lv<4> optical_flow::ap_const_lv4_0 = "0000";
const sc_lv<4> optical_flow::ap_const_lv4_1 = "1";
const sc_lv<64> optical_flow::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> optical_flow::ap_const_lv64_1 = "1";
const sc_lv<8> optical_flow::ap_const_lv8_0 = "00000000";
const sc_lv<8> optical_flow::ap_const_lv8_1 = "1";

optical_flow::optical_flow(sc_module_name name) : sc_module(name), mVcdFile(0) {
    optical_flow_control_s_axi_U = new optical_flow_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("optical_flow_control_s_axi_U");
    optical_flow_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    optical_flow_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    optical_flow_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    optical_flow_control_s_axi_U->WVALID(s_axi_control_WVALID);
    optical_flow_control_s_axi_U->WREADY(s_axi_control_WREADY);
    optical_flow_control_s_axi_U->WDATA(s_axi_control_WDATA);
    optical_flow_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    optical_flow_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    optical_flow_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    optical_flow_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    optical_flow_control_s_axi_U->RVALID(s_axi_control_RVALID);
    optical_flow_control_s_axi_U->RREADY(s_axi_control_RREADY);
    optical_flow_control_s_axi_U->RDATA(s_axi_control_RDATA);
    optical_flow_control_s_axi_U->RRESP(s_axi_control_RRESP);
    optical_flow_control_s_axi_U->BVALID(s_axi_control_BVALID);
    optical_flow_control_s_axi_U->BREADY(s_axi_control_BREADY);
    optical_flow_control_s_axi_U->BRESP(s_axi_control_BRESP);
    optical_flow_control_s_axi_U->ACLK(ap_clk);
    optical_flow_control_s_axi_U->ARESET(ap_rst_n_inv);
    optical_flow_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    optical_flow_control_s_axi_U->ap_start(ap_start);
    optical_flow_control_s_axi_U->interrupt(interrupt);
    optical_flow_control_s_axi_U->ap_ready(ap_ready);
    optical_flow_control_s_axi_U->ap_done(ap_done);
    optical_flow_control_s_axi_U->ap_idle(ap_idle);
    optical_flow_control_s_axi_U->frames_V(frames_V);
    optical_flow_control_s_axi_U->outputs(outputs);
    optical_flow_gmem0_m_axi_U = new optical_flow_gmem0_m_axi<0,64,32,5,16,16,16,16,C_M_AXI_GMEM0_ID_WIDTH,C_M_AXI_GMEM0_ADDR_WIDTH,C_M_AXI_GMEM0_DATA_WIDTH,C_M_AXI_GMEM0_AWUSER_WIDTH,C_M_AXI_GMEM0_ARUSER_WIDTH,C_M_AXI_GMEM0_WUSER_WIDTH,C_M_AXI_GMEM0_RUSER_WIDTH,C_M_AXI_GMEM0_BUSER_WIDTH,C_M_AXI_GMEM0_USER_VALUE,C_M_AXI_GMEM0_PROT_VALUE,C_M_AXI_GMEM0_CACHE_VALUE>("optical_flow_gmem0_m_axi_U");
    optical_flow_gmem0_m_axi_U->AWVALID(m_axi_gmem0_AWVALID);
    optical_flow_gmem0_m_axi_U->AWREADY(m_axi_gmem0_AWREADY);
    optical_flow_gmem0_m_axi_U->AWADDR(m_axi_gmem0_AWADDR);
    optical_flow_gmem0_m_axi_U->AWID(m_axi_gmem0_AWID);
    optical_flow_gmem0_m_axi_U->AWLEN(m_axi_gmem0_AWLEN);
    optical_flow_gmem0_m_axi_U->AWSIZE(m_axi_gmem0_AWSIZE);
    optical_flow_gmem0_m_axi_U->AWBURST(m_axi_gmem0_AWBURST);
    optical_flow_gmem0_m_axi_U->AWLOCK(m_axi_gmem0_AWLOCK);
    optical_flow_gmem0_m_axi_U->AWCACHE(m_axi_gmem0_AWCACHE);
    optical_flow_gmem0_m_axi_U->AWPROT(m_axi_gmem0_AWPROT);
    optical_flow_gmem0_m_axi_U->AWQOS(m_axi_gmem0_AWQOS);
    optical_flow_gmem0_m_axi_U->AWREGION(m_axi_gmem0_AWREGION);
    optical_flow_gmem0_m_axi_U->AWUSER(m_axi_gmem0_AWUSER);
    optical_flow_gmem0_m_axi_U->WVALID(m_axi_gmem0_WVALID);
    optical_flow_gmem0_m_axi_U->WREADY(m_axi_gmem0_WREADY);
    optical_flow_gmem0_m_axi_U->WDATA(m_axi_gmem0_WDATA);
    optical_flow_gmem0_m_axi_U->WSTRB(m_axi_gmem0_WSTRB);
    optical_flow_gmem0_m_axi_U->WLAST(m_axi_gmem0_WLAST);
    optical_flow_gmem0_m_axi_U->WID(m_axi_gmem0_WID);
    optical_flow_gmem0_m_axi_U->WUSER(m_axi_gmem0_WUSER);
    optical_flow_gmem0_m_axi_U->ARVALID(m_axi_gmem0_ARVALID);
    optical_flow_gmem0_m_axi_U->ARREADY(m_axi_gmem0_ARREADY);
    optical_flow_gmem0_m_axi_U->ARADDR(m_axi_gmem0_ARADDR);
    optical_flow_gmem0_m_axi_U->ARID(m_axi_gmem0_ARID);
    optical_flow_gmem0_m_axi_U->ARLEN(m_axi_gmem0_ARLEN);
    optical_flow_gmem0_m_axi_U->ARSIZE(m_axi_gmem0_ARSIZE);
    optical_flow_gmem0_m_axi_U->ARBURST(m_axi_gmem0_ARBURST);
    optical_flow_gmem0_m_axi_U->ARLOCK(m_axi_gmem0_ARLOCK);
    optical_flow_gmem0_m_axi_U->ARCACHE(m_axi_gmem0_ARCACHE);
    optical_flow_gmem0_m_axi_U->ARPROT(m_axi_gmem0_ARPROT);
    optical_flow_gmem0_m_axi_U->ARQOS(m_axi_gmem0_ARQOS);
    optical_flow_gmem0_m_axi_U->ARREGION(m_axi_gmem0_ARREGION);
    optical_flow_gmem0_m_axi_U->ARUSER(m_axi_gmem0_ARUSER);
    optical_flow_gmem0_m_axi_U->RVALID(m_axi_gmem0_RVALID);
    optical_flow_gmem0_m_axi_U->RREADY(m_axi_gmem0_RREADY);
    optical_flow_gmem0_m_axi_U->RDATA(m_axi_gmem0_RDATA);
    optical_flow_gmem0_m_axi_U->RLAST(m_axi_gmem0_RLAST);
    optical_flow_gmem0_m_axi_U->RID(m_axi_gmem0_RID);
    optical_flow_gmem0_m_axi_U->RUSER(m_axi_gmem0_RUSER);
    optical_flow_gmem0_m_axi_U->RRESP(m_axi_gmem0_RRESP);
    optical_flow_gmem0_m_axi_U->BVALID(m_axi_gmem0_BVALID);
    optical_flow_gmem0_m_axi_U->BREADY(m_axi_gmem0_BREADY);
    optical_flow_gmem0_m_axi_U->BRESP(m_axi_gmem0_BRESP);
    optical_flow_gmem0_m_axi_U->BID(m_axi_gmem0_BID);
    optical_flow_gmem0_m_axi_U->BUSER(m_axi_gmem0_BUSER);
    optical_flow_gmem0_m_axi_U->ACLK(ap_clk);
    optical_flow_gmem0_m_axi_U->ARESET(ap_rst_n_inv);
    optical_flow_gmem0_m_axi_U->ACLK_EN(ap_var_for_const0);
    optical_flow_gmem0_m_axi_U->I_ARVALID(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARVALID);
    optical_flow_gmem0_m_axi_U->I_ARREADY(gmem0_ARREADY);
    optical_flow_gmem0_m_axi_U->I_ARADDR(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARADDR);
    optical_flow_gmem0_m_axi_U->I_ARID(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARID);
    optical_flow_gmem0_m_axi_U->I_ARLEN(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLEN);
    optical_flow_gmem0_m_axi_U->I_ARSIZE(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARSIZE);
    optical_flow_gmem0_m_axi_U->I_ARLOCK(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLOCK);
    optical_flow_gmem0_m_axi_U->I_ARCACHE(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARCACHE);
    optical_flow_gmem0_m_axi_U->I_ARQOS(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARQOS);
    optical_flow_gmem0_m_axi_U->I_ARPROT(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARPROT);
    optical_flow_gmem0_m_axi_U->I_ARUSER(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARUSER);
    optical_flow_gmem0_m_axi_U->I_ARBURST(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARBURST);
    optical_flow_gmem0_m_axi_U->I_ARREGION(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARREGION);
    optical_flow_gmem0_m_axi_U->I_RVALID(gmem0_RVALID);
    optical_flow_gmem0_m_axi_U->I_RREADY(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_RREADY);
    optical_flow_gmem0_m_axi_U->I_RDATA(gmem0_RDATA);
    optical_flow_gmem0_m_axi_U->I_RID(gmem0_RID);
    optical_flow_gmem0_m_axi_U->I_RUSER(gmem0_RUSER);
    optical_flow_gmem0_m_axi_U->I_RRESP(gmem0_RRESP);
    optical_flow_gmem0_m_axi_U->I_RLAST(gmem0_RLAST);
    optical_flow_gmem0_m_axi_U->I_AWVALID(ap_var_for_const1);
    optical_flow_gmem0_m_axi_U->I_AWREADY(gmem0_AWREADY);
    optical_flow_gmem0_m_axi_U->I_AWADDR(ap_var_for_const2);
    optical_flow_gmem0_m_axi_U->I_AWID(ap_var_for_const3);
    optical_flow_gmem0_m_axi_U->I_AWLEN(ap_var_for_const2);
    optical_flow_gmem0_m_axi_U->I_AWSIZE(ap_var_for_const4);
    optical_flow_gmem0_m_axi_U->I_AWLOCK(ap_var_for_const5);
    optical_flow_gmem0_m_axi_U->I_AWCACHE(ap_var_for_const6);
    optical_flow_gmem0_m_axi_U->I_AWQOS(ap_var_for_const6);
    optical_flow_gmem0_m_axi_U->I_AWPROT(ap_var_for_const4);
    optical_flow_gmem0_m_axi_U->I_AWUSER(ap_var_for_const3);
    optical_flow_gmem0_m_axi_U->I_AWBURST(ap_var_for_const5);
    optical_flow_gmem0_m_axi_U->I_AWREGION(ap_var_for_const6);
    optical_flow_gmem0_m_axi_U->I_WVALID(ap_var_for_const1);
    optical_flow_gmem0_m_axi_U->I_WREADY(gmem0_WREADY);
    optical_flow_gmem0_m_axi_U->I_WDATA(ap_var_for_const7);
    optical_flow_gmem0_m_axi_U->I_WID(ap_var_for_const3);
    optical_flow_gmem0_m_axi_U->I_WUSER(ap_var_for_const3);
    optical_flow_gmem0_m_axi_U->I_WLAST(ap_var_for_const1);
    optical_flow_gmem0_m_axi_U->I_WSTRB(ap_var_for_const8);
    optical_flow_gmem0_m_axi_U->I_BVALID(gmem0_BVALID);
    optical_flow_gmem0_m_axi_U->I_BREADY(ap_var_for_const1);
    optical_flow_gmem0_m_axi_U->I_BRESP(gmem0_BRESP);
    optical_flow_gmem0_m_axi_U->I_BID(gmem0_BID);
    optical_flow_gmem0_m_axi_U->I_BUSER(gmem0_BUSER);
    optical_flow_gmem1_m_axi_U = new optical_flow_gmem1_m_axi<0,64,32,5,16,16,16,16,C_M_AXI_GMEM1_ID_WIDTH,C_M_AXI_GMEM1_ADDR_WIDTH,C_M_AXI_GMEM1_DATA_WIDTH,C_M_AXI_GMEM1_AWUSER_WIDTH,C_M_AXI_GMEM1_ARUSER_WIDTH,C_M_AXI_GMEM1_WUSER_WIDTH,C_M_AXI_GMEM1_RUSER_WIDTH,C_M_AXI_GMEM1_BUSER_WIDTH,C_M_AXI_GMEM1_USER_VALUE,C_M_AXI_GMEM1_PROT_VALUE,C_M_AXI_GMEM1_CACHE_VALUE>("optical_flow_gmem1_m_axi_U");
    optical_flow_gmem1_m_axi_U->AWVALID(m_axi_gmem1_AWVALID);
    optical_flow_gmem1_m_axi_U->AWREADY(m_axi_gmem1_AWREADY);
    optical_flow_gmem1_m_axi_U->AWADDR(m_axi_gmem1_AWADDR);
    optical_flow_gmem1_m_axi_U->AWID(m_axi_gmem1_AWID);
    optical_flow_gmem1_m_axi_U->AWLEN(m_axi_gmem1_AWLEN);
    optical_flow_gmem1_m_axi_U->AWSIZE(m_axi_gmem1_AWSIZE);
    optical_flow_gmem1_m_axi_U->AWBURST(m_axi_gmem1_AWBURST);
    optical_flow_gmem1_m_axi_U->AWLOCK(m_axi_gmem1_AWLOCK);
    optical_flow_gmem1_m_axi_U->AWCACHE(m_axi_gmem1_AWCACHE);
    optical_flow_gmem1_m_axi_U->AWPROT(m_axi_gmem1_AWPROT);
    optical_flow_gmem1_m_axi_U->AWQOS(m_axi_gmem1_AWQOS);
    optical_flow_gmem1_m_axi_U->AWREGION(m_axi_gmem1_AWREGION);
    optical_flow_gmem1_m_axi_U->AWUSER(m_axi_gmem1_AWUSER);
    optical_flow_gmem1_m_axi_U->WVALID(m_axi_gmem1_WVALID);
    optical_flow_gmem1_m_axi_U->WREADY(m_axi_gmem1_WREADY);
    optical_flow_gmem1_m_axi_U->WDATA(m_axi_gmem1_WDATA);
    optical_flow_gmem1_m_axi_U->WSTRB(m_axi_gmem1_WSTRB);
    optical_flow_gmem1_m_axi_U->WLAST(m_axi_gmem1_WLAST);
    optical_flow_gmem1_m_axi_U->WID(m_axi_gmem1_WID);
    optical_flow_gmem1_m_axi_U->WUSER(m_axi_gmem1_WUSER);
    optical_flow_gmem1_m_axi_U->ARVALID(m_axi_gmem1_ARVALID);
    optical_flow_gmem1_m_axi_U->ARREADY(m_axi_gmem1_ARREADY);
    optical_flow_gmem1_m_axi_U->ARADDR(m_axi_gmem1_ARADDR);
    optical_flow_gmem1_m_axi_U->ARID(m_axi_gmem1_ARID);
    optical_flow_gmem1_m_axi_U->ARLEN(m_axi_gmem1_ARLEN);
    optical_flow_gmem1_m_axi_U->ARSIZE(m_axi_gmem1_ARSIZE);
    optical_flow_gmem1_m_axi_U->ARBURST(m_axi_gmem1_ARBURST);
    optical_flow_gmem1_m_axi_U->ARLOCK(m_axi_gmem1_ARLOCK);
    optical_flow_gmem1_m_axi_U->ARCACHE(m_axi_gmem1_ARCACHE);
    optical_flow_gmem1_m_axi_U->ARPROT(m_axi_gmem1_ARPROT);
    optical_flow_gmem1_m_axi_U->ARQOS(m_axi_gmem1_ARQOS);
    optical_flow_gmem1_m_axi_U->ARREGION(m_axi_gmem1_ARREGION);
    optical_flow_gmem1_m_axi_U->ARUSER(m_axi_gmem1_ARUSER);
    optical_flow_gmem1_m_axi_U->RVALID(m_axi_gmem1_RVALID);
    optical_flow_gmem1_m_axi_U->RREADY(m_axi_gmem1_RREADY);
    optical_flow_gmem1_m_axi_U->RDATA(m_axi_gmem1_RDATA);
    optical_flow_gmem1_m_axi_U->RLAST(m_axi_gmem1_RLAST);
    optical_flow_gmem1_m_axi_U->RID(m_axi_gmem1_RID);
    optical_flow_gmem1_m_axi_U->RUSER(m_axi_gmem1_RUSER);
    optical_flow_gmem1_m_axi_U->RRESP(m_axi_gmem1_RRESP);
    optical_flow_gmem1_m_axi_U->BVALID(m_axi_gmem1_BVALID);
    optical_flow_gmem1_m_axi_U->BREADY(m_axi_gmem1_BREADY);
    optical_flow_gmem1_m_axi_U->BRESP(m_axi_gmem1_BRESP);
    optical_flow_gmem1_m_axi_U->BID(m_axi_gmem1_BID);
    optical_flow_gmem1_m_axi_U->BUSER(m_axi_gmem1_BUSER);
    optical_flow_gmem1_m_axi_U->ACLK(ap_clk);
    optical_flow_gmem1_m_axi_U->ARESET(ap_rst_n_inv);
    optical_flow_gmem1_m_axi_U->ACLK_EN(ap_var_for_const0);
    optical_flow_gmem1_m_axi_U->I_ARVALID(ap_var_for_const1);
    optical_flow_gmem1_m_axi_U->I_ARREADY(gmem1_ARREADY);
    optical_flow_gmem1_m_axi_U->I_ARADDR(ap_var_for_const2);
    optical_flow_gmem1_m_axi_U->I_ARID(ap_var_for_const3);
    optical_flow_gmem1_m_axi_U->I_ARLEN(ap_var_for_const2);
    optical_flow_gmem1_m_axi_U->I_ARSIZE(ap_var_for_const4);
    optical_flow_gmem1_m_axi_U->I_ARLOCK(ap_var_for_const5);
    optical_flow_gmem1_m_axi_U->I_ARCACHE(ap_var_for_const6);
    optical_flow_gmem1_m_axi_U->I_ARQOS(ap_var_for_const6);
    optical_flow_gmem1_m_axi_U->I_ARPROT(ap_var_for_const4);
    optical_flow_gmem1_m_axi_U->I_ARUSER(ap_var_for_const3);
    optical_flow_gmem1_m_axi_U->I_ARBURST(ap_var_for_const5);
    optical_flow_gmem1_m_axi_U->I_ARREGION(ap_var_for_const6);
    optical_flow_gmem1_m_axi_U->I_RVALID(gmem1_RVALID);
    optical_flow_gmem1_m_axi_U->I_RREADY(ap_var_for_const1);
    optical_flow_gmem1_m_axi_U->I_RDATA(gmem1_RDATA);
    optical_flow_gmem1_m_axi_U->I_RID(gmem1_RID);
    optical_flow_gmem1_m_axi_U->I_RUSER(gmem1_RUSER);
    optical_flow_gmem1_m_axi_U->I_RRESP(gmem1_RRESP);
    optical_flow_gmem1_m_axi_U->I_RLAST(gmem1_RLAST);
    optical_flow_gmem1_m_axi_U->I_AWVALID(flow_calc_U0_m_axi_outputs_AWVALID);
    optical_flow_gmem1_m_axi_U->I_AWREADY(gmem1_AWREADY);
    optical_flow_gmem1_m_axi_U->I_AWADDR(flow_calc_U0_m_axi_outputs_AWADDR);
    optical_flow_gmem1_m_axi_U->I_AWID(flow_calc_U0_m_axi_outputs_AWID);
    optical_flow_gmem1_m_axi_U->I_AWLEN(flow_calc_U0_m_axi_outputs_AWLEN);
    optical_flow_gmem1_m_axi_U->I_AWSIZE(flow_calc_U0_m_axi_outputs_AWSIZE);
    optical_flow_gmem1_m_axi_U->I_AWLOCK(flow_calc_U0_m_axi_outputs_AWLOCK);
    optical_flow_gmem1_m_axi_U->I_AWCACHE(flow_calc_U0_m_axi_outputs_AWCACHE);
    optical_flow_gmem1_m_axi_U->I_AWQOS(flow_calc_U0_m_axi_outputs_AWQOS);
    optical_flow_gmem1_m_axi_U->I_AWPROT(flow_calc_U0_m_axi_outputs_AWPROT);
    optical_flow_gmem1_m_axi_U->I_AWUSER(flow_calc_U0_m_axi_outputs_AWUSER);
    optical_flow_gmem1_m_axi_U->I_AWBURST(flow_calc_U0_m_axi_outputs_AWBURST);
    optical_flow_gmem1_m_axi_U->I_AWREGION(flow_calc_U0_m_axi_outputs_AWREGION);
    optical_flow_gmem1_m_axi_U->I_WVALID(flow_calc_U0_m_axi_outputs_WVALID);
    optical_flow_gmem1_m_axi_U->I_WREADY(gmem1_WREADY);
    optical_flow_gmem1_m_axi_U->I_WDATA(flow_calc_U0_m_axi_outputs_WDATA);
    optical_flow_gmem1_m_axi_U->I_WID(flow_calc_U0_m_axi_outputs_WID);
    optical_flow_gmem1_m_axi_U->I_WUSER(flow_calc_U0_m_axi_outputs_WUSER);
    optical_flow_gmem1_m_axi_U->I_WLAST(flow_calc_U0_m_axi_outputs_WLAST);
    optical_flow_gmem1_m_axi_U->I_WSTRB(flow_calc_U0_m_axi_outputs_WSTRB);
    optical_flow_gmem1_m_axi_U->I_BVALID(gmem1_BVALID);
    optical_flow_gmem1_m_axi_U->I_BREADY(flow_calc_U0_m_axi_outputs_BREADY);
    optical_flow_gmem1_m_axi_U->I_BRESP(gmem1_BRESP);
    optical_flow_gmem1_m_axi_U->I_BID(gmem1_BID);
    optical_flow_gmem1_m_axi_U->I_BUSER(gmem1_BUSER);
    optical_flow_entry12_U0 = new optical_flow_entry12("optical_flow_entry12_U0");
    optical_flow_entry12_U0->ap_clk(ap_clk);
    optical_flow_entry12_U0->ap_rst(ap_rst_n_inv);
    optical_flow_entry12_U0->ap_start(optical_flow_entry12_U0_ap_start);
    optical_flow_entry12_U0->start_full_n(start_for_flow_calc_U0_full_n);
    optical_flow_entry12_U0->ap_done(optical_flow_entry12_U0_ap_done);
    optical_flow_entry12_U0->ap_continue(optical_flow_entry12_U0_ap_continue);
    optical_flow_entry12_U0->ap_idle(optical_flow_entry12_U0_ap_idle);
    optical_flow_entry12_U0->ap_ready(optical_flow_entry12_U0_ap_ready);
    optical_flow_entry12_U0->start_out(optical_flow_entry12_U0_start_out);
    optical_flow_entry12_U0->start_write(optical_flow_entry12_U0_start_write);
    optical_flow_entry12_U0->frames_V(frames_V);
    optical_flow_entry12_U0->outputs(outputs);
    optical_flow_entry12_U0->frames_V_out_din(optical_flow_entry12_U0_frames_V_out_din);
    optical_flow_entry12_U0->frames_V_out_full_n(frames_V_c_full_n);
    optical_flow_entry12_U0->frames_V_out_write(optical_flow_entry12_U0_frames_V_out_write);
    optical_flow_entry12_U0->outputs_out_din(optical_flow_entry12_U0_outputs_out_din);
    optical_flow_entry12_U0->outputs_out_full_n(outputs_c_full_n);
    optical_flow_entry12_U0->outputs_out_write(optical_flow_entry12_U0_outputs_out_write);
    Loop_FRAMES_CP_OUTER_U0 = new Loop_FRAMES_CP_OUTER("Loop_FRAMES_CP_OUTER_U0");
    Loop_FRAMES_CP_OUTER_U0->ap_clk(ap_clk);
    Loop_FRAMES_CP_OUTER_U0->ap_rst(ap_rst_n_inv);
    Loop_FRAMES_CP_OUTER_U0->ap_start(Loop_FRAMES_CP_OUTER_U0_ap_start);
    Loop_FRAMES_CP_OUTER_U0->start_full_n(Loop_FRAMES_CP_OUTER_U0_start_full_n);
    Loop_FRAMES_CP_OUTER_U0->ap_done(Loop_FRAMES_CP_OUTER_U0_ap_done);
    Loop_FRAMES_CP_OUTER_U0->ap_continue(Loop_FRAMES_CP_OUTER_U0_ap_continue);
    Loop_FRAMES_CP_OUTER_U0->ap_idle(Loop_FRAMES_CP_OUTER_U0_ap_idle);
    Loop_FRAMES_CP_OUTER_U0->ap_ready(Loop_FRAMES_CP_OUTER_U0_ap_ready);
    Loop_FRAMES_CP_OUTER_U0->start_out(Loop_FRAMES_CP_OUTER_U0_start_out);
    Loop_FRAMES_CP_OUTER_U0->start_write(Loop_FRAMES_CP_OUTER_U0_start_write);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWVALID(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWVALID);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWREADY(ap_var_for_const1);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWADDR(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWADDR);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWID(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWID);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWLEN(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLEN);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWSIZE(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWSIZE);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWBURST(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWBURST);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWLOCK(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLOCK);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWCACHE(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWCACHE);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWPROT(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWPROT);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWQOS(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWQOS);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWREGION(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWREGION);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_AWUSER(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWUSER);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_WVALID(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WVALID);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_WREADY(ap_var_for_const1);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_WDATA(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WDATA);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_WSTRB(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WSTRB);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_WLAST(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WLAST);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_WID(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WID);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_WUSER(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WUSER);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARVALID(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARVALID);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARREADY(gmem0_ARREADY);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARADDR(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARADDR);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARID(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARID);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARLEN(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLEN);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARSIZE(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARSIZE);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARBURST(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARBURST);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARLOCK(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLOCK);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARCACHE(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARCACHE);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARPROT(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARPROT);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARQOS(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARQOS);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARREGION(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARREGION);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_ARUSER(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARUSER);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_RVALID(gmem0_RVALID);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_RREADY(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_RREADY);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_RDATA(gmem0_RDATA);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_RLAST(gmem0_RLAST);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_RID(gmem0_RID);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_RUSER(gmem0_RUSER);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_RRESP(gmem0_RRESP);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_BVALID(ap_var_for_const1);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_BREADY(Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_BREADY);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_BRESP(ap_var_for_const5);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_BID(ap_var_for_const3);
    Loop_FRAMES_CP_OUTER_U0->m_axi_frames_V_BUSER(ap_var_for_const3);
    Loop_FRAMES_CP_OUTER_U0->frames_V_offset_dout(frames_V_c_dout);
    Loop_FRAMES_CP_OUTER_U0->frames_V_offset_empty_n(frames_V_c_empty_n);
    Loop_FRAMES_CP_OUTER_U0->frames_V_offset_read(Loop_FRAMES_CP_OUTER_U0_frames_V_offset_read);
    Loop_FRAMES_CP_OUTER_U0->frame1_a_V_din(Loop_FRAMES_CP_OUTER_U0_frame1_a_V_din);
    Loop_FRAMES_CP_OUTER_U0->frame1_a_V_full_n(frame1_a_V_full_n);
    Loop_FRAMES_CP_OUTER_U0->frame1_a_V_write(Loop_FRAMES_CP_OUTER_U0_frame1_a_V_write);
    Loop_FRAMES_CP_OUTER_U0->frame2_a_V_din(Loop_FRAMES_CP_OUTER_U0_frame2_a_V_din);
    Loop_FRAMES_CP_OUTER_U0->frame2_a_V_full_n(frame2_a_V_full_n);
    Loop_FRAMES_CP_OUTER_U0->frame2_a_V_write(Loop_FRAMES_CP_OUTER_U0_frame2_a_V_write);
    Loop_FRAMES_CP_OUTER_U0->frame3_a_V_din(Loop_FRAMES_CP_OUTER_U0_frame3_a_V_din);
    Loop_FRAMES_CP_OUTER_U0->frame3_a_V_full_n(frame3_a_V_full_n);
    Loop_FRAMES_CP_OUTER_U0->frame3_a_V_write(Loop_FRAMES_CP_OUTER_U0_frame3_a_V_write);
    Loop_FRAMES_CP_OUTER_U0->frame3_b_V_din(Loop_FRAMES_CP_OUTER_U0_frame3_b_V_din);
    Loop_FRAMES_CP_OUTER_U0->frame3_b_V_full_n(frame3_b_V_full_n);
    Loop_FRAMES_CP_OUTER_U0->frame3_b_V_write(Loop_FRAMES_CP_OUTER_U0_frame3_b_V_write);
    Loop_FRAMES_CP_OUTER_U0->frame4_a_V_din(Loop_FRAMES_CP_OUTER_U0_frame4_a_V_din);
    Loop_FRAMES_CP_OUTER_U0->frame4_a_V_full_n(frame4_a_V_full_n);
    Loop_FRAMES_CP_OUTER_U0->frame4_a_V_write(Loop_FRAMES_CP_OUTER_U0_frame4_a_V_write);
    Loop_FRAMES_CP_OUTER_U0->frame5_a_V_din(Loop_FRAMES_CP_OUTER_U0_frame5_a_V_din);
    Loop_FRAMES_CP_OUTER_U0->frame5_a_V_full_n(frame5_a_V_full_n);
    Loop_FRAMES_CP_OUTER_U0->frame5_a_V_write(Loop_FRAMES_CP_OUTER_U0_frame5_a_V_write);
    gradient_xy_calc_U0 = new gradient_xy_calc("gradient_xy_calc_U0");
    gradient_xy_calc_U0->ap_clk(ap_clk);
    gradient_xy_calc_U0->ap_rst(ap_rst_n_inv);
    gradient_xy_calc_U0->ap_start(gradient_xy_calc_U0_ap_start);
    gradient_xy_calc_U0->start_full_n(start_for_gradient_weight_y_U0_full_n);
    gradient_xy_calc_U0->ap_done(gradient_xy_calc_U0_ap_done);
    gradient_xy_calc_U0->ap_continue(gradient_xy_calc_U0_ap_continue);
    gradient_xy_calc_U0->ap_idle(gradient_xy_calc_U0_ap_idle);
    gradient_xy_calc_U0->ap_ready(gradient_xy_calc_U0_ap_ready);
    gradient_xy_calc_U0->start_out(gradient_xy_calc_U0_start_out);
    gradient_xy_calc_U0->start_write(gradient_xy_calc_U0_start_write);
    gradient_xy_calc_U0->frame3_a_V_dout(frame3_a_V_dout);
    gradient_xy_calc_U0->frame3_a_V_empty_n(frame3_a_V_empty_n);
    gradient_xy_calc_U0->frame3_a_V_read(gradient_xy_calc_U0_frame3_a_V_read);
    gradient_xy_calc_U0->gradient_x_V_din(gradient_xy_calc_U0_gradient_x_V_din);
    gradient_xy_calc_U0->gradient_x_V_full_n(gradient_x_V_full_n);
    gradient_xy_calc_U0->gradient_x_V_write(gradient_xy_calc_U0_gradient_x_V_write);
    gradient_xy_calc_U0->gradient_y_V_din(gradient_xy_calc_U0_gradient_y_V_din);
    gradient_xy_calc_U0->gradient_y_V_full_n(gradient_y_V_full_n);
    gradient_xy_calc_U0->gradient_y_V_write(gradient_xy_calc_U0_gradient_y_V_write);
    gradient_z_calc_U0 = new gradient_z_calc("gradient_z_calc_U0");
    gradient_z_calc_U0->ap_clk(ap_clk);
    gradient_z_calc_U0->ap_rst(ap_rst_n_inv);
    gradient_z_calc_U0->ap_start(gradient_z_calc_U0_ap_start);
    gradient_z_calc_U0->ap_done(gradient_z_calc_U0_ap_done);
    gradient_z_calc_U0->ap_continue(gradient_z_calc_U0_ap_continue);
    gradient_z_calc_U0->ap_idle(gradient_z_calc_U0_ap_idle);
    gradient_z_calc_U0->ap_ready(gradient_z_calc_U0_ap_ready);
    gradient_z_calc_U0->frame1_a_V_dout(frame1_a_V_dout);
    gradient_z_calc_U0->frame1_a_V_empty_n(frame1_a_V_empty_n);
    gradient_z_calc_U0->frame1_a_V_read(gradient_z_calc_U0_frame1_a_V_read);
    gradient_z_calc_U0->frame2_a_V_dout(frame2_a_V_dout);
    gradient_z_calc_U0->frame2_a_V_empty_n(frame2_a_V_empty_n);
    gradient_z_calc_U0->frame2_a_V_read(gradient_z_calc_U0_frame2_a_V_read);
    gradient_z_calc_U0->frame3_b_V_dout(frame3_b_V_dout);
    gradient_z_calc_U0->frame3_b_V_empty_n(frame3_b_V_empty_n);
    gradient_z_calc_U0->frame3_b_V_read(gradient_z_calc_U0_frame3_b_V_read);
    gradient_z_calc_U0->frame4_a_V_dout(frame4_a_V_dout);
    gradient_z_calc_U0->frame4_a_V_empty_n(frame4_a_V_empty_n);
    gradient_z_calc_U0->frame4_a_V_read(gradient_z_calc_U0_frame4_a_V_read);
    gradient_z_calc_U0->frame5_a_V_dout(frame5_a_V_dout);
    gradient_z_calc_U0->frame5_a_V_empty_n(frame5_a_V_empty_n);
    gradient_z_calc_U0->frame5_a_V_read(gradient_z_calc_U0_frame5_a_V_read);
    gradient_z_calc_U0->gradient_z_V_din(gradient_z_calc_U0_gradient_z_V_din);
    gradient_z_calc_U0->gradient_z_V_full_n(gradient_z_V_full_n);
    gradient_z_calc_U0->gradient_z_V_write(gradient_z_calc_U0_gradient_z_V_write);
    gradient_weight_y_U0 = new gradient_weight_y("gradient_weight_y_U0");
    gradient_weight_y_U0->ap_clk(ap_clk);
    gradient_weight_y_U0->ap_rst(ap_rst_n_inv);
    gradient_weight_y_U0->ap_start(gradient_weight_y_U0_ap_start);
    gradient_weight_y_U0->start_full_n(start_for_gradient_weight_x_U0_full_n);
    gradient_weight_y_U0->ap_done(gradient_weight_y_U0_ap_done);
    gradient_weight_y_U0->ap_continue(gradient_weight_y_U0_ap_continue);
    gradient_weight_y_U0->ap_idle(gradient_weight_y_U0_ap_idle);
    gradient_weight_y_U0->ap_ready(gradient_weight_y_U0_ap_ready);
    gradient_weight_y_U0->start_out(gradient_weight_y_U0_start_out);
    gradient_weight_y_U0->start_write(gradient_weight_y_U0_start_write);
    gradient_weight_y_U0->gradient_x_V_dout(gradient_x_V_dout);
    gradient_weight_y_U0->gradient_x_V_empty_n(gradient_x_V_empty_n);
    gradient_weight_y_U0->gradient_x_V_read(gradient_weight_y_U0_gradient_x_V_read);
    gradient_weight_y_U0->gradient_y_V_dout(gradient_y_V_dout);
    gradient_weight_y_U0->gradient_y_V_empty_n(gradient_y_V_empty_n);
    gradient_weight_y_U0->gradient_y_V_read(gradient_weight_y_U0_gradient_y_V_read);
    gradient_weight_y_U0->gradient_z_V_dout(gradient_z_V_dout);
    gradient_weight_y_U0->gradient_z_V_empty_n(gradient_z_V_empty_n);
    gradient_weight_y_U0->gradient_z_V_read(gradient_weight_y_U0_gradient_z_V_read);
    gradient_weight_y_U0->y_filtered_x_V_din(gradient_weight_y_U0_y_filtered_x_V_din);
    gradient_weight_y_U0->y_filtered_x_V_full_n(y_filtered_x_V_full_n);
    gradient_weight_y_U0->y_filtered_x_V_write(gradient_weight_y_U0_y_filtered_x_V_write);
    gradient_weight_y_U0->y_filtered_y_V_din(gradient_weight_y_U0_y_filtered_y_V_din);
    gradient_weight_y_U0->y_filtered_y_V_full_n(y_filtered_y_V_full_n);
    gradient_weight_y_U0->y_filtered_y_V_write(gradient_weight_y_U0_y_filtered_y_V_write);
    gradient_weight_y_U0->y_filtered_z_V_din(gradient_weight_y_U0_y_filtered_z_V_din);
    gradient_weight_y_U0->y_filtered_z_V_full_n(y_filtered_z_V_full_n);
    gradient_weight_y_U0->y_filtered_z_V_write(gradient_weight_y_U0_y_filtered_z_V_write);
    gradient_weight_x_U0 = new gradient_weight_x("gradient_weight_x_U0");
    gradient_weight_x_U0->ap_clk(ap_clk);
    gradient_weight_x_U0->ap_rst(ap_rst_n_inv);
    gradient_weight_x_U0->ap_start(gradient_weight_x_U0_ap_start);
    gradient_weight_x_U0->start_full_n(start_for_outer_product_U0_full_n);
    gradient_weight_x_U0->ap_done(gradient_weight_x_U0_ap_done);
    gradient_weight_x_U0->ap_continue(gradient_weight_x_U0_ap_continue);
    gradient_weight_x_U0->ap_idle(gradient_weight_x_U0_ap_idle);
    gradient_weight_x_U0->ap_ready(gradient_weight_x_U0_ap_ready);
    gradient_weight_x_U0->start_out(gradient_weight_x_U0_start_out);
    gradient_weight_x_U0->start_write(gradient_weight_x_U0_start_write);
    gradient_weight_x_U0->y_filtered_x_V_dout(y_filtered_x_V_dout);
    gradient_weight_x_U0->y_filtered_x_V_empty_n(y_filtered_x_V_empty_n);
    gradient_weight_x_U0->y_filtered_x_V_read(gradient_weight_x_U0_y_filtered_x_V_read);
    gradient_weight_x_U0->y_filtered_y_V_dout(y_filtered_y_V_dout);
    gradient_weight_x_U0->y_filtered_y_V_empty_n(y_filtered_y_V_empty_n);
    gradient_weight_x_U0->y_filtered_y_V_read(gradient_weight_x_U0_y_filtered_y_V_read);
    gradient_weight_x_U0->y_filtered_z_V_dout(y_filtered_z_V_dout);
    gradient_weight_x_U0->y_filtered_z_V_empty_n(y_filtered_z_V_empty_n);
    gradient_weight_x_U0->y_filtered_z_V_read(gradient_weight_x_U0_y_filtered_z_V_read);
    gradient_weight_x_U0->filtered_gradient_x_s_din(gradient_weight_x_U0_filtered_gradient_x_s_din);
    gradient_weight_x_U0->filtered_gradient_x_s_full_n(filtered_gradient_x_s_full_n);
    gradient_weight_x_U0->filtered_gradient_x_s_write(gradient_weight_x_U0_filtered_gradient_x_s_write);
    gradient_weight_x_U0->filtered_gradient_y_s_din(gradient_weight_x_U0_filtered_gradient_y_s_din);
    gradient_weight_x_U0->filtered_gradient_y_s_full_n(filtered_gradient_y_s_full_n);
    gradient_weight_x_U0->filtered_gradient_y_s_write(gradient_weight_x_U0_filtered_gradient_y_s_write);
    gradient_weight_x_U0->filtered_gradient_z_s_din(gradient_weight_x_U0_filtered_gradient_z_s_din);
    gradient_weight_x_U0->filtered_gradient_z_s_full_n(filtered_gradient_z_s_full_n);
    gradient_weight_x_U0->filtered_gradient_z_s_write(gradient_weight_x_U0_filtered_gradient_z_s_write);
    outer_product_U0 = new outer_product("outer_product_U0");
    outer_product_U0->ap_clk(ap_clk);
    outer_product_U0->ap_rst(ap_rst_n_inv);
    outer_product_U0->ap_start(outer_product_U0_ap_start);
    outer_product_U0->start_full_n(start_for_tensor_weight_y_U0_full_n);
    outer_product_U0->ap_done(outer_product_U0_ap_done);
    outer_product_U0->ap_continue(outer_product_U0_ap_continue);
    outer_product_U0->ap_idle(outer_product_U0_ap_idle);
    outer_product_U0->ap_ready(outer_product_U0_ap_ready);
    outer_product_U0->start_out(outer_product_U0_start_out);
    outer_product_U0->start_write(outer_product_U0_start_write);
    outer_product_U0->filtered_gradient_x_s_dout(filtered_gradient_x_s_dout);
    outer_product_U0->filtered_gradient_x_s_empty_n(filtered_gradient_x_s_empty_n);
    outer_product_U0->filtered_gradient_x_s_read(outer_product_U0_filtered_gradient_x_s_read);
    outer_product_U0->filtered_gradient_y_s_dout(filtered_gradient_y_s_dout);
    outer_product_U0->filtered_gradient_y_s_empty_n(filtered_gradient_y_s_empty_n);
    outer_product_U0->filtered_gradient_y_s_read(outer_product_U0_filtered_gradient_y_s_read);
    outer_product_U0->filtered_gradient_z_s_dout(filtered_gradient_z_s_dout);
    outer_product_U0->filtered_gradient_z_s_empty_n(filtered_gradient_z_s_empty_n);
    outer_product_U0->filtered_gradient_z_s_read(outer_product_U0_filtered_gradient_z_s_read);
    outer_product_U0->out_product_val_V_din(outer_product_U0_out_product_val_V_din);
    outer_product_U0->out_product_val_V_full_n(out_product_val_V_full_n);
    outer_product_U0->out_product_val_V_write(outer_product_U0_out_product_val_V_write);
    tensor_weight_y_U0 = new tensor_weight_y("tensor_weight_y_U0");
    tensor_weight_y_U0->ap_clk(ap_clk);
    tensor_weight_y_U0->ap_rst(ap_rst_n_inv);
    tensor_weight_y_U0->ap_start(tensor_weight_y_U0_ap_start);
    tensor_weight_y_U0->start_full_n(start_for_tensor_weight_x_U0_full_n);
    tensor_weight_y_U0->ap_done(tensor_weight_y_U0_ap_done);
    tensor_weight_y_U0->ap_continue(tensor_weight_y_U0_ap_continue);
    tensor_weight_y_U0->ap_idle(tensor_weight_y_U0_ap_idle);
    tensor_weight_y_U0->ap_ready(tensor_weight_y_U0_ap_ready);
    tensor_weight_y_U0->start_out(tensor_weight_y_U0_start_out);
    tensor_weight_y_U0->start_write(tensor_weight_y_U0_start_write);
    tensor_weight_y_U0->out_product_val_V_dout(out_product_val_V_dout);
    tensor_weight_y_U0->out_product_val_V_empty_n(out_product_val_V_empty_n);
    tensor_weight_y_U0->out_product_val_V_read(tensor_weight_y_U0_out_product_val_V_read);
    tensor_weight_y_U0->tensor_y_val_V_din(tensor_weight_y_U0_tensor_y_val_V_din);
    tensor_weight_y_U0->tensor_y_val_V_full_n(tensor_y_val_V_full_n);
    tensor_weight_y_U0->tensor_y_val_V_write(tensor_weight_y_U0_tensor_y_val_V_write);
    tensor_weight_x_U0 = new tensor_weight_x("tensor_weight_x_U0");
    tensor_weight_x_U0->ap_clk(ap_clk);
    tensor_weight_x_U0->ap_rst(ap_rst_n_inv);
    tensor_weight_x_U0->ap_start(tensor_weight_x_U0_ap_start);
    tensor_weight_x_U0->ap_done(tensor_weight_x_U0_ap_done);
    tensor_weight_x_U0->ap_continue(tensor_weight_x_U0_ap_continue);
    tensor_weight_x_U0->ap_idle(tensor_weight_x_U0_ap_idle);
    tensor_weight_x_U0->ap_ready(tensor_weight_x_U0_ap_ready);
    tensor_weight_x_U0->tensor_y_val_V_dout(tensor_y_val_V_dout);
    tensor_weight_x_U0->tensor_y_val_V_empty_n(tensor_y_val_V_empty_n);
    tensor_weight_x_U0->tensor_y_val_V_read(tensor_weight_x_U0_tensor_y_val_V_read);
    tensor_weight_x_U0->tensor_val_V_din(tensor_weight_x_U0_tensor_val_V_din);
    tensor_weight_x_U0->tensor_val_V_full_n(tensor_val_V_full_n);
    tensor_weight_x_U0->tensor_val_V_write(tensor_weight_x_U0_tensor_val_V_write);
    flow_calc_U0 = new flow_calc("flow_calc_U0");
    flow_calc_U0->ap_clk(ap_clk);
    flow_calc_U0->ap_rst(ap_rst_n_inv);
    flow_calc_U0->ap_start(flow_calc_U0_ap_start);
    flow_calc_U0->ap_done(flow_calc_U0_ap_done);
    flow_calc_U0->ap_continue(flow_calc_U0_ap_continue);
    flow_calc_U0->ap_idle(flow_calc_U0_ap_idle);
    flow_calc_U0->ap_ready(flow_calc_U0_ap_ready);
    flow_calc_U0->m_axi_outputs_AWVALID(flow_calc_U0_m_axi_outputs_AWVALID);
    flow_calc_U0->m_axi_outputs_AWREADY(gmem1_AWREADY);
    flow_calc_U0->m_axi_outputs_AWADDR(flow_calc_U0_m_axi_outputs_AWADDR);
    flow_calc_U0->m_axi_outputs_AWID(flow_calc_U0_m_axi_outputs_AWID);
    flow_calc_U0->m_axi_outputs_AWLEN(flow_calc_U0_m_axi_outputs_AWLEN);
    flow_calc_U0->m_axi_outputs_AWSIZE(flow_calc_U0_m_axi_outputs_AWSIZE);
    flow_calc_U0->m_axi_outputs_AWBURST(flow_calc_U0_m_axi_outputs_AWBURST);
    flow_calc_U0->m_axi_outputs_AWLOCK(flow_calc_U0_m_axi_outputs_AWLOCK);
    flow_calc_U0->m_axi_outputs_AWCACHE(flow_calc_U0_m_axi_outputs_AWCACHE);
    flow_calc_U0->m_axi_outputs_AWPROT(flow_calc_U0_m_axi_outputs_AWPROT);
    flow_calc_U0->m_axi_outputs_AWQOS(flow_calc_U0_m_axi_outputs_AWQOS);
    flow_calc_U0->m_axi_outputs_AWREGION(flow_calc_U0_m_axi_outputs_AWREGION);
    flow_calc_U0->m_axi_outputs_AWUSER(flow_calc_U0_m_axi_outputs_AWUSER);
    flow_calc_U0->m_axi_outputs_WVALID(flow_calc_U0_m_axi_outputs_WVALID);
    flow_calc_U0->m_axi_outputs_WREADY(gmem1_WREADY);
    flow_calc_U0->m_axi_outputs_WDATA(flow_calc_U0_m_axi_outputs_WDATA);
    flow_calc_U0->m_axi_outputs_WSTRB(flow_calc_U0_m_axi_outputs_WSTRB);
    flow_calc_U0->m_axi_outputs_WLAST(flow_calc_U0_m_axi_outputs_WLAST);
    flow_calc_U0->m_axi_outputs_WID(flow_calc_U0_m_axi_outputs_WID);
    flow_calc_U0->m_axi_outputs_WUSER(flow_calc_U0_m_axi_outputs_WUSER);
    flow_calc_U0->m_axi_outputs_ARVALID(flow_calc_U0_m_axi_outputs_ARVALID);
    flow_calc_U0->m_axi_outputs_ARREADY(ap_var_for_const1);
    flow_calc_U0->m_axi_outputs_ARADDR(flow_calc_U0_m_axi_outputs_ARADDR);
    flow_calc_U0->m_axi_outputs_ARID(flow_calc_U0_m_axi_outputs_ARID);
    flow_calc_U0->m_axi_outputs_ARLEN(flow_calc_U0_m_axi_outputs_ARLEN);
    flow_calc_U0->m_axi_outputs_ARSIZE(flow_calc_U0_m_axi_outputs_ARSIZE);
    flow_calc_U0->m_axi_outputs_ARBURST(flow_calc_U0_m_axi_outputs_ARBURST);
    flow_calc_U0->m_axi_outputs_ARLOCK(flow_calc_U0_m_axi_outputs_ARLOCK);
    flow_calc_U0->m_axi_outputs_ARCACHE(flow_calc_U0_m_axi_outputs_ARCACHE);
    flow_calc_U0->m_axi_outputs_ARPROT(flow_calc_U0_m_axi_outputs_ARPROT);
    flow_calc_U0->m_axi_outputs_ARQOS(flow_calc_U0_m_axi_outputs_ARQOS);
    flow_calc_U0->m_axi_outputs_ARREGION(flow_calc_U0_m_axi_outputs_ARREGION);
    flow_calc_U0->m_axi_outputs_ARUSER(flow_calc_U0_m_axi_outputs_ARUSER);
    flow_calc_U0->m_axi_outputs_RVALID(ap_var_for_const1);
    flow_calc_U0->m_axi_outputs_RREADY(flow_calc_U0_m_axi_outputs_RREADY);
    flow_calc_U0->m_axi_outputs_RDATA(ap_var_for_const7);
    flow_calc_U0->m_axi_outputs_RLAST(ap_var_for_const1);
    flow_calc_U0->m_axi_outputs_RID(ap_var_for_const3);
    flow_calc_U0->m_axi_outputs_RUSER(ap_var_for_const3);
    flow_calc_U0->m_axi_outputs_RRESP(ap_var_for_const5);
    flow_calc_U0->m_axi_outputs_BVALID(gmem1_BVALID);
    flow_calc_U0->m_axi_outputs_BREADY(flow_calc_U0_m_axi_outputs_BREADY);
    flow_calc_U0->m_axi_outputs_BRESP(gmem1_BRESP);
    flow_calc_U0->m_axi_outputs_BID(gmem1_BID);
    flow_calc_U0->m_axi_outputs_BUSER(gmem1_BUSER);
    flow_calc_U0->outputs_offset_dout(outputs_c_dout);
    flow_calc_U0->outputs_offset_empty_n(outputs_c_empty_n);
    flow_calc_U0->outputs_offset_read(flow_calc_U0_outputs_offset_read);
    flow_calc_U0->tensor_val_V_dout(tensor_val_V_dout);
    flow_calc_U0->tensor_val_V_empty_n(tensor_val_V_empty_n);
    flow_calc_U0->tensor_val_V_read(flow_calc_U0_tensor_val_V_read);
    frames_V_c_U = new fifo_w32_d2_A("frames_V_c_U");
    frames_V_c_U->clk(ap_clk);
    frames_V_c_U->reset(ap_rst_n_inv);
    frames_V_c_U->if_read_ce(ap_var_for_const0);
    frames_V_c_U->if_write_ce(ap_var_for_const0);
    frames_V_c_U->if_din(optical_flow_entry12_U0_frames_V_out_din);
    frames_V_c_U->if_full_n(frames_V_c_full_n);
    frames_V_c_U->if_write(optical_flow_entry12_U0_frames_V_out_write);
    frames_V_c_U->if_dout(frames_V_c_dout);
    frames_V_c_U->if_empty_n(frames_V_c_empty_n);
    frames_V_c_U->if_read(Loop_FRAMES_CP_OUTER_U0_frames_V_offset_read);
    outputs_c_U = new fifo_w32_d2_A("outputs_c_U");
    outputs_c_U->clk(ap_clk);
    outputs_c_U->reset(ap_rst_n_inv);
    outputs_c_U->if_read_ce(ap_var_for_const0);
    outputs_c_U->if_write_ce(ap_var_for_const0);
    outputs_c_U->if_din(optical_flow_entry12_U0_outputs_out_din);
    outputs_c_U->if_full_n(outputs_c_full_n);
    outputs_c_U->if_write(optical_flow_entry12_U0_outputs_out_write);
    outputs_c_U->if_dout(outputs_c_dout);
    outputs_c_U->if_empty_n(outputs_c_empty_n);
    outputs_c_U->if_read(flow_calc_U0_outputs_offset_read);
    frame1_a_V_U = new fifo_w8_d10_A("frame1_a_V_U");
    frame1_a_V_U->clk(ap_clk);
    frame1_a_V_U->reset(ap_rst_n_inv);
    frame1_a_V_U->if_read_ce(ap_var_for_const0);
    frame1_a_V_U->if_write_ce(ap_var_for_const0);
    frame1_a_V_U->if_din(Loop_FRAMES_CP_OUTER_U0_frame1_a_V_din);
    frame1_a_V_U->if_full_n(frame1_a_V_full_n);
    frame1_a_V_U->if_write(Loop_FRAMES_CP_OUTER_U0_frame1_a_V_write);
    frame1_a_V_U->if_dout(frame1_a_V_dout);
    frame1_a_V_U->if_empty_n(frame1_a_V_empty_n);
    frame1_a_V_U->if_read(gradient_z_calc_U0_frame1_a_V_read);
    frame2_a_V_U = new fifo_w8_d10_A("frame2_a_V_U");
    frame2_a_V_U->clk(ap_clk);
    frame2_a_V_U->reset(ap_rst_n_inv);
    frame2_a_V_U->if_read_ce(ap_var_for_const0);
    frame2_a_V_U->if_write_ce(ap_var_for_const0);
    frame2_a_V_U->if_din(Loop_FRAMES_CP_OUTER_U0_frame2_a_V_din);
    frame2_a_V_U->if_full_n(frame2_a_V_full_n);
    frame2_a_V_U->if_write(Loop_FRAMES_CP_OUTER_U0_frame2_a_V_write);
    frame2_a_V_U->if_dout(frame2_a_V_dout);
    frame2_a_V_U->if_empty_n(frame2_a_V_empty_n);
    frame2_a_V_U->if_read(gradient_z_calc_U0_frame2_a_V_read);
    frame3_a_V_U = new fifo_w8_d10_A("frame3_a_V_U");
    frame3_a_V_U->clk(ap_clk);
    frame3_a_V_U->reset(ap_rst_n_inv);
    frame3_a_V_U->if_read_ce(ap_var_for_const0);
    frame3_a_V_U->if_write_ce(ap_var_for_const0);
    frame3_a_V_U->if_din(Loop_FRAMES_CP_OUTER_U0_frame3_a_V_din);
    frame3_a_V_U->if_full_n(frame3_a_V_full_n);
    frame3_a_V_U->if_write(Loop_FRAMES_CP_OUTER_U0_frame3_a_V_write);
    frame3_a_V_U->if_dout(frame3_a_V_dout);
    frame3_a_V_U->if_empty_n(frame3_a_V_empty_n);
    frame3_a_V_U->if_read(gradient_xy_calc_U0_frame3_a_V_read);
    frame3_b_V_U = new fifo_w8_d10_A("frame3_b_V_U");
    frame3_b_V_U->clk(ap_clk);
    frame3_b_V_U->reset(ap_rst_n_inv);
    frame3_b_V_U->if_read_ce(ap_var_for_const0);
    frame3_b_V_U->if_write_ce(ap_var_for_const0);
    frame3_b_V_U->if_din(Loop_FRAMES_CP_OUTER_U0_frame3_b_V_din);
    frame3_b_V_U->if_full_n(frame3_b_V_full_n);
    frame3_b_V_U->if_write(Loop_FRAMES_CP_OUTER_U0_frame3_b_V_write);
    frame3_b_V_U->if_dout(frame3_b_V_dout);
    frame3_b_V_U->if_empty_n(frame3_b_V_empty_n);
    frame3_b_V_U->if_read(gradient_z_calc_U0_frame3_b_V_read);
    frame4_a_V_U = new fifo_w8_d10_A("frame4_a_V_U");
    frame4_a_V_U->clk(ap_clk);
    frame4_a_V_U->reset(ap_rst_n_inv);
    frame4_a_V_U->if_read_ce(ap_var_for_const0);
    frame4_a_V_U->if_write_ce(ap_var_for_const0);
    frame4_a_V_U->if_din(Loop_FRAMES_CP_OUTER_U0_frame4_a_V_din);
    frame4_a_V_U->if_full_n(frame4_a_V_full_n);
    frame4_a_V_U->if_write(Loop_FRAMES_CP_OUTER_U0_frame4_a_V_write);
    frame4_a_V_U->if_dout(frame4_a_V_dout);
    frame4_a_V_U->if_empty_n(frame4_a_V_empty_n);
    frame4_a_V_U->if_read(gradient_z_calc_U0_frame4_a_V_read);
    frame5_a_V_U = new fifo_w8_d10_A("frame5_a_V_U");
    frame5_a_V_U->clk(ap_clk);
    frame5_a_V_U->reset(ap_rst_n_inv);
    frame5_a_V_U->if_read_ce(ap_var_for_const0);
    frame5_a_V_U->if_write_ce(ap_var_for_const0);
    frame5_a_V_U->if_din(Loop_FRAMES_CP_OUTER_U0_frame5_a_V_din);
    frame5_a_V_U->if_full_n(frame5_a_V_full_n);
    frame5_a_V_U->if_write(Loop_FRAMES_CP_OUTER_U0_frame5_a_V_write);
    frame5_a_V_U->if_dout(frame5_a_V_dout);
    frame5_a_V_U->if_empty_n(frame5_a_V_empty_n);
    frame5_a_V_U->if_read(gradient_z_calc_U0_frame5_a_V_read);
    gradient_x_V_U = new fifo_w32_d10_A("gradient_x_V_U");
    gradient_x_V_U->clk(ap_clk);
    gradient_x_V_U->reset(ap_rst_n_inv);
    gradient_x_V_U->if_read_ce(ap_var_for_const0);
    gradient_x_V_U->if_write_ce(ap_var_for_const0);
    gradient_x_V_U->if_din(gradient_xy_calc_U0_gradient_x_V_din);
    gradient_x_V_U->if_full_n(gradient_x_V_full_n);
    gradient_x_V_U->if_write(gradient_xy_calc_U0_gradient_x_V_write);
    gradient_x_V_U->if_dout(gradient_x_V_dout);
    gradient_x_V_U->if_empty_n(gradient_x_V_empty_n);
    gradient_x_V_U->if_read(gradient_weight_y_U0_gradient_x_V_read);
    gradient_y_V_U = new fifo_w32_d10_A("gradient_y_V_U");
    gradient_y_V_U->clk(ap_clk);
    gradient_y_V_U->reset(ap_rst_n_inv);
    gradient_y_V_U->if_read_ce(ap_var_for_const0);
    gradient_y_V_U->if_write_ce(ap_var_for_const0);
    gradient_y_V_U->if_din(gradient_xy_calc_U0_gradient_y_V_din);
    gradient_y_V_U->if_full_n(gradient_y_V_full_n);
    gradient_y_V_U->if_write(gradient_xy_calc_U0_gradient_y_V_write);
    gradient_y_V_U->if_dout(gradient_y_V_dout);
    gradient_y_V_U->if_empty_n(gradient_y_V_empty_n);
    gradient_y_V_U->if_read(gradient_weight_y_U0_gradient_y_V_read);
    gradient_z_V_U = new fifo_w32_d40_A("gradient_z_V_U");
    gradient_z_V_U->clk(ap_clk);
    gradient_z_V_U->reset(ap_rst_n_inv);
    gradient_z_V_U->if_read_ce(ap_var_for_const0);
    gradient_z_V_U->if_write_ce(ap_var_for_const0);
    gradient_z_V_U->if_din(gradient_z_calc_U0_gradient_z_V_din);
    gradient_z_V_U->if_full_n(gradient_z_V_full_n);
    gradient_z_V_U->if_write(gradient_z_calc_U0_gradient_z_V_write);
    gradient_z_V_U->if_dout(gradient_z_V_dout);
    gradient_z_V_U->if_empty_n(gradient_z_V_empty_n);
    gradient_z_V_U->if_read(gradient_weight_y_U0_gradient_z_V_read);
    y_filtered_x_V_U = new fifo_w1_d10_A("y_filtered_x_V_U");
    y_filtered_x_V_U->clk(ap_clk);
    y_filtered_x_V_U->reset(ap_rst_n_inv);
    y_filtered_x_V_U->if_read_ce(ap_var_for_const0);
    y_filtered_x_V_U->if_write_ce(ap_var_for_const0);
    y_filtered_x_V_U->if_din(gradient_weight_y_U0_y_filtered_x_V_din);
    y_filtered_x_V_U->if_full_n(y_filtered_x_V_full_n);
    y_filtered_x_V_U->if_write(gradient_weight_y_U0_y_filtered_x_V_write);
    y_filtered_x_V_U->if_dout(y_filtered_x_V_dout);
    y_filtered_x_V_U->if_empty_n(y_filtered_x_V_empty_n);
    y_filtered_x_V_U->if_read(gradient_weight_x_U0_y_filtered_x_V_read);
    y_filtered_y_V_U = new fifo_w1_d10_A("y_filtered_y_V_U");
    y_filtered_y_V_U->clk(ap_clk);
    y_filtered_y_V_U->reset(ap_rst_n_inv);
    y_filtered_y_V_U->if_read_ce(ap_var_for_const0);
    y_filtered_y_V_U->if_write_ce(ap_var_for_const0);
    y_filtered_y_V_U->if_din(gradient_weight_y_U0_y_filtered_y_V_din);
    y_filtered_y_V_U->if_full_n(y_filtered_y_V_full_n);
    y_filtered_y_V_U->if_write(gradient_weight_y_U0_y_filtered_y_V_write);
    y_filtered_y_V_U->if_dout(y_filtered_y_V_dout);
    y_filtered_y_V_U->if_empty_n(y_filtered_y_V_empty_n);
    y_filtered_y_V_U->if_read(gradient_weight_x_U0_y_filtered_y_V_read);
    y_filtered_z_V_U = new fifo_w1_d10_A("y_filtered_z_V_U");
    y_filtered_z_V_U->clk(ap_clk);
    y_filtered_z_V_U->reset(ap_rst_n_inv);
    y_filtered_z_V_U->if_read_ce(ap_var_for_const0);
    y_filtered_z_V_U->if_write_ce(ap_var_for_const0);
    y_filtered_z_V_U->if_din(gradient_weight_y_U0_y_filtered_z_V_din);
    y_filtered_z_V_U->if_full_n(y_filtered_z_V_full_n);
    y_filtered_z_V_U->if_write(gradient_weight_y_U0_y_filtered_z_V_write);
    y_filtered_z_V_U->if_dout(y_filtered_z_V_dout);
    y_filtered_z_V_U->if_empty_n(y_filtered_z_V_empty_n);
    y_filtered_z_V_U->if_read(gradient_weight_x_U0_y_filtered_z_V_read);
    filtered_gradient_x_s_U = new fifo_w32_d10_A("filtered_gradient_x_s_U");
    filtered_gradient_x_s_U->clk(ap_clk);
    filtered_gradient_x_s_U->reset(ap_rst_n_inv);
    filtered_gradient_x_s_U->if_read_ce(ap_var_for_const0);
    filtered_gradient_x_s_U->if_write_ce(ap_var_for_const0);
    filtered_gradient_x_s_U->if_din(gradient_weight_x_U0_filtered_gradient_x_s_din);
    filtered_gradient_x_s_U->if_full_n(filtered_gradient_x_s_full_n);
    filtered_gradient_x_s_U->if_write(gradient_weight_x_U0_filtered_gradient_x_s_write);
    filtered_gradient_x_s_U->if_dout(filtered_gradient_x_s_dout);
    filtered_gradient_x_s_U->if_empty_n(filtered_gradient_x_s_empty_n);
    filtered_gradient_x_s_U->if_read(outer_product_U0_filtered_gradient_x_s_read);
    filtered_gradient_y_s_U = new fifo_w32_d10_A("filtered_gradient_y_s_U");
    filtered_gradient_y_s_U->clk(ap_clk);
    filtered_gradient_y_s_U->reset(ap_rst_n_inv);
    filtered_gradient_y_s_U->if_read_ce(ap_var_for_const0);
    filtered_gradient_y_s_U->if_write_ce(ap_var_for_const0);
    filtered_gradient_y_s_U->if_din(gradient_weight_x_U0_filtered_gradient_y_s_din);
    filtered_gradient_y_s_U->if_full_n(filtered_gradient_y_s_full_n);
    filtered_gradient_y_s_U->if_write(gradient_weight_x_U0_filtered_gradient_y_s_write);
    filtered_gradient_y_s_U->if_dout(filtered_gradient_y_s_dout);
    filtered_gradient_y_s_U->if_empty_n(filtered_gradient_y_s_empty_n);
    filtered_gradient_y_s_U->if_read(outer_product_U0_filtered_gradient_y_s_read);
    filtered_gradient_z_s_U = new fifo_w32_d10_A("filtered_gradient_z_s_U");
    filtered_gradient_z_s_U->clk(ap_clk);
    filtered_gradient_z_s_U->reset(ap_rst_n_inv);
    filtered_gradient_z_s_U->if_read_ce(ap_var_for_const0);
    filtered_gradient_z_s_U->if_write_ce(ap_var_for_const0);
    filtered_gradient_z_s_U->if_din(gradient_weight_x_U0_filtered_gradient_z_s_din);
    filtered_gradient_z_s_U->if_full_n(filtered_gradient_z_s_full_n);
    filtered_gradient_z_s_U->if_write(gradient_weight_x_U0_filtered_gradient_z_s_write);
    filtered_gradient_z_s_U->if_dout(filtered_gradient_z_s_dout);
    filtered_gradient_z_s_U->if_empty_n(filtered_gradient_z_s_empty_n);
    filtered_gradient_z_s_U->if_read(outer_product_U0_filtered_gradient_z_s_read);
    out_product_val_V_U = new fifo_w191_d10_A("out_product_val_V_U");
    out_product_val_V_U->clk(ap_clk);
    out_product_val_V_U->reset(ap_rst_n_inv);
    out_product_val_V_U->if_read_ce(ap_var_for_const0);
    out_product_val_V_U->if_write_ce(ap_var_for_const0);
    out_product_val_V_U->if_din(outer_product_U0_out_product_val_V_din);
    out_product_val_V_U->if_full_n(out_product_val_V_full_n);
    out_product_val_V_U->if_write(outer_product_U0_out_product_val_V_write);
    out_product_val_V_U->if_dout(out_product_val_V_dout);
    out_product_val_V_U->if_empty_n(out_product_val_V_empty_n);
    out_product_val_V_U->if_read(tensor_weight_y_U0_out_product_val_V_read);
    tensor_y_val_V_U = new fifo_w192_d10_A("tensor_y_val_V_U");
    tensor_y_val_V_U->clk(ap_clk);
    tensor_y_val_V_U->reset(ap_rst_n_inv);
    tensor_y_val_V_U->if_read_ce(ap_var_for_const0);
    tensor_y_val_V_U->if_write_ce(ap_var_for_const0);
    tensor_y_val_V_U->if_din(tensor_weight_y_U0_tensor_y_val_V_din);
    tensor_y_val_V_U->if_full_n(tensor_y_val_V_full_n);
    tensor_y_val_V_U->if_write(tensor_weight_y_U0_tensor_y_val_V_write);
    tensor_y_val_V_U->if_dout(tensor_y_val_V_dout);
    tensor_y_val_V_U->if_empty_n(tensor_y_val_V_empty_n);
    tensor_y_val_V_U->if_read(tensor_weight_x_U0_tensor_y_val_V_read);
    tensor_val_V_U = new fifo_w192_d10_A("tensor_val_V_U");
    tensor_val_V_U->clk(ap_clk);
    tensor_val_V_U->reset(ap_rst_n_inv);
    tensor_val_V_U->if_read_ce(ap_var_for_const0);
    tensor_val_V_U->if_write_ce(ap_var_for_const0);
    tensor_val_V_U->if_din(tensor_weight_x_U0_tensor_val_V_din);
    tensor_val_V_U->if_full_n(tensor_val_V_full_n);
    tensor_val_V_U->if_write(tensor_weight_x_U0_tensor_val_V_write);
    tensor_val_V_U->if_dout(tensor_val_V_dout);
    tensor_val_V_U->if_empty_n(tensor_val_V_empty_n);
    tensor_val_V_U->if_read(flow_calc_U0_tensor_val_V_read);
    start_for_flow_caCeG_U = new start_for_flow_caCeG("start_for_flow_caCeG_U");
    start_for_flow_caCeG_U->clk(ap_clk);
    start_for_flow_caCeG_U->reset(ap_rst_n_inv);
    start_for_flow_caCeG_U->if_read_ce(ap_var_for_const0);
    start_for_flow_caCeG_U->if_write_ce(ap_var_for_const0);
    start_for_flow_caCeG_U->if_din(start_for_flow_calc_U0_din);
    start_for_flow_caCeG_U->if_full_n(start_for_flow_calc_U0_full_n);
    start_for_flow_caCeG_U->if_write(optical_flow_entry12_U0_start_write);
    start_for_flow_caCeG_U->if_dout(start_for_flow_calc_U0_dout);
    start_for_flow_caCeG_U->if_empty_n(start_for_flow_calc_U0_empty_n);
    start_for_flow_caCeG_U->if_read(flow_calc_U0_ap_ready);
    start_for_gradienDeQ_U = new start_for_gradienDeQ("start_for_gradienDeQ_U");
    start_for_gradienDeQ_U->clk(ap_clk);
    start_for_gradienDeQ_U->reset(ap_rst_n_inv);
    start_for_gradienDeQ_U->if_read_ce(ap_var_for_const0);
    start_for_gradienDeQ_U->if_write_ce(ap_var_for_const0);
    start_for_gradienDeQ_U->if_din(start_for_gradient_xy_calc_U0_din);
    start_for_gradienDeQ_U->if_full_n(start_for_gradient_xy_calc_U0_full_n);
    start_for_gradienDeQ_U->if_write(Loop_FRAMES_CP_OUTER_U0_start_write);
    start_for_gradienDeQ_U->if_dout(start_for_gradient_xy_calc_U0_dout);
    start_for_gradienDeQ_U->if_empty_n(start_for_gradient_xy_calc_U0_empty_n);
    start_for_gradienDeQ_U->if_read(gradient_xy_calc_U0_ap_ready);
    start_for_gradienEe0_U = new start_for_gradienEe0("start_for_gradienEe0_U");
    start_for_gradienEe0_U->clk(ap_clk);
    start_for_gradienEe0_U->reset(ap_rst_n_inv);
    start_for_gradienEe0_U->if_read_ce(ap_var_for_const0);
    start_for_gradienEe0_U->if_write_ce(ap_var_for_const0);
    start_for_gradienEe0_U->if_din(start_for_gradient_z_calc_U0_din);
    start_for_gradienEe0_U->if_full_n(start_for_gradient_z_calc_U0_full_n);
    start_for_gradienEe0_U->if_write(Loop_FRAMES_CP_OUTER_U0_start_write);
    start_for_gradienEe0_U->if_dout(start_for_gradient_z_calc_U0_dout);
    start_for_gradienEe0_U->if_empty_n(start_for_gradient_z_calc_U0_empty_n);
    start_for_gradienEe0_U->if_read(gradient_z_calc_U0_ap_ready);
    start_for_gradienFfa_U = new start_for_gradienFfa("start_for_gradienFfa_U");
    start_for_gradienFfa_U->clk(ap_clk);
    start_for_gradienFfa_U->reset(ap_rst_n_inv);
    start_for_gradienFfa_U->if_read_ce(ap_var_for_const0);
    start_for_gradienFfa_U->if_write_ce(ap_var_for_const0);
    start_for_gradienFfa_U->if_din(start_for_gradient_weight_y_U0_din);
    start_for_gradienFfa_U->if_full_n(start_for_gradient_weight_y_U0_full_n);
    start_for_gradienFfa_U->if_write(gradient_xy_calc_U0_start_write);
    start_for_gradienFfa_U->if_dout(start_for_gradient_weight_y_U0_dout);
    start_for_gradienFfa_U->if_empty_n(start_for_gradient_weight_y_U0_empty_n);
    start_for_gradienFfa_U->if_read(gradient_weight_y_U0_ap_ready);
    start_for_gradienGfk_U = new start_for_gradienGfk("start_for_gradienGfk_U");
    start_for_gradienGfk_U->clk(ap_clk);
    start_for_gradienGfk_U->reset(ap_rst_n_inv);
    start_for_gradienGfk_U->if_read_ce(ap_var_for_const0);
    start_for_gradienGfk_U->if_write_ce(ap_var_for_const0);
    start_for_gradienGfk_U->if_din(start_for_gradient_weight_x_U0_din);
    start_for_gradienGfk_U->if_full_n(start_for_gradient_weight_x_U0_full_n);
    start_for_gradienGfk_U->if_write(gradient_weight_y_U0_start_write);
    start_for_gradienGfk_U->if_dout(start_for_gradient_weight_x_U0_dout);
    start_for_gradienGfk_U->if_empty_n(start_for_gradient_weight_x_U0_empty_n);
    start_for_gradienGfk_U->if_read(gradient_weight_x_U0_ap_ready);
    start_for_outer_pHfu_U = new start_for_outer_pHfu("start_for_outer_pHfu_U");
    start_for_outer_pHfu_U->clk(ap_clk);
    start_for_outer_pHfu_U->reset(ap_rst_n_inv);
    start_for_outer_pHfu_U->if_read_ce(ap_var_for_const0);
    start_for_outer_pHfu_U->if_write_ce(ap_var_for_const0);
    start_for_outer_pHfu_U->if_din(start_for_outer_product_U0_din);
    start_for_outer_pHfu_U->if_full_n(start_for_outer_product_U0_full_n);
    start_for_outer_pHfu_U->if_write(gradient_weight_x_U0_start_write);
    start_for_outer_pHfu_U->if_dout(start_for_outer_product_U0_dout);
    start_for_outer_pHfu_U->if_empty_n(start_for_outer_product_U0_empty_n);
    start_for_outer_pHfu_U->if_read(outer_product_U0_ap_ready);
    start_for_tensor_IfE_U = new start_for_tensor_IfE("start_for_tensor_IfE_U");
    start_for_tensor_IfE_U->clk(ap_clk);
    start_for_tensor_IfE_U->reset(ap_rst_n_inv);
    start_for_tensor_IfE_U->if_read_ce(ap_var_for_const0);
    start_for_tensor_IfE_U->if_write_ce(ap_var_for_const0);
    start_for_tensor_IfE_U->if_din(start_for_tensor_weight_y_U0_din);
    start_for_tensor_IfE_U->if_full_n(start_for_tensor_weight_y_U0_full_n);
    start_for_tensor_IfE_U->if_write(outer_product_U0_start_write);
    start_for_tensor_IfE_U->if_dout(start_for_tensor_weight_y_U0_dout);
    start_for_tensor_IfE_U->if_empty_n(start_for_tensor_weight_y_U0_empty_n);
    start_for_tensor_IfE_U->if_read(tensor_weight_y_U0_ap_ready);
    start_for_tensor_JfO_U = new start_for_tensor_JfO("start_for_tensor_JfO_U");
    start_for_tensor_JfO_U->clk(ap_clk);
    start_for_tensor_JfO_U->reset(ap_rst_n_inv);
    start_for_tensor_JfO_U->if_read_ce(ap_var_for_const0);
    start_for_tensor_JfO_U->if_write_ce(ap_var_for_const0);
    start_for_tensor_JfO_U->if_din(start_for_tensor_weight_x_U0_din);
    start_for_tensor_JfO_U->if_full_n(start_for_tensor_weight_x_U0_full_n);
    start_for_tensor_JfO_U->if_write(tensor_weight_y_U0_start_write);
    start_for_tensor_JfO_U->if_dout(start_for_tensor_weight_x_U0_dout);
    start_for_tensor_JfO_U->if_empty_n(start_for_tensor_weight_x_U0_empty_n);
    start_for_tensor_JfO_U->if_read(tensor_weight_x_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Loop_FRAMES_CP_OUTER_U0_ap_continue);

    SC_METHOD(thread_Loop_FRAMES_CP_OUTER_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready );

    SC_METHOD(thread_Loop_FRAMES_CP_OUTER_U0_start_full_n);
    sensitive << ( start_for_gradient_xy_calc_U0_full_n );
    sensitive << ( start_for_gradient_z_calc_U0_full_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( flow_calc_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( optical_flow_entry12_U0_ap_idle );
    sensitive << ( Loop_FRAMES_CP_OUTER_U0_ap_idle );
    sensitive << ( gradient_xy_calc_U0_ap_idle );
    sensitive << ( gradient_z_calc_U0_ap_idle );
    sensitive << ( gradient_weight_y_U0_ap_idle );
    sensitive << ( gradient_weight_x_U0_ap_idle );
    sensitive << ( outer_product_U0_ap_idle );
    sensitive << ( tensor_weight_y_U0_ap_idle );
    sensitive << ( tensor_weight_x_U0_ap_idle );
    sensitive << ( flow_calc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sync_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready);
    sensitive << ( Loop_FRAMES_CP_OUTER_U0_ap_ready );
    sensitive << ( ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( flow_calc_U0_ap_done );

    SC_METHOD(thread_ap_sync_optical_flow_entry12_U0_ap_ready);
    sensitive << ( optical_flow_entry12_U0_ap_ready );
    sensitive << ( ap_sync_reg_optical_flow_entry12_U0_ap_ready );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready );
    sensitive << ( ap_sync_optical_flow_entry12_U0_ap_ready );

    SC_METHOD(thread_flow_calc_U0_ap_continue);

    SC_METHOD(thread_flow_calc_U0_ap_start);
    sensitive << ( start_for_flow_calc_U0_empty_n );

    SC_METHOD(thread_flow_calc_U0_start_full_n);

    SC_METHOD(thread_flow_calc_U0_start_write);

    SC_METHOD(thread_gradient_weight_x_U0_ap_continue);

    SC_METHOD(thread_gradient_weight_x_U0_ap_start);
    sensitive << ( start_for_gradient_weight_x_U0_empty_n );

    SC_METHOD(thread_gradient_weight_y_U0_ap_continue);

    SC_METHOD(thread_gradient_weight_y_U0_ap_start);
    sensitive << ( start_for_gradient_weight_y_U0_empty_n );

    SC_METHOD(thread_gradient_xy_calc_U0_ap_continue);

    SC_METHOD(thread_gradient_xy_calc_U0_ap_start);
    sensitive << ( start_for_gradient_xy_calc_U0_empty_n );

    SC_METHOD(thread_gradient_z_calc_U0_ap_continue);

    SC_METHOD(thread_gradient_z_calc_U0_ap_start);
    sensitive << ( start_for_gradient_z_calc_U0_empty_n );

    SC_METHOD(thread_gradient_z_calc_U0_start_full_n);

    SC_METHOD(thread_gradient_z_calc_U0_start_write);

    SC_METHOD(thread_optical_flow_entry12_U0_ap_continue);

    SC_METHOD(thread_optical_flow_entry12_U0_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_sync_reg_optical_flow_entry12_U0_ap_ready );

    SC_METHOD(thread_outer_product_U0_ap_continue);

    SC_METHOD(thread_outer_product_U0_ap_start);
    sensitive << ( start_for_outer_product_U0_empty_n );

    SC_METHOD(thread_start_for_flow_calc_U0_din);

    SC_METHOD(thread_start_for_gradient_weight_x_U0_din);

    SC_METHOD(thread_start_for_gradient_weight_y_U0_din);

    SC_METHOD(thread_start_for_gradient_xy_calc_U0_din);

    SC_METHOD(thread_start_for_gradient_z_calc_U0_din);

    SC_METHOD(thread_start_for_outer_product_U0_din);

    SC_METHOD(thread_start_for_tensor_weight_x_U0_din);

    SC_METHOD(thread_start_for_tensor_weight_y_U0_din);

    SC_METHOD(thread_tensor_weight_x_U0_ap_continue);

    SC_METHOD(thread_tensor_weight_x_U0_ap_start);
    sensitive << ( start_for_tensor_weight_x_U0_empty_n );

    SC_METHOD(thread_tensor_weight_x_U0_start_full_n);

    SC_METHOD(thread_tensor_weight_x_U0_start_write);

    SC_METHOD(thread_tensor_weight_y_U0_ap_continue);

    SC_METHOD(thread_tensor_weight_y_U0_ap_start);
    sensitive << ( start_for_tensor_weight_y_U0_empty_n );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const8);

    ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready = SC_LOGIC_0;
    Loop_FRAMES_CP_OUTER_U0_ap_ready_count = "00";
    ap_sync_reg_optical_flow_entry12_U0_ap_ready = SC_LOGIC_0;
    optical_flow_entry12_U0_ap_ready_count = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "optical_flow_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, m_axi_gmem0_AWVALID, "(port)m_axi_gmem0_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem0_AWREADY, "(port)m_axi_gmem0_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem0_AWADDR, "(port)m_axi_gmem0_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem0_AWID, "(port)m_axi_gmem0_AWID");
    sc_trace(mVcdFile, m_axi_gmem0_AWLEN, "(port)m_axi_gmem0_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem0_AWSIZE, "(port)m_axi_gmem0_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem0_AWBURST, "(port)m_axi_gmem0_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem0_AWLOCK, "(port)m_axi_gmem0_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem0_AWCACHE, "(port)m_axi_gmem0_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem0_AWPROT, "(port)m_axi_gmem0_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem0_AWQOS, "(port)m_axi_gmem0_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem0_AWREGION, "(port)m_axi_gmem0_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem0_AWUSER, "(port)m_axi_gmem0_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem0_WVALID, "(port)m_axi_gmem0_WVALID");
    sc_trace(mVcdFile, m_axi_gmem0_WREADY, "(port)m_axi_gmem0_WREADY");
    sc_trace(mVcdFile, m_axi_gmem0_WDATA, "(port)m_axi_gmem0_WDATA");
    sc_trace(mVcdFile, m_axi_gmem0_WSTRB, "(port)m_axi_gmem0_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem0_WLAST, "(port)m_axi_gmem0_WLAST");
    sc_trace(mVcdFile, m_axi_gmem0_WID, "(port)m_axi_gmem0_WID");
    sc_trace(mVcdFile, m_axi_gmem0_WUSER, "(port)m_axi_gmem0_WUSER");
    sc_trace(mVcdFile, m_axi_gmem0_ARVALID, "(port)m_axi_gmem0_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem0_ARREADY, "(port)m_axi_gmem0_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem0_ARADDR, "(port)m_axi_gmem0_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem0_ARID, "(port)m_axi_gmem0_ARID");
    sc_trace(mVcdFile, m_axi_gmem0_ARLEN, "(port)m_axi_gmem0_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem0_ARSIZE, "(port)m_axi_gmem0_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem0_ARBURST, "(port)m_axi_gmem0_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem0_ARLOCK, "(port)m_axi_gmem0_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem0_ARCACHE, "(port)m_axi_gmem0_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem0_ARPROT, "(port)m_axi_gmem0_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem0_ARQOS, "(port)m_axi_gmem0_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem0_ARREGION, "(port)m_axi_gmem0_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem0_ARUSER, "(port)m_axi_gmem0_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem0_RVALID, "(port)m_axi_gmem0_RVALID");
    sc_trace(mVcdFile, m_axi_gmem0_RREADY, "(port)m_axi_gmem0_RREADY");
    sc_trace(mVcdFile, m_axi_gmem0_RDATA, "(port)m_axi_gmem0_RDATA");
    sc_trace(mVcdFile, m_axi_gmem0_RLAST, "(port)m_axi_gmem0_RLAST");
    sc_trace(mVcdFile, m_axi_gmem0_RID, "(port)m_axi_gmem0_RID");
    sc_trace(mVcdFile, m_axi_gmem0_RUSER, "(port)m_axi_gmem0_RUSER");
    sc_trace(mVcdFile, m_axi_gmem0_RRESP, "(port)m_axi_gmem0_RRESP");
    sc_trace(mVcdFile, m_axi_gmem0_BVALID, "(port)m_axi_gmem0_BVALID");
    sc_trace(mVcdFile, m_axi_gmem0_BREADY, "(port)m_axi_gmem0_BREADY");
    sc_trace(mVcdFile, m_axi_gmem0_BRESP, "(port)m_axi_gmem0_BRESP");
    sc_trace(mVcdFile, m_axi_gmem0_BID, "(port)m_axi_gmem0_BID");
    sc_trace(mVcdFile, m_axi_gmem0_BUSER, "(port)m_axi_gmem0_BUSER");
    sc_trace(mVcdFile, m_axi_gmem1_AWVALID, "(port)m_axi_gmem1_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem1_AWREADY, "(port)m_axi_gmem1_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem1_AWADDR, "(port)m_axi_gmem1_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem1_AWID, "(port)m_axi_gmem1_AWID");
    sc_trace(mVcdFile, m_axi_gmem1_AWLEN, "(port)m_axi_gmem1_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem1_AWSIZE, "(port)m_axi_gmem1_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem1_AWBURST, "(port)m_axi_gmem1_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem1_AWLOCK, "(port)m_axi_gmem1_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem1_AWCACHE, "(port)m_axi_gmem1_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem1_AWPROT, "(port)m_axi_gmem1_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem1_AWQOS, "(port)m_axi_gmem1_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem1_AWREGION, "(port)m_axi_gmem1_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem1_AWUSER, "(port)m_axi_gmem1_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem1_WVALID, "(port)m_axi_gmem1_WVALID");
    sc_trace(mVcdFile, m_axi_gmem1_WREADY, "(port)m_axi_gmem1_WREADY");
    sc_trace(mVcdFile, m_axi_gmem1_WDATA, "(port)m_axi_gmem1_WDATA");
    sc_trace(mVcdFile, m_axi_gmem1_WSTRB, "(port)m_axi_gmem1_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem1_WLAST, "(port)m_axi_gmem1_WLAST");
    sc_trace(mVcdFile, m_axi_gmem1_WID, "(port)m_axi_gmem1_WID");
    sc_trace(mVcdFile, m_axi_gmem1_WUSER, "(port)m_axi_gmem1_WUSER");
    sc_trace(mVcdFile, m_axi_gmem1_ARVALID, "(port)m_axi_gmem1_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem1_ARREADY, "(port)m_axi_gmem1_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem1_ARADDR, "(port)m_axi_gmem1_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem1_ARID, "(port)m_axi_gmem1_ARID");
    sc_trace(mVcdFile, m_axi_gmem1_ARLEN, "(port)m_axi_gmem1_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem1_ARSIZE, "(port)m_axi_gmem1_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem1_ARBURST, "(port)m_axi_gmem1_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem1_ARLOCK, "(port)m_axi_gmem1_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem1_ARCACHE, "(port)m_axi_gmem1_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem1_ARPROT, "(port)m_axi_gmem1_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem1_ARQOS, "(port)m_axi_gmem1_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem1_ARREGION, "(port)m_axi_gmem1_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem1_ARUSER, "(port)m_axi_gmem1_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem1_RVALID, "(port)m_axi_gmem1_RVALID");
    sc_trace(mVcdFile, m_axi_gmem1_RREADY, "(port)m_axi_gmem1_RREADY");
    sc_trace(mVcdFile, m_axi_gmem1_RDATA, "(port)m_axi_gmem1_RDATA");
    sc_trace(mVcdFile, m_axi_gmem1_RLAST, "(port)m_axi_gmem1_RLAST");
    sc_trace(mVcdFile, m_axi_gmem1_RID, "(port)m_axi_gmem1_RID");
    sc_trace(mVcdFile, m_axi_gmem1_RUSER, "(port)m_axi_gmem1_RUSER");
    sc_trace(mVcdFile, m_axi_gmem1_RRESP, "(port)m_axi_gmem1_RRESP");
    sc_trace(mVcdFile, m_axi_gmem1_BVALID, "(port)m_axi_gmem1_BVALID");
    sc_trace(mVcdFile, m_axi_gmem1_BREADY, "(port)m_axi_gmem1_BREADY");
    sc_trace(mVcdFile, m_axi_gmem1_BRESP, "(port)m_axi_gmem1_BRESP");
    sc_trace(mVcdFile, m_axi_gmem1_BID, "(port)m_axi_gmem1_BID");
    sc_trace(mVcdFile, m_axi_gmem1_BUSER, "(port)m_axi_gmem1_BUSER");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, frames_V, "frames_V");
    sc_trace(mVcdFile, outputs, "outputs");
    sc_trace(mVcdFile, gmem0_AWREADY, "gmem0_AWREADY");
    sc_trace(mVcdFile, gmem0_WREADY, "gmem0_WREADY");
    sc_trace(mVcdFile, gmem0_ARREADY, "gmem0_ARREADY");
    sc_trace(mVcdFile, gmem0_RVALID, "gmem0_RVALID");
    sc_trace(mVcdFile, gmem0_RDATA, "gmem0_RDATA");
    sc_trace(mVcdFile, gmem0_RLAST, "gmem0_RLAST");
    sc_trace(mVcdFile, gmem0_RID, "gmem0_RID");
    sc_trace(mVcdFile, gmem0_RUSER, "gmem0_RUSER");
    sc_trace(mVcdFile, gmem0_RRESP, "gmem0_RRESP");
    sc_trace(mVcdFile, gmem0_BVALID, "gmem0_BVALID");
    sc_trace(mVcdFile, gmem0_BRESP, "gmem0_BRESP");
    sc_trace(mVcdFile, gmem0_BID, "gmem0_BID");
    sc_trace(mVcdFile, gmem0_BUSER, "gmem0_BUSER");
    sc_trace(mVcdFile, gmem1_AWREADY, "gmem1_AWREADY");
    sc_trace(mVcdFile, gmem1_WREADY, "gmem1_WREADY");
    sc_trace(mVcdFile, gmem1_ARREADY, "gmem1_ARREADY");
    sc_trace(mVcdFile, gmem1_RVALID, "gmem1_RVALID");
    sc_trace(mVcdFile, gmem1_RDATA, "gmem1_RDATA");
    sc_trace(mVcdFile, gmem1_RLAST, "gmem1_RLAST");
    sc_trace(mVcdFile, gmem1_RID, "gmem1_RID");
    sc_trace(mVcdFile, gmem1_RUSER, "gmem1_RUSER");
    sc_trace(mVcdFile, gmem1_RRESP, "gmem1_RRESP");
    sc_trace(mVcdFile, gmem1_BVALID, "gmem1_BVALID");
    sc_trace(mVcdFile, gmem1_BRESP, "gmem1_BRESP");
    sc_trace(mVcdFile, gmem1_BID, "gmem1_BID");
    sc_trace(mVcdFile, gmem1_BUSER, "gmem1_BUSER");
    sc_trace(mVcdFile, optical_flow_entry12_U0_ap_start, "optical_flow_entry12_U0_ap_start");
    sc_trace(mVcdFile, optical_flow_entry12_U0_ap_done, "optical_flow_entry12_U0_ap_done");
    sc_trace(mVcdFile, optical_flow_entry12_U0_ap_continue, "optical_flow_entry12_U0_ap_continue");
    sc_trace(mVcdFile, optical_flow_entry12_U0_ap_idle, "optical_flow_entry12_U0_ap_idle");
    sc_trace(mVcdFile, optical_flow_entry12_U0_ap_ready, "optical_flow_entry12_U0_ap_ready");
    sc_trace(mVcdFile, optical_flow_entry12_U0_start_out, "optical_flow_entry12_U0_start_out");
    sc_trace(mVcdFile, optical_flow_entry12_U0_start_write, "optical_flow_entry12_U0_start_write");
    sc_trace(mVcdFile, optical_flow_entry12_U0_frames_V_out_din, "optical_flow_entry12_U0_frames_V_out_din");
    sc_trace(mVcdFile, optical_flow_entry12_U0_frames_V_out_write, "optical_flow_entry12_U0_frames_V_out_write");
    sc_trace(mVcdFile, optical_flow_entry12_U0_outputs_out_din, "optical_flow_entry12_U0_outputs_out_din");
    sc_trace(mVcdFile, optical_flow_entry12_U0_outputs_out_write, "optical_flow_entry12_U0_outputs_out_write");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_ap_start, "Loop_FRAMES_CP_OUTER_U0_ap_start");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_start_full_n, "Loop_FRAMES_CP_OUTER_U0_start_full_n");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_ap_done, "Loop_FRAMES_CP_OUTER_U0_ap_done");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_ap_continue, "Loop_FRAMES_CP_OUTER_U0_ap_continue");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_ap_idle, "Loop_FRAMES_CP_OUTER_U0_ap_idle");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_ap_ready, "Loop_FRAMES_CP_OUTER_U0_ap_ready");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_start_out, "Loop_FRAMES_CP_OUTER_U0_start_out");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_start_write, "Loop_FRAMES_CP_OUTER_U0_start_write");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWVALID, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWVALID");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWADDR, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWADDR");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWID, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWID");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLEN, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLEN");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWSIZE, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWSIZE");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWBURST, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWBURST");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLOCK, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLOCK");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWCACHE, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWCACHE");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWPROT, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWPROT");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWQOS, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWQOS");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWREGION, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWREGION");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWUSER, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWUSER");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WVALID, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WVALID");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WDATA, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WDATA");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WSTRB, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WSTRB");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WLAST, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WLAST");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WID, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WID");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WUSER, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WUSER");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARVALID, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARVALID");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARADDR, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARADDR");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARID, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARID");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLEN, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLEN");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARSIZE, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARSIZE");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARBURST, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARBURST");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLOCK, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLOCK");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARCACHE, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARCACHE");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARPROT, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARPROT");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARQOS, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARQOS");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARREGION, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARREGION");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARUSER, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARUSER");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_RREADY, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_RREADY");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_BREADY, "Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_BREADY");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frames_V_offset_read, "Loop_FRAMES_CP_OUTER_U0_frames_V_offset_read");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame1_a_V_din, "Loop_FRAMES_CP_OUTER_U0_frame1_a_V_din");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame1_a_V_write, "Loop_FRAMES_CP_OUTER_U0_frame1_a_V_write");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame2_a_V_din, "Loop_FRAMES_CP_OUTER_U0_frame2_a_V_din");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame2_a_V_write, "Loop_FRAMES_CP_OUTER_U0_frame2_a_V_write");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame3_a_V_din, "Loop_FRAMES_CP_OUTER_U0_frame3_a_V_din");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame3_a_V_write, "Loop_FRAMES_CP_OUTER_U0_frame3_a_V_write");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame3_b_V_din, "Loop_FRAMES_CP_OUTER_U0_frame3_b_V_din");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame3_b_V_write, "Loop_FRAMES_CP_OUTER_U0_frame3_b_V_write");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame4_a_V_din, "Loop_FRAMES_CP_OUTER_U0_frame4_a_V_din");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame4_a_V_write, "Loop_FRAMES_CP_OUTER_U0_frame4_a_V_write");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame5_a_V_din, "Loop_FRAMES_CP_OUTER_U0_frame5_a_V_din");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_frame5_a_V_write, "Loop_FRAMES_CP_OUTER_U0_frame5_a_V_write");
    sc_trace(mVcdFile, gradient_xy_calc_U0_ap_start, "gradient_xy_calc_U0_ap_start");
    sc_trace(mVcdFile, gradient_xy_calc_U0_ap_done, "gradient_xy_calc_U0_ap_done");
    sc_trace(mVcdFile, gradient_xy_calc_U0_ap_continue, "gradient_xy_calc_U0_ap_continue");
    sc_trace(mVcdFile, gradient_xy_calc_U0_ap_idle, "gradient_xy_calc_U0_ap_idle");
    sc_trace(mVcdFile, gradient_xy_calc_U0_ap_ready, "gradient_xy_calc_U0_ap_ready");
    sc_trace(mVcdFile, gradient_xy_calc_U0_start_out, "gradient_xy_calc_U0_start_out");
    sc_trace(mVcdFile, gradient_xy_calc_U0_start_write, "gradient_xy_calc_U0_start_write");
    sc_trace(mVcdFile, gradient_xy_calc_U0_frame3_a_V_read, "gradient_xy_calc_U0_frame3_a_V_read");
    sc_trace(mVcdFile, gradient_xy_calc_U0_gradient_x_V_din, "gradient_xy_calc_U0_gradient_x_V_din");
    sc_trace(mVcdFile, gradient_xy_calc_U0_gradient_x_V_write, "gradient_xy_calc_U0_gradient_x_V_write");
    sc_trace(mVcdFile, gradient_xy_calc_U0_gradient_y_V_din, "gradient_xy_calc_U0_gradient_y_V_din");
    sc_trace(mVcdFile, gradient_xy_calc_U0_gradient_y_V_write, "gradient_xy_calc_U0_gradient_y_V_write");
    sc_trace(mVcdFile, gradient_z_calc_U0_ap_start, "gradient_z_calc_U0_ap_start");
    sc_trace(mVcdFile, gradient_z_calc_U0_ap_done, "gradient_z_calc_U0_ap_done");
    sc_trace(mVcdFile, gradient_z_calc_U0_ap_continue, "gradient_z_calc_U0_ap_continue");
    sc_trace(mVcdFile, gradient_z_calc_U0_ap_idle, "gradient_z_calc_U0_ap_idle");
    sc_trace(mVcdFile, gradient_z_calc_U0_ap_ready, "gradient_z_calc_U0_ap_ready");
    sc_trace(mVcdFile, gradient_z_calc_U0_frame1_a_V_read, "gradient_z_calc_U0_frame1_a_V_read");
    sc_trace(mVcdFile, gradient_z_calc_U0_frame2_a_V_read, "gradient_z_calc_U0_frame2_a_V_read");
    sc_trace(mVcdFile, gradient_z_calc_U0_frame3_b_V_read, "gradient_z_calc_U0_frame3_b_V_read");
    sc_trace(mVcdFile, gradient_z_calc_U0_frame4_a_V_read, "gradient_z_calc_U0_frame4_a_V_read");
    sc_trace(mVcdFile, gradient_z_calc_U0_frame5_a_V_read, "gradient_z_calc_U0_frame5_a_V_read");
    sc_trace(mVcdFile, gradient_z_calc_U0_gradient_z_V_din, "gradient_z_calc_U0_gradient_z_V_din");
    sc_trace(mVcdFile, gradient_z_calc_U0_gradient_z_V_write, "gradient_z_calc_U0_gradient_z_V_write");
    sc_trace(mVcdFile, gradient_weight_y_U0_ap_start, "gradient_weight_y_U0_ap_start");
    sc_trace(mVcdFile, gradient_weight_y_U0_ap_done, "gradient_weight_y_U0_ap_done");
    sc_trace(mVcdFile, gradient_weight_y_U0_ap_continue, "gradient_weight_y_U0_ap_continue");
    sc_trace(mVcdFile, gradient_weight_y_U0_ap_idle, "gradient_weight_y_U0_ap_idle");
    sc_trace(mVcdFile, gradient_weight_y_U0_ap_ready, "gradient_weight_y_U0_ap_ready");
    sc_trace(mVcdFile, gradient_weight_y_U0_start_out, "gradient_weight_y_U0_start_out");
    sc_trace(mVcdFile, gradient_weight_y_U0_start_write, "gradient_weight_y_U0_start_write");
    sc_trace(mVcdFile, gradient_weight_y_U0_gradient_x_V_read, "gradient_weight_y_U0_gradient_x_V_read");
    sc_trace(mVcdFile, gradient_weight_y_U0_gradient_y_V_read, "gradient_weight_y_U0_gradient_y_V_read");
    sc_trace(mVcdFile, gradient_weight_y_U0_gradient_z_V_read, "gradient_weight_y_U0_gradient_z_V_read");
    sc_trace(mVcdFile, gradient_weight_y_U0_y_filtered_x_V_din, "gradient_weight_y_U0_y_filtered_x_V_din");
    sc_trace(mVcdFile, gradient_weight_y_U0_y_filtered_x_V_write, "gradient_weight_y_U0_y_filtered_x_V_write");
    sc_trace(mVcdFile, gradient_weight_y_U0_y_filtered_y_V_din, "gradient_weight_y_U0_y_filtered_y_V_din");
    sc_trace(mVcdFile, gradient_weight_y_U0_y_filtered_y_V_write, "gradient_weight_y_U0_y_filtered_y_V_write");
    sc_trace(mVcdFile, gradient_weight_y_U0_y_filtered_z_V_din, "gradient_weight_y_U0_y_filtered_z_V_din");
    sc_trace(mVcdFile, gradient_weight_y_U0_y_filtered_z_V_write, "gradient_weight_y_U0_y_filtered_z_V_write");
    sc_trace(mVcdFile, gradient_weight_x_U0_ap_start, "gradient_weight_x_U0_ap_start");
    sc_trace(mVcdFile, gradient_weight_x_U0_ap_done, "gradient_weight_x_U0_ap_done");
    sc_trace(mVcdFile, gradient_weight_x_U0_ap_continue, "gradient_weight_x_U0_ap_continue");
    sc_trace(mVcdFile, gradient_weight_x_U0_ap_idle, "gradient_weight_x_U0_ap_idle");
    sc_trace(mVcdFile, gradient_weight_x_U0_ap_ready, "gradient_weight_x_U0_ap_ready");
    sc_trace(mVcdFile, gradient_weight_x_U0_start_out, "gradient_weight_x_U0_start_out");
    sc_trace(mVcdFile, gradient_weight_x_U0_start_write, "gradient_weight_x_U0_start_write");
    sc_trace(mVcdFile, gradient_weight_x_U0_y_filtered_x_V_read, "gradient_weight_x_U0_y_filtered_x_V_read");
    sc_trace(mVcdFile, gradient_weight_x_U0_y_filtered_y_V_read, "gradient_weight_x_U0_y_filtered_y_V_read");
    sc_trace(mVcdFile, gradient_weight_x_U0_y_filtered_z_V_read, "gradient_weight_x_U0_y_filtered_z_V_read");
    sc_trace(mVcdFile, gradient_weight_x_U0_filtered_gradient_x_s_din, "gradient_weight_x_U0_filtered_gradient_x_s_din");
    sc_trace(mVcdFile, gradient_weight_x_U0_filtered_gradient_x_s_write, "gradient_weight_x_U0_filtered_gradient_x_s_write");
    sc_trace(mVcdFile, gradient_weight_x_U0_filtered_gradient_y_s_din, "gradient_weight_x_U0_filtered_gradient_y_s_din");
    sc_trace(mVcdFile, gradient_weight_x_U0_filtered_gradient_y_s_write, "gradient_weight_x_U0_filtered_gradient_y_s_write");
    sc_trace(mVcdFile, gradient_weight_x_U0_filtered_gradient_z_s_din, "gradient_weight_x_U0_filtered_gradient_z_s_din");
    sc_trace(mVcdFile, gradient_weight_x_U0_filtered_gradient_z_s_write, "gradient_weight_x_U0_filtered_gradient_z_s_write");
    sc_trace(mVcdFile, outer_product_U0_ap_start, "outer_product_U0_ap_start");
    sc_trace(mVcdFile, outer_product_U0_ap_done, "outer_product_U0_ap_done");
    sc_trace(mVcdFile, outer_product_U0_ap_continue, "outer_product_U0_ap_continue");
    sc_trace(mVcdFile, outer_product_U0_ap_idle, "outer_product_U0_ap_idle");
    sc_trace(mVcdFile, outer_product_U0_ap_ready, "outer_product_U0_ap_ready");
    sc_trace(mVcdFile, outer_product_U0_start_out, "outer_product_U0_start_out");
    sc_trace(mVcdFile, outer_product_U0_start_write, "outer_product_U0_start_write");
    sc_trace(mVcdFile, outer_product_U0_filtered_gradient_x_s_read, "outer_product_U0_filtered_gradient_x_s_read");
    sc_trace(mVcdFile, outer_product_U0_filtered_gradient_y_s_read, "outer_product_U0_filtered_gradient_y_s_read");
    sc_trace(mVcdFile, outer_product_U0_filtered_gradient_z_s_read, "outer_product_U0_filtered_gradient_z_s_read");
    sc_trace(mVcdFile, outer_product_U0_out_product_val_V_din, "outer_product_U0_out_product_val_V_din");
    sc_trace(mVcdFile, outer_product_U0_out_product_val_V_write, "outer_product_U0_out_product_val_V_write");
    sc_trace(mVcdFile, tensor_weight_y_U0_ap_start, "tensor_weight_y_U0_ap_start");
    sc_trace(mVcdFile, tensor_weight_y_U0_ap_done, "tensor_weight_y_U0_ap_done");
    sc_trace(mVcdFile, tensor_weight_y_U0_ap_continue, "tensor_weight_y_U0_ap_continue");
    sc_trace(mVcdFile, tensor_weight_y_U0_ap_idle, "tensor_weight_y_U0_ap_idle");
    sc_trace(mVcdFile, tensor_weight_y_U0_ap_ready, "tensor_weight_y_U0_ap_ready");
    sc_trace(mVcdFile, tensor_weight_y_U0_start_out, "tensor_weight_y_U0_start_out");
    sc_trace(mVcdFile, tensor_weight_y_U0_start_write, "tensor_weight_y_U0_start_write");
    sc_trace(mVcdFile, tensor_weight_y_U0_out_product_val_V_read, "tensor_weight_y_U0_out_product_val_V_read");
    sc_trace(mVcdFile, tensor_weight_y_U0_tensor_y_val_V_din, "tensor_weight_y_U0_tensor_y_val_V_din");
    sc_trace(mVcdFile, tensor_weight_y_U0_tensor_y_val_V_write, "tensor_weight_y_U0_tensor_y_val_V_write");
    sc_trace(mVcdFile, tensor_weight_x_U0_ap_start, "tensor_weight_x_U0_ap_start");
    sc_trace(mVcdFile, tensor_weight_x_U0_ap_done, "tensor_weight_x_U0_ap_done");
    sc_trace(mVcdFile, tensor_weight_x_U0_ap_continue, "tensor_weight_x_U0_ap_continue");
    sc_trace(mVcdFile, tensor_weight_x_U0_ap_idle, "tensor_weight_x_U0_ap_idle");
    sc_trace(mVcdFile, tensor_weight_x_U0_ap_ready, "tensor_weight_x_U0_ap_ready");
    sc_trace(mVcdFile, tensor_weight_x_U0_tensor_y_val_V_read, "tensor_weight_x_U0_tensor_y_val_V_read");
    sc_trace(mVcdFile, tensor_weight_x_U0_tensor_val_V_din, "tensor_weight_x_U0_tensor_val_V_din");
    sc_trace(mVcdFile, tensor_weight_x_U0_tensor_val_V_write, "tensor_weight_x_U0_tensor_val_V_write");
    sc_trace(mVcdFile, flow_calc_U0_ap_start, "flow_calc_U0_ap_start");
    sc_trace(mVcdFile, flow_calc_U0_ap_done, "flow_calc_U0_ap_done");
    sc_trace(mVcdFile, flow_calc_U0_ap_continue, "flow_calc_U0_ap_continue");
    sc_trace(mVcdFile, flow_calc_U0_ap_idle, "flow_calc_U0_ap_idle");
    sc_trace(mVcdFile, flow_calc_U0_ap_ready, "flow_calc_U0_ap_ready");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWVALID, "flow_calc_U0_m_axi_outputs_AWVALID");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWADDR, "flow_calc_U0_m_axi_outputs_AWADDR");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWID, "flow_calc_U0_m_axi_outputs_AWID");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWLEN, "flow_calc_U0_m_axi_outputs_AWLEN");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWSIZE, "flow_calc_U0_m_axi_outputs_AWSIZE");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWBURST, "flow_calc_U0_m_axi_outputs_AWBURST");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWLOCK, "flow_calc_U0_m_axi_outputs_AWLOCK");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWCACHE, "flow_calc_U0_m_axi_outputs_AWCACHE");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWPROT, "flow_calc_U0_m_axi_outputs_AWPROT");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWQOS, "flow_calc_U0_m_axi_outputs_AWQOS");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWREGION, "flow_calc_U0_m_axi_outputs_AWREGION");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_AWUSER, "flow_calc_U0_m_axi_outputs_AWUSER");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_WVALID, "flow_calc_U0_m_axi_outputs_WVALID");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_WDATA, "flow_calc_U0_m_axi_outputs_WDATA");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_WSTRB, "flow_calc_U0_m_axi_outputs_WSTRB");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_WLAST, "flow_calc_U0_m_axi_outputs_WLAST");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_WID, "flow_calc_U0_m_axi_outputs_WID");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_WUSER, "flow_calc_U0_m_axi_outputs_WUSER");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARVALID, "flow_calc_U0_m_axi_outputs_ARVALID");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARADDR, "flow_calc_U0_m_axi_outputs_ARADDR");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARID, "flow_calc_U0_m_axi_outputs_ARID");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARLEN, "flow_calc_U0_m_axi_outputs_ARLEN");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARSIZE, "flow_calc_U0_m_axi_outputs_ARSIZE");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARBURST, "flow_calc_U0_m_axi_outputs_ARBURST");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARLOCK, "flow_calc_U0_m_axi_outputs_ARLOCK");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARCACHE, "flow_calc_U0_m_axi_outputs_ARCACHE");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARPROT, "flow_calc_U0_m_axi_outputs_ARPROT");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARQOS, "flow_calc_U0_m_axi_outputs_ARQOS");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARREGION, "flow_calc_U0_m_axi_outputs_ARREGION");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_ARUSER, "flow_calc_U0_m_axi_outputs_ARUSER");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_RREADY, "flow_calc_U0_m_axi_outputs_RREADY");
    sc_trace(mVcdFile, flow_calc_U0_m_axi_outputs_BREADY, "flow_calc_U0_m_axi_outputs_BREADY");
    sc_trace(mVcdFile, flow_calc_U0_outputs_offset_read, "flow_calc_U0_outputs_offset_read");
    sc_trace(mVcdFile, flow_calc_U0_tensor_val_V_read, "flow_calc_U0_tensor_val_V_read");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, frames_V_c_full_n, "frames_V_c_full_n");
    sc_trace(mVcdFile, frames_V_c_dout, "frames_V_c_dout");
    sc_trace(mVcdFile, frames_V_c_empty_n, "frames_V_c_empty_n");
    sc_trace(mVcdFile, outputs_c_full_n, "outputs_c_full_n");
    sc_trace(mVcdFile, outputs_c_dout, "outputs_c_dout");
    sc_trace(mVcdFile, outputs_c_empty_n, "outputs_c_empty_n");
    sc_trace(mVcdFile, frame1_a_V_full_n, "frame1_a_V_full_n");
    sc_trace(mVcdFile, frame1_a_V_dout, "frame1_a_V_dout");
    sc_trace(mVcdFile, frame1_a_V_empty_n, "frame1_a_V_empty_n");
    sc_trace(mVcdFile, frame2_a_V_full_n, "frame2_a_V_full_n");
    sc_trace(mVcdFile, frame2_a_V_dout, "frame2_a_V_dout");
    sc_trace(mVcdFile, frame2_a_V_empty_n, "frame2_a_V_empty_n");
    sc_trace(mVcdFile, frame3_a_V_full_n, "frame3_a_V_full_n");
    sc_trace(mVcdFile, frame3_a_V_dout, "frame3_a_V_dout");
    sc_trace(mVcdFile, frame3_a_V_empty_n, "frame3_a_V_empty_n");
    sc_trace(mVcdFile, frame3_b_V_full_n, "frame3_b_V_full_n");
    sc_trace(mVcdFile, frame3_b_V_dout, "frame3_b_V_dout");
    sc_trace(mVcdFile, frame3_b_V_empty_n, "frame3_b_V_empty_n");
    sc_trace(mVcdFile, frame4_a_V_full_n, "frame4_a_V_full_n");
    sc_trace(mVcdFile, frame4_a_V_dout, "frame4_a_V_dout");
    sc_trace(mVcdFile, frame4_a_V_empty_n, "frame4_a_V_empty_n");
    sc_trace(mVcdFile, frame5_a_V_full_n, "frame5_a_V_full_n");
    sc_trace(mVcdFile, frame5_a_V_dout, "frame5_a_V_dout");
    sc_trace(mVcdFile, frame5_a_V_empty_n, "frame5_a_V_empty_n");
    sc_trace(mVcdFile, gradient_x_V_full_n, "gradient_x_V_full_n");
    sc_trace(mVcdFile, gradient_x_V_dout, "gradient_x_V_dout");
    sc_trace(mVcdFile, gradient_x_V_empty_n, "gradient_x_V_empty_n");
    sc_trace(mVcdFile, gradient_y_V_full_n, "gradient_y_V_full_n");
    sc_trace(mVcdFile, gradient_y_V_dout, "gradient_y_V_dout");
    sc_trace(mVcdFile, gradient_y_V_empty_n, "gradient_y_V_empty_n");
    sc_trace(mVcdFile, gradient_z_V_full_n, "gradient_z_V_full_n");
    sc_trace(mVcdFile, gradient_z_V_dout, "gradient_z_V_dout");
    sc_trace(mVcdFile, gradient_z_V_empty_n, "gradient_z_V_empty_n");
    sc_trace(mVcdFile, y_filtered_x_V_full_n, "y_filtered_x_V_full_n");
    sc_trace(mVcdFile, y_filtered_x_V_dout, "y_filtered_x_V_dout");
    sc_trace(mVcdFile, y_filtered_x_V_empty_n, "y_filtered_x_V_empty_n");
    sc_trace(mVcdFile, y_filtered_y_V_full_n, "y_filtered_y_V_full_n");
    sc_trace(mVcdFile, y_filtered_y_V_dout, "y_filtered_y_V_dout");
    sc_trace(mVcdFile, y_filtered_y_V_empty_n, "y_filtered_y_V_empty_n");
    sc_trace(mVcdFile, y_filtered_z_V_full_n, "y_filtered_z_V_full_n");
    sc_trace(mVcdFile, y_filtered_z_V_dout, "y_filtered_z_V_dout");
    sc_trace(mVcdFile, y_filtered_z_V_empty_n, "y_filtered_z_V_empty_n");
    sc_trace(mVcdFile, filtered_gradient_x_s_full_n, "filtered_gradient_x_s_full_n");
    sc_trace(mVcdFile, filtered_gradient_x_s_dout, "filtered_gradient_x_s_dout");
    sc_trace(mVcdFile, filtered_gradient_x_s_empty_n, "filtered_gradient_x_s_empty_n");
    sc_trace(mVcdFile, filtered_gradient_y_s_full_n, "filtered_gradient_y_s_full_n");
    sc_trace(mVcdFile, filtered_gradient_y_s_dout, "filtered_gradient_y_s_dout");
    sc_trace(mVcdFile, filtered_gradient_y_s_empty_n, "filtered_gradient_y_s_empty_n");
    sc_trace(mVcdFile, filtered_gradient_z_s_full_n, "filtered_gradient_z_s_full_n");
    sc_trace(mVcdFile, filtered_gradient_z_s_dout, "filtered_gradient_z_s_dout");
    sc_trace(mVcdFile, filtered_gradient_z_s_empty_n, "filtered_gradient_z_s_empty_n");
    sc_trace(mVcdFile, out_product_val_V_full_n, "out_product_val_V_full_n");
    sc_trace(mVcdFile, out_product_val_V_dout, "out_product_val_V_dout");
    sc_trace(mVcdFile, out_product_val_V_empty_n, "out_product_val_V_empty_n");
    sc_trace(mVcdFile, tensor_y_val_V_full_n, "tensor_y_val_V_full_n");
    sc_trace(mVcdFile, tensor_y_val_V_dout, "tensor_y_val_V_dout");
    sc_trace(mVcdFile, tensor_y_val_V_empty_n, "tensor_y_val_V_empty_n");
    sc_trace(mVcdFile, tensor_val_V_full_n, "tensor_val_V_full_n");
    sc_trace(mVcdFile, tensor_val_V_dout, "tensor_val_V_dout");
    sc_trace(mVcdFile, tensor_val_V_empty_n, "tensor_val_V_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready, "ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready, "ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready");
    sc_trace(mVcdFile, Loop_FRAMES_CP_OUTER_U0_ap_ready_count, "Loop_FRAMES_CP_OUTER_U0_ap_ready_count");
    sc_trace(mVcdFile, ap_sync_reg_optical_flow_entry12_U0_ap_ready, "ap_sync_reg_optical_flow_entry12_U0_ap_ready");
    sc_trace(mVcdFile, ap_sync_optical_flow_entry12_U0_ap_ready, "ap_sync_optical_flow_entry12_U0_ap_ready");
    sc_trace(mVcdFile, optical_flow_entry12_U0_ap_ready_count, "optical_flow_entry12_U0_ap_ready_count");
    sc_trace(mVcdFile, start_for_flow_calc_U0_din, "start_for_flow_calc_U0_din");
    sc_trace(mVcdFile, start_for_flow_calc_U0_full_n, "start_for_flow_calc_U0_full_n");
    sc_trace(mVcdFile, start_for_flow_calc_U0_dout, "start_for_flow_calc_U0_dout");
    sc_trace(mVcdFile, start_for_flow_calc_U0_empty_n, "start_for_flow_calc_U0_empty_n");
    sc_trace(mVcdFile, start_for_gradient_xy_calc_U0_din, "start_for_gradient_xy_calc_U0_din");
    sc_trace(mVcdFile, start_for_gradient_xy_calc_U0_full_n, "start_for_gradient_xy_calc_U0_full_n");
    sc_trace(mVcdFile, start_for_gradient_xy_calc_U0_dout, "start_for_gradient_xy_calc_U0_dout");
    sc_trace(mVcdFile, start_for_gradient_xy_calc_U0_empty_n, "start_for_gradient_xy_calc_U0_empty_n");
    sc_trace(mVcdFile, start_for_gradient_z_calc_U0_din, "start_for_gradient_z_calc_U0_din");
    sc_trace(mVcdFile, start_for_gradient_z_calc_U0_full_n, "start_for_gradient_z_calc_U0_full_n");
    sc_trace(mVcdFile, start_for_gradient_z_calc_U0_dout, "start_for_gradient_z_calc_U0_dout");
    sc_trace(mVcdFile, start_for_gradient_z_calc_U0_empty_n, "start_for_gradient_z_calc_U0_empty_n");
    sc_trace(mVcdFile, start_for_gradient_weight_y_U0_din, "start_for_gradient_weight_y_U0_din");
    sc_trace(mVcdFile, start_for_gradient_weight_y_U0_full_n, "start_for_gradient_weight_y_U0_full_n");
    sc_trace(mVcdFile, start_for_gradient_weight_y_U0_dout, "start_for_gradient_weight_y_U0_dout");
    sc_trace(mVcdFile, start_for_gradient_weight_y_U0_empty_n, "start_for_gradient_weight_y_U0_empty_n");
    sc_trace(mVcdFile, gradient_z_calc_U0_start_full_n, "gradient_z_calc_U0_start_full_n");
    sc_trace(mVcdFile, gradient_z_calc_U0_start_write, "gradient_z_calc_U0_start_write");
    sc_trace(mVcdFile, start_for_gradient_weight_x_U0_din, "start_for_gradient_weight_x_U0_din");
    sc_trace(mVcdFile, start_for_gradient_weight_x_U0_full_n, "start_for_gradient_weight_x_U0_full_n");
    sc_trace(mVcdFile, start_for_gradient_weight_x_U0_dout, "start_for_gradient_weight_x_U0_dout");
    sc_trace(mVcdFile, start_for_gradient_weight_x_U0_empty_n, "start_for_gradient_weight_x_U0_empty_n");
    sc_trace(mVcdFile, start_for_outer_product_U0_din, "start_for_outer_product_U0_din");
    sc_trace(mVcdFile, start_for_outer_product_U0_full_n, "start_for_outer_product_U0_full_n");
    sc_trace(mVcdFile, start_for_outer_product_U0_dout, "start_for_outer_product_U0_dout");
    sc_trace(mVcdFile, start_for_outer_product_U0_empty_n, "start_for_outer_product_U0_empty_n");
    sc_trace(mVcdFile, start_for_tensor_weight_y_U0_din, "start_for_tensor_weight_y_U0_din");
    sc_trace(mVcdFile, start_for_tensor_weight_y_U0_full_n, "start_for_tensor_weight_y_U0_full_n");
    sc_trace(mVcdFile, start_for_tensor_weight_y_U0_dout, "start_for_tensor_weight_y_U0_dout");
    sc_trace(mVcdFile, start_for_tensor_weight_y_U0_empty_n, "start_for_tensor_weight_y_U0_empty_n");
    sc_trace(mVcdFile, start_for_tensor_weight_x_U0_din, "start_for_tensor_weight_x_U0_din");
    sc_trace(mVcdFile, start_for_tensor_weight_x_U0_full_n, "start_for_tensor_weight_x_U0_full_n");
    sc_trace(mVcdFile, start_for_tensor_weight_x_U0_dout, "start_for_tensor_weight_x_U0_dout");
    sc_trace(mVcdFile, start_for_tensor_weight_x_U0_empty_n, "start_for_tensor_weight_x_U0_empty_n");
    sc_trace(mVcdFile, tensor_weight_x_U0_start_full_n, "tensor_weight_x_U0_start_full_n");
    sc_trace(mVcdFile, tensor_weight_x_U0_start_write, "tensor_weight_x_U0_start_write");
    sc_trace(mVcdFile, flow_calc_U0_start_full_n, "flow_calc_U0_start_full_n");
    sc_trace(mVcdFile, flow_calc_U0_start_write, "flow_calc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("optical_flow.hdltvin.dat");
    mHdltvoutHandle.open("optical_flow.hdltvout.dat");
}

optical_flow::~optical_flow() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete optical_flow_control_s_axi_U;
    delete optical_flow_gmem0_m_axi_U;
    delete optical_flow_gmem1_m_axi_U;
    delete optical_flow_entry12_U0;
    delete Loop_FRAMES_CP_OUTER_U0;
    delete gradient_xy_calc_U0;
    delete gradient_z_calc_U0;
    delete gradient_weight_y_U0;
    delete gradient_weight_x_U0;
    delete outer_product_U0;
    delete tensor_weight_y_U0;
    delete tensor_weight_x_U0;
    delete flow_calc_U0;
    delete frames_V_c_U;
    delete outputs_c_U;
    delete frame1_a_V_U;
    delete frame2_a_V_U;
    delete frame3_a_V_U;
    delete frame3_b_V_U;
    delete frame4_a_V_U;
    delete frame5_a_V_U;
    delete gradient_x_V_U;
    delete gradient_y_V_U;
    delete gradient_z_V_U;
    delete y_filtered_x_V_U;
    delete y_filtered_y_V_U;
    delete y_filtered_z_V_U;
    delete filtered_gradient_x_s_U;
    delete filtered_gradient_y_s_U;
    delete filtered_gradient_z_s_U;
    delete out_product_val_V_U;
    delete tensor_y_val_V_U;
    delete tensor_val_V_U;
    delete start_for_flow_caCeG_U;
    delete start_for_gradienDeQ_U;
    delete start_for_gradienEe0_U;
    delete start_for_gradienFfa_U;
    delete start_for_gradienGfk_U;
    delete start_for_outer_pHfu_U;
    delete start_for_tensor_IfE_U;
    delete start_for_tensor_JfO_U;
}

void optical_flow::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void optical_flow::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_logic_0;
}

void optical_flow::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void optical_flow::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_0;
}

void optical_flow::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv1_0;
}

void optical_flow::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void optical_flow::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void optical_flow::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv64_0;
}

void optical_flow::thread_ap_var_for_const8() {
    ap_var_for_const8 = ap_const_lv8_0;
}

void optical_flow::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(Loop_FRAMES_CP_OUTER_U0_ap_ready.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()))) {
        Loop_FRAMES_CP_OUTER_U0_ap_ready_count = (!Loop_FRAMES_CP_OUTER_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Loop_FRAMES_CP_OUTER_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, Loop_FRAMES_CP_OUTER_U0_ap_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()))) {
        Loop_FRAMES_CP_OUTER_U0_ap_ready_count = (!Loop_FRAMES_CP_OUTER_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(Loop_FRAMES_CP_OUTER_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready = ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_sync_reg_optical_flow_entry12_U0_ap_ready = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (ap_start.read() & 
             ap_sync_ready.read()))) {
            ap_sync_reg_optical_flow_entry12_U0_ap_ready = ap_const_logic_0;
        } else {
            ap_sync_reg_optical_flow_entry12_U0_ap_ready = ap_sync_optical_flow_entry12_U0_ap_ready.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sync_ready.read()) && 
         esl_seteq<1,1,1>(optical_flow_entry12_U0_ap_ready.read(), ap_const_logic_0))) {
        optical_flow_entry12_U0_ap_ready_count = (!optical_flow_entry12_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(optical_flow_entry12_U0_ap_ready_count.read()) - sc_biguint<2>(ap_const_lv2_1));
    } else if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_sync_ready.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, optical_flow_entry12_U0_ap_ready.read()))) {
        optical_flow_entry12_U0_ap_ready_count = (!optical_flow_entry12_U0_ap_ready_count.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(optical_flow_entry12_U0_ap_ready_count.read()) + sc_biguint<2>(ap_const_lv2_1));
    }
}

void optical_flow::thread_Loop_FRAMES_CP_OUTER_U0_ap_continue() {
    Loop_FRAMES_CP_OUTER_U0_ap_continue = ap_const_logic_1;
}

void optical_flow::thread_Loop_FRAMES_CP_OUTER_U0_ap_start() {
    Loop_FRAMES_CP_OUTER_U0_ap_start = (ap_start.read() & (ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void optical_flow::thread_Loop_FRAMES_CP_OUTER_U0_start_full_n() {
    Loop_FRAMES_CP_OUTER_U0_start_full_n = (start_for_gradient_xy_calc_U0_full_n.read() & start_for_gradient_z_calc_U0_full_n.read());
}

void optical_flow::thread_ap_done() {
    ap_done = flow_calc_U0_ap_done.read();
}

void optical_flow::thread_ap_idle() {
    ap_idle = (optical_flow_entry12_U0_ap_idle.read() & Loop_FRAMES_CP_OUTER_U0_ap_idle.read() & gradient_xy_calc_U0_ap_idle.read() & gradient_z_calc_U0_ap_idle.read() & gradient_weight_y_U0_ap_idle.read() & gradient_weight_x_U0_ap_idle.read() & outer_product_U0_ap_idle.read() & tensor_weight_y_U0_ap_idle.read() & tensor_weight_x_U0_ap_idle.read() & flow_calc_U0_ap_idle.read());
}

void optical_flow::thread_ap_ready() {
    ap_ready = ap_sync_ready.read();
}

void optical_flow::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void optical_flow::thread_ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready() {
    ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready = (Loop_FRAMES_CP_OUTER_U0_ap_ready.read() | ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready.read());
}

void optical_flow::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void optical_flow::thread_ap_sync_done() {
    ap_sync_done = flow_calc_U0_ap_done.read();
}

void optical_flow::thread_ap_sync_optical_flow_entry12_U0_ap_ready() {
    ap_sync_optical_flow_entry12_U0_ap_ready = (optical_flow_entry12_U0_ap_ready.read() | ap_sync_reg_optical_flow_entry12_U0_ap_ready.read());
}

void optical_flow::thread_ap_sync_ready() {
    ap_sync_ready = (ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready.read() & ap_sync_optical_flow_entry12_U0_ap_ready.read());
}

void optical_flow::thread_flow_calc_U0_ap_continue() {
    flow_calc_U0_ap_continue = ap_const_logic_1;
}

void optical_flow::thread_flow_calc_U0_ap_start() {
    flow_calc_U0_ap_start = start_for_flow_calc_U0_empty_n.read();
}

void optical_flow::thread_flow_calc_U0_start_full_n() {
    flow_calc_U0_start_full_n = ap_const_logic_1;
}

void optical_flow::thread_flow_calc_U0_start_write() {
    flow_calc_U0_start_write = ap_const_logic_0;
}

void optical_flow::thread_gradient_weight_x_U0_ap_continue() {
    gradient_weight_x_U0_ap_continue = ap_const_logic_1;
}

void optical_flow::thread_gradient_weight_x_U0_ap_start() {
    gradient_weight_x_U0_ap_start = start_for_gradient_weight_x_U0_empty_n.read();
}

void optical_flow::thread_gradient_weight_y_U0_ap_continue() {
    gradient_weight_y_U0_ap_continue = ap_const_logic_1;
}

void optical_flow::thread_gradient_weight_y_U0_ap_start() {
    gradient_weight_y_U0_ap_start = start_for_gradient_weight_y_U0_empty_n.read();
}

void optical_flow::thread_gradient_xy_calc_U0_ap_continue() {
    gradient_xy_calc_U0_ap_continue = ap_const_logic_1;
}

void optical_flow::thread_gradient_xy_calc_U0_ap_start() {
    gradient_xy_calc_U0_ap_start = start_for_gradient_xy_calc_U0_empty_n.read();
}

void optical_flow::thread_gradient_z_calc_U0_ap_continue() {
    gradient_z_calc_U0_ap_continue = ap_const_logic_1;
}

void optical_flow::thread_gradient_z_calc_U0_ap_start() {
    gradient_z_calc_U0_ap_start = start_for_gradient_z_calc_U0_empty_n.read();
}

void optical_flow::thread_gradient_z_calc_U0_start_full_n() {
    gradient_z_calc_U0_start_full_n = ap_const_logic_1;
}

void optical_flow::thread_gradient_z_calc_U0_start_write() {
    gradient_z_calc_U0_start_write = ap_const_logic_0;
}

void optical_flow::thread_optical_flow_entry12_U0_ap_continue() {
    optical_flow_entry12_U0_ap_continue = ap_const_logic_1;
}

void optical_flow::thread_optical_flow_entry12_U0_ap_start() {
    optical_flow_entry12_U0_ap_start = (ap_start.read() & (ap_sync_reg_optical_flow_entry12_U0_ap_ready.read() ^ 
  ap_const_logic_1));
}

void optical_flow::thread_outer_product_U0_ap_continue() {
    outer_product_U0_ap_continue = ap_const_logic_1;
}

void optical_flow::thread_outer_product_U0_ap_start() {
    outer_product_U0_ap_start = start_for_outer_product_U0_empty_n.read();
}

void optical_flow::thread_start_for_flow_calc_U0_din() {
    start_for_flow_calc_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void optical_flow::thread_start_for_gradient_weight_x_U0_din() {
    start_for_gradient_weight_x_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void optical_flow::thread_start_for_gradient_weight_y_U0_din() {
    start_for_gradient_weight_y_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void optical_flow::thread_start_for_gradient_xy_calc_U0_din() {
    start_for_gradient_xy_calc_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void optical_flow::thread_start_for_gradient_z_calc_U0_din() {
    start_for_gradient_z_calc_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void optical_flow::thread_start_for_outer_product_U0_din() {
    start_for_outer_product_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void optical_flow::thread_start_for_tensor_weight_x_U0_din() {
    start_for_tensor_weight_x_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void optical_flow::thread_start_for_tensor_weight_y_U0_din() {
    start_for_tensor_weight_y_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void optical_flow::thread_tensor_weight_x_U0_ap_continue() {
    tensor_weight_x_U0_ap_continue = ap_const_logic_1;
}

void optical_flow::thread_tensor_weight_x_U0_ap_start() {
    tensor_weight_x_U0_ap_start = start_for_tensor_weight_x_U0_empty_n.read();
}

void optical_flow::thread_tensor_weight_x_U0_start_full_n() {
    tensor_weight_x_U0_start_full_n = ap_const_logic_1;
}

void optical_flow::thread_tensor_weight_x_U0_start_write() {
    tensor_weight_x_U0_start_write = ap_const_logic_0;
}

void optical_flow::thread_tensor_weight_y_U0_ap_continue() {
    tensor_weight_y_U0_ap_continue = ap_const_logic_1;
}

void optical_flow::thread_tensor_weight_y_U0_ap_start() {
    tensor_weight_y_U0_ap_start = start_for_tensor_weight_y_U0_empty_n.read();
}

void optical_flow::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWVALID\" :  \"" << m_axi_gmem0_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_AWREADY\" :  \"" << m_axi_gmem0_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWADDR\" :  \"" << m_axi_gmem0_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWID\" :  \"" << m_axi_gmem0_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWLEN\" :  \"" << m_axi_gmem0_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWSIZE\" :  \"" << m_axi_gmem0_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWBURST\" :  \"" << m_axi_gmem0_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWLOCK\" :  \"" << m_axi_gmem0_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWCACHE\" :  \"" << m_axi_gmem0_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWPROT\" :  \"" << m_axi_gmem0_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWQOS\" :  \"" << m_axi_gmem0_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWREGION\" :  \"" << m_axi_gmem0_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_AWUSER\" :  \"" << m_axi_gmem0_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WVALID\" :  \"" << m_axi_gmem0_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_WREADY\" :  \"" << m_axi_gmem0_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WDATA\" :  \"" << m_axi_gmem0_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WSTRB\" :  \"" << m_axi_gmem0_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WLAST\" :  \"" << m_axi_gmem0_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WID\" :  \"" << m_axi_gmem0_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_WUSER\" :  \"" << m_axi_gmem0_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARVALID\" :  \"" << m_axi_gmem0_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_ARREADY\" :  \"" << m_axi_gmem0_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARADDR\" :  \"" << m_axi_gmem0_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARID\" :  \"" << m_axi_gmem0_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARLEN\" :  \"" << m_axi_gmem0_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARSIZE\" :  \"" << m_axi_gmem0_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARBURST\" :  \"" << m_axi_gmem0_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARLOCK\" :  \"" << m_axi_gmem0_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARCACHE\" :  \"" << m_axi_gmem0_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARPROT\" :  \"" << m_axi_gmem0_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARQOS\" :  \"" << m_axi_gmem0_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARREGION\" :  \"" << m_axi_gmem0_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_ARUSER\" :  \"" << m_axi_gmem0_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RVALID\" :  \"" << m_axi_gmem0_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_RREADY\" :  \"" << m_axi_gmem0_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RDATA\" :  \"" << m_axi_gmem0_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RLAST\" :  \"" << m_axi_gmem0_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RID\" :  \"" << m_axi_gmem0_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RUSER\" :  \"" << m_axi_gmem0_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_RRESP\" :  \"" << m_axi_gmem0_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_BVALID\" :  \"" << m_axi_gmem0_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem0_BREADY\" :  \"" << m_axi_gmem0_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_BRESP\" :  \"" << m_axi_gmem0_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_BID\" :  \"" << m_axi_gmem0_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem0_BUSER\" :  \"" << m_axi_gmem0_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWVALID\" :  \"" << m_axi_gmem1_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_AWREADY\" :  \"" << m_axi_gmem1_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWADDR\" :  \"" << m_axi_gmem1_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWID\" :  \"" << m_axi_gmem1_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWLEN\" :  \"" << m_axi_gmem1_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWSIZE\" :  \"" << m_axi_gmem1_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWBURST\" :  \"" << m_axi_gmem1_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWLOCK\" :  \"" << m_axi_gmem1_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWCACHE\" :  \"" << m_axi_gmem1_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWPROT\" :  \"" << m_axi_gmem1_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWQOS\" :  \"" << m_axi_gmem1_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWREGION\" :  \"" << m_axi_gmem1_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_AWUSER\" :  \"" << m_axi_gmem1_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WVALID\" :  \"" << m_axi_gmem1_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_WREADY\" :  \"" << m_axi_gmem1_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WDATA\" :  \"" << m_axi_gmem1_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WSTRB\" :  \"" << m_axi_gmem1_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WLAST\" :  \"" << m_axi_gmem1_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WID\" :  \"" << m_axi_gmem1_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_WUSER\" :  \"" << m_axi_gmem1_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARVALID\" :  \"" << m_axi_gmem1_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_ARREADY\" :  \"" << m_axi_gmem1_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARADDR\" :  \"" << m_axi_gmem1_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARID\" :  \"" << m_axi_gmem1_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARLEN\" :  \"" << m_axi_gmem1_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARSIZE\" :  \"" << m_axi_gmem1_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARBURST\" :  \"" << m_axi_gmem1_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARLOCK\" :  \"" << m_axi_gmem1_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARCACHE\" :  \"" << m_axi_gmem1_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARPROT\" :  \"" << m_axi_gmem1_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARQOS\" :  \"" << m_axi_gmem1_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARREGION\" :  \"" << m_axi_gmem1_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_ARUSER\" :  \"" << m_axi_gmem1_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RVALID\" :  \"" << m_axi_gmem1_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_RREADY\" :  \"" << m_axi_gmem1_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RDATA\" :  \"" << m_axi_gmem1_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RLAST\" :  \"" << m_axi_gmem1_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RID\" :  \"" << m_axi_gmem1_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RUSER\" :  \"" << m_axi_gmem1_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_RRESP\" :  \"" << m_axi_gmem1_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_BVALID\" :  \"" << m_axi_gmem1_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem1_BREADY\" :  \"" << m_axi_gmem1_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_BRESP\" :  \"" << m_axi_gmem1_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_BID\" :  \"" << m_axi_gmem1_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem1_BUSER\" :  \"" << m_axi_gmem1_BUSER.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

