// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _gradient_z_calc_HH_
#define _gradient_z_calc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct gradient_z_calc : public sc_module {
    // Port declarations 25
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > frame1_a_V_dout;
    sc_in< sc_logic > frame1_a_V_empty_n;
    sc_out< sc_logic > frame1_a_V_read;
    sc_in< sc_lv<8> > frame2_a_V_dout;
    sc_in< sc_logic > frame2_a_V_empty_n;
    sc_out< sc_logic > frame2_a_V_read;
    sc_in< sc_lv<8> > frame3_b_V_dout;
    sc_in< sc_logic > frame3_b_V_empty_n;
    sc_out< sc_logic > frame3_b_V_read;
    sc_in< sc_lv<8> > frame4_a_V_dout;
    sc_in< sc_logic > frame4_a_V_empty_n;
    sc_out< sc_logic > frame4_a_V_read;
    sc_in< sc_lv<8> > frame5_a_V_dout;
    sc_in< sc_logic > frame5_a_V_empty_n;
    sc_out< sc_logic > frame5_a_V_read;
    sc_out< sc_lv<32> > gradient_z_V_din;
    sc_in< sc_logic > gradient_z_V_full_n;
    sc_out< sc_logic > gradient_z_V_write;


    // Module declarations
    gradient_z_calc(sc_module_name name);
    SC_HAS_PROCESS(gradient_z_calc);

    ~gradient_z_calc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > frame1_a_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_264;
    sc_signal< sc_logic > frame2_a_V_blk_n;
    sc_signal< sc_logic > frame3_b_V_blk_n;
    sc_signal< sc_logic > frame4_a_V_blk_n;
    sc_signal< sc_logic > frame5_a_V_blk_n;
    sc_signal< sc_logic > gradient_z_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_264_pp0_iter2_reg;
    sc_signal< sc_lv<6> > indvar_flatten_reg_109;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_120_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_264_pp0_iter1_reg;
    sc_signal< sc_lv<6> > indvar_flatten_next_fu_126_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<13> > p_Val2_3_fu_180_p2;
    sc_signal< sc_lv<13> > p_Val2_3_reg_273;
    sc_signal< sc_lv<1> > tmp_27_reg_278;
    sc_signal< sc_lv<1> > tmp_27_reg_278_pp0_iter2_reg;
    sc_signal< sc_lv<57> > mul_fu_205_p2;
    sc_signal< sc_lv<57> > mul_reg_284;
    sc_signal< sc_lv<21> > tmp_29_reg_289;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<11> > p_shl_fu_132_p3;
    sc_signal< sc_lv<12> > tmp_2_cast_fu_144_p1;
    sc_signal< sc_lv<12> > p_shl_cast_cast_fu_140_p1;
    sc_signal< sc_lv<12> > p_Val2_s_fu_148_p2;
    sc_signal< sc_lv<11> > p_Val2_1_fu_158_p3;
    sc_signal< sc_lv<13> > p_Val2_1_cast_cast_fu_166_p1;
    sc_signal< sc_lv<13> > p_Val2_cast_fu_154_p1;
    sc_signal< sc_lv<13> > p_Val2_2_fu_170_p2;
    sc_signal< sc_lv<13> > OP1_V_4_cast_fu_176_p1;
    sc_signal< sc_lv<24> > tmp_fu_194_p3;
    sc_signal< sc_lv<24> > mul_fu_205_p1;
    sc_signal< sc_lv<57> > neg_mul_fu_221_p2;
    sc_signal< sc_lv<21> > tmp_28_fu_226_p4;
    sc_signal< sc_lv<32> > tmp_s_fu_236_p1;
    sc_signal< sc_lv<32> > tmp_22_fu_240_p1;
    sc_signal< sc_lv<32> > tmp_23_fu_243_p3;
    sc_signal< sc_lv<32> > neg_ti_fu_250_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_32;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<57> ap_const_lv57_155555556;
    static const sc_lv<32> ap_const_lv32_24;
    static const sc_lv<32> ap_const_lv32_38;
    static const sc_lv<57> ap_const_lv57_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_OP1_V_4_cast_fu_176_p1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten_fu_120_p2();
    void thread_frame1_a_V_blk_n();
    void thread_frame1_a_V_read();
    void thread_frame2_a_V_blk_n();
    void thread_frame2_a_V_read();
    void thread_frame3_b_V_blk_n();
    void thread_frame3_b_V_read();
    void thread_frame4_a_V_blk_n();
    void thread_frame4_a_V_read();
    void thread_frame5_a_V_blk_n();
    void thread_frame5_a_V_read();
    void thread_gradient_z_V_blk_n();
    void thread_gradient_z_V_din();
    void thread_gradient_z_V_write();
    void thread_indvar_flatten_next_fu_126_p2();
    void thread_mul_fu_205_p1();
    void thread_mul_fu_205_p2();
    void thread_neg_mul_fu_221_p2();
    void thread_neg_ti_fu_250_p2();
    void thread_p_Val2_1_cast_cast_fu_166_p1();
    void thread_p_Val2_1_fu_158_p3();
    void thread_p_Val2_2_fu_170_p2();
    void thread_p_Val2_3_fu_180_p2();
    void thread_p_Val2_cast_fu_154_p1();
    void thread_p_Val2_s_fu_148_p2();
    void thread_p_shl_cast_cast_fu_140_p1();
    void thread_p_shl_fu_132_p3();
    void thread_tmp_22_fu_240_p1();
    void thread_tmp_23_fu_243_p3();
    void thread_tmp_28_fu_226_p4();
    void thread_tmp_2_cast_fu_144_p1();
    void thread_tmp_fu_194_p3();
    void thread_tmp_s_fu_236_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
