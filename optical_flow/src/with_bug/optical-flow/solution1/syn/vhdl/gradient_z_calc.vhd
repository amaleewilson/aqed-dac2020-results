-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gradient_z_calc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    frame1_a_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    frame1_a_V_empty_n : IN STD_LOGIC;
    frame1_a_V_read : OUT STD_LOGIC;
    frame2_a_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    frame2_a_V_empty_n : IN STD_LOGIC;
    frame2_a_V_read : OUT STD_LOGIC;
    frame3_b_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    frame3_b_V_empty_n : IN STD_LOGIC;
    frame3_b_V_read : OUT STD_LOGIC;
    frame4_a_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    frame4_a_V_empty_n : IN STD_LOGIC;
    frame4_a_V_read : OUT STD_LOGIC;
    frame5_a_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    frame5_a_V_empty_n : IN STD_LOGIC;
    frame5_a_V_read : OUT STD_LOGIC;
    gradient_z_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    gradient_z_V_full_n : IN STD_LOGIC;
    gradient_z_V_write : OUT STD_LOGIC );
end;


architecture behav of gradient_z_calc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv57_155555556 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000101010101010101010101010101010110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv57_0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal frame1_a_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal frame2_a_V_blk_n : STD_LOGIC;
    signal frame3_b_V_blk_n : STD_LOGIC;
    signal frame4_a_V_blk_n : STD_LOGIC;
    signal frame5_a_V_blk_n : STD_LOGIC;
    signal gradient_z_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_264_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_109 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_flatten_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_264_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_126_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_Val2_3_fu_180_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_3_reg_273 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_27_reg_278 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_278_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_fu_205_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal mul_reg_284 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_29_reg_289 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_shl_fu_132_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_2_cast_fu_144_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_cast_fu_140_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_fu_148_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_1_fu_158_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Val2_1_cast_cast_fu_166_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_cast_fu_154_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_2_fu_170_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal OP1_V_4_cast_fu_176_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_fu_194_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_fu_205_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal neg_mul_fu_221_p2 : STD_LOGIC_VECTOR (56 downto 0);
    signal tmp_28_fu_226_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_s_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_243_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_109 <= indvar_flatten_next_fu_126_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_109 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_264 <= exitcond_flatten_fu_120_p2;
                exitcond_flatten_reg_264_pp0_iter1_reg <= exitcond_flatten_reg_264;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_264_pp0_iter2_reg <= exitcond_flatten_reg_264_pp0_iter1_reg;
                tmp_27_reg_278_pp0_iter2_reg <= tmp_27_reg_278;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_264_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    mul_reg_284(56 downto 11) <= mul_fu_205_p2(56 downto 11);
                tmp_29_reg_289 <= mul_fu_205_p2(56 downto 36);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Val2_3_reg_273 <= p_Val2_3_fu_180_p2;
                tmp_27_reg_278 <= p_Val2_3_fu_180_p2(12 downto 12);
            end if;
        end if;
    end process;
    mul_reg_284(10 downto 0) <= "00000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, exitcond_flatten_fu_120_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_120_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_flatten_fu_120_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    OP1_V_4_cast_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(frame5_a_V_dout),13));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(frame1_a_V_empty_n, frame2_a_V_empty_n, frame3_b_V_empty_n, frame4_a_V_empty_n, frame5_a_V_empty_n, gradient_z_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_264, ap_enable_reg_pp0_iter3, exitcond_flatten_reg_264_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_flatten_reg_264_pp0_iter2_reg = ap_const_lv1_0) and (gradient_z_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame5_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame4_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame3_b_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame2_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame1_a_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(frame1_a_V_empty_n, frame2_a_V_empty_n, frame3_b_V_empty_n, frame4_a_V_empty_n, frame5_a_V_empty_n, gradient_z_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_264, ap_enable_reg_pp0_iter3, exitcond_flatten_reg_264_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_flatten_reg_264_pp0_iter2_reg = ap_const_lv1_0) and (gradient_z_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame5_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame4_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame3_b_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame2_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame1_a_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(frame1_a_V_empty_n, frame2_a_V_empty_n, frame3_b_V_empty_n, frame4_a_V_empty_n, frame5_a_V_empty_n, gradient_z_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_264, ap_enable_reg_pp0_iter3, exitcond_flatten_reg_264_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_flatten_reg_264_pp0_iter2_reg = ap_const_lv1_0) and (gradient_z_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame5_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame4_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame3_b_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame2_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame1_a_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(frame1_a_V_empty_n, frame2_a_V_empty_n, frame3_b_V_empty_n, frame4_a_V_empty_n, frame5_a_V_empty_n, exitcond_flatten_reg_264)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame5_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame4_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame3_b_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame2_a_V_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_264 = ap_const_lv1_0) and (frame1_a_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(gradient_z_V_full_n, exitcond_flatten_reg_264_pp0_iter2_reg)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((exitcond_flatten_reg_264_pp0_iter2_reg = ap_const_lv1_0) and (gradient_z_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_120_p2)
    begin
        if ((exitcond_flatten_fu_120_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_120_p2 <= "1" when (indvar_flatten_reg_109 = ap_const_lv6_32) else "0";

    frame1_a_V_blk_n_assign_proc : process(frame1_a_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_264)
    begin
        if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame1_a_V_blk_n <= frame1_a_V_empty_n;
        else 
            frame1_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame1_a_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_264, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame1_a_V_read <= ap_const_logic_1;
        else 
            frame1_a_V_read <= ap_const_logic_0;
        end if; 
    end process;


    frame2_a_V_blk_n_assign_proc : process(frame2_a_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_264)
    begin
        if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame2_a_V_blk_n <= frame2_a_V_empty_n;
        else 
            frame2_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame2_a_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_264, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame2_a_V_read <= ap_const_logic_1;
        else 
            frame2_a_V_read <= ap_const_logic_0;
        end if; 
    end process;


    frame3_b_V_blk_n_assign_proc : process(frame3_b_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_264)
    begin
        if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame3_b_V_blk_n <= frame3_b_V_empty_n;
        else 
            frame3_b_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame3_b_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_264, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame3_b_V_read <= ap_const_logic_1;
        else 
            frame3_b_V_read <= ap_const_logic_0;
        end if; 
    end process;


    frame4_a_V_blk_n_assign_proc : process(frame4_a_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_264)
    begin
        if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame4_a_V_blk_n <= frame4_a_V_empty_n;
        else 
            frame4_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame4_a_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_264, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame4_a_V_read <= ap_const_logic_1;
        else 
            frame4_a_V_read <= ap_const_logic_0;
        end if; 
    end process;


    frame5_a_V_blk_n_assign_proc : process(frame5_a_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_264)
    begin
        if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame5_a_V_blk_n <= frame5_a_V_empty_n;
        else 
            frame5_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame5_a_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_264, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_264 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame5_a_V_read <= ap_const_logic_1;
        else 
            frame5_a_V_read <= ap_const_logic_0;
        end if; 
    end process;


    gradient_z_V_blk_n_assign_proc : process(gradient_z_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, exitcond_flatten_reg_264_pp0_iter2_reg)
    begin
        if (((exitcond_flatten_reg_264_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            gradient_z_V_blk_n <= gradient_z_V_full_n;
        else 
            gradient_z_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gradient_z_V_din <= 
        neg_ti_fu_250_p2 when (tmp_27_reg_278_pp0_iter2_reg(0) = '1') else 
        tmp_22_fu_240_p1;

    gradient_z_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, exitcond_flatten_reg_264_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_264_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gradient_z_V_write <= ap_const_logic_1;
        else 
            gradient_z_V_write <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_126_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_109) + unsigned(ap_const_lv6_1));
    mul_fu_205_p1 <= tmp_fu_194_p3;
    mul_fu_205_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv57_155555556) * signed(mul_fu_205_p1))), 57));
    neg_mul_fu_221_p2 <= std_logic_vector(unsigned(ap_const_lv57_0) - unsigned(mul_reg_284));
    neg_ti_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_23_fu_243_p3));
    p_Val2_1_cast_cast_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_1_fu_158_p3),13));
    p_Val2_1_fu_158_p3 <= (frame4_a_V_dout & ap_const_lv3_0);
    p_Val2_2_fu_170_p2 <= std_logic_vector(unsigned(p_Val2_1_cast_cast_fu_166_p1) + unsigned(p_Val2_cast_fu_154_p1));
    p_Val2_3_fu_180_p2 <= std_logic_vector(unsigned(p_Val2_2_fu_170_p2) - unsigned(OP1_V_4_cast_fu_176_p1));
        p_Val2_cast_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_148_p2),13));

    p_Val2_s_fu_148_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_144_p1) - unsigned(p_shl_cast_cast_fu_140_p1));
    p_shl_cast_cast_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_132_p3),12));
    p_shl_fu_132_p3 <= (frame2_a_V_dout & ap_const_lv3_0);
        tmp_22_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_reg_289),32));

    tmp_23_fu_243_p3 <= 
        tmp_s_fu_236_p1 when (tmp_27_reg_278_pp0_iter2_reg(0) = '1') else 
        tmp_22_fu_240_p1;
    tmp_28_fu_226_p4 <= neg_mul_fu_221_p2(56 downto 36);
    tmp_2_cast_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(frame1_a_V_dout),12));
    tmp_fu_194_p3 <= (p_Val2_3_reg_273 & ap_const_lv11_0);
        tmp_s_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_226_p4),32));

end behav;
