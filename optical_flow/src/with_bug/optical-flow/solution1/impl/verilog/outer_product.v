// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module outer_product (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        filtered_gradient_x_s_dout,
        filtered_gradient_x_s_empty_n,
        filtered_gradient_x_s_read,
        filtered_gradient_y_s_dout,
        filtered_gradient_y_s_empty_n,
        filtered_gradient_y_s_read,
        filtered_gradient_z_s_dout,
        filtered_gradient_z_s_empty_n,
        filtered_gradient_z_s_read,
        out_product_val_V_din,
        out_product_val_V_full_n,
        out_product_val_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] filtered_gradient_x_s_dout;
input   filtered_gradient_x_s_empty_n;
output   filtered_gradient_x_s_read;
input  [31:0] filtered_gradient_y_s_dout;
input   filtered_gradient_y_s_empty_n;
output   filtered_gradient_y_s_read;
input  [31:0] filtered_gradient_z_s_dout;
input   filtered_gradient_z_s_empty_n;
output   filtered_gradient_z_s_read;
output  [190:0] out_product_val_V_din;
input   out_product_val_V_full_n;
output   out_product_val_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg filtered_gradient_x_s_read;
reg filtered_gradient_y_s_read;
reg filtered_gradient_z_s_read;
reg out_product_val_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    filtered_gradient_x_s_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_277;
reg    filtered_gradient_y_s_blk_n;
reg    filtered_gradient_z_s_blk_n;
reg    out_product_val_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond_flatten_reg_277_pp0_iter1_reg;
reg   [5:0] indvar_flatten_reg_85;
wire   [0:0] exitcond_flatten_fu_96_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] indvar_flatten_next_fu_102_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [30:0] tmp_1_reg_286;
reg   [30:0] tmp_4_reg_291;
reg   [30:0] tmp_7_reg_296;
reg   [30:0] tmp_s_reg_301;
reg   [30:0] tmp_6_reg_306;
reg   [30:0] tmp_10_reg_311;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage0_01001;
wire   [17:0] tmp_38_i_fu_108_p4;
wire  signed [35:0] p_Val2_3_fu_235_p2;
wire   [17:0] tmp_40_i_fu_118_p4;
wire  signed [35:0] p_Val2_4_fu_242_p2;
wire   [17:0] tmp_42_i_fu_128_p4;
wire  signed [35:0] p_Val2_5_fu_249_p2;
wire  signed [35:0] p_Val2_6_fu_256_p2;
wire  signed [35:0] p_Val2_7_fu_263_p2;
wire  signed [35:0] p_Val2_8_fu_270_p2;
wire  signed [31:0] tmp_9_fu_216_p1;
wire  signed [31:0] tmp_3_fu_213_p1;
wire  signed [31:0] tmp_8_fu_210_p1;
wire  signed [31:0] tmp_5_fu_207_p1;
wire  signed [31:0] tmp_2_fu_204_p1;
wire  signed [17:0] p_Val2_3_fu_235_p0;
wire  signed [35:0] OP1_V_cast_i_fu_138_p1;
wire  signed [17:0] p_Val2_3_fu_235_p1;
wire  signed [17:0] p_Val2_4_fu_242_p0;
wire  signed [35:0] OP1_V_1_cast_i_fu_151_p1;
wire  signed [17:0] p_Val2_4_fu_242_p1;
wire  signed [17:0] p_Val2_5_fu_249_p0;
wire  signed [35:0] OP1_V_2_cast_i_fu_164_p1;
wire  signed [17:0] p_Val2_5_fu_249_p1;
wire  signed [17:0] p_Val2_6_fu_256_p0;
wire  signed [17:0] p_Val2_6_fu_256_p1;
wire  signed [17:0] p_Val2_7_fu_263_p0;
wire  signed [17:0] p_Val2_7_fu_263_p1;
wire  signed [17:0] p_Val2_8_fu_270_p0;
wire  signed [17:0] p_Val2_8_fu_270_p1;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

optical_flow_mul_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
optical_flow_mul_yd2_U39(
    .din0(p_Val2_3_fu_235_p0),
    .din1(p_Val2_3_fu_235_p1),
    .dout(p_Val2_3_fu_235_p2)
);

optical_flow_mul_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
optical_flow_mul_yd2_U40(
    .din0(p_Val2_4_fu_242_p0),
    .din1(p_Val2_4_fu_242_p1),
    .dout(p_Val2_4_fu_242_p2)
);

optical_flow_mul_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
optical_flow_mul_yd2_U41(
    .din0(p_Val2_5_fu_249_p0),
    .din1(p_Val2_5_fu_249_p1),
    .dout(p_Val2_5_fu_249_p2)
);

optical_flow_mul_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
optical_flow_mul_yd2_U42(
    .din0(p_Val2_6_fu_256_p0),
    .din1(p_Val2_6_fu_256_p1),
    .dout(p_Val2_6_fu_256_p2)
);

optical_flow_mul_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
optical_flow_mul_yd2_U43(
    .din0(p_Val2_7_fu_263_p0),
    .din1(p_Val2_7_fu_263_p1),
    .dout(p_Val2_7_fu_263_p2)
);

optical_flow_mul_yd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
optical_flow_mul_yd2_U44(
    .din0(p_Val2_8_fu_270_p0),
    .din1(p_Val2_8_fu_270_p1),
    .dout(p_Val2_8_fu_270_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_96_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_85 <= indvar_flatten_next_fu_102_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_85 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_277 <= exitcond_flatten_fu_96_p2;
        exitcond_flatten_reg_277_pp0_iter1_reg <= exitcond_flatten_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_277 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_10_reg_311 <= {{p_Val2_8_fu_270_p2[35:5]}};
        tmp_1_reg_286 <= {{p_Val2_3_fu_235_p2[35:5]}};
        tmp_4_reg_291 <= {{p_Val2_4_fu_242_p2[35:5]}};
        tmp_6_reg_306 <= {{p_Val2_7_fu_263_p2[35:5]}};
        tmp_7_reg_296 <= {{p_Val2_5_fu_249_p2[35:5]}};
        tmp_s_reg_301 <= {{p_Val2_6_fu_256_p2[35:5]}};
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_96_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_277 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_x_s_blk_n = filtered_gradient_x_s_empty_n;
    end else begin
        filtered_gradient_x_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_277 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        filtered_gradient_x_s_read = 1'b1;
    end else begin
        filtered_gradient_x_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_277 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_y_s_blk_n = filtered_gradient_y_s_empty_n;
    end else begin
        filtered_gradient_y_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_277 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        filtered_gradient_y_s_read = 1'b1;
    end else begin
        filtered_gradient_y_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_277 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_z_s_blk_n = filtered_gradient_z_s_empty_n;
    end else begin
        filtered_gradient_z_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_277 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        filtered_gradient_z_s_read = 1'b1;
    end else begin
        filtered_gradient_z_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_277_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out_product_val_V_blk_n = out_product_val_V_full_n;
    end else begin
        out_product_val_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_277_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_product_val_V_write = 1'b1;
    end else begin
        out_product_val_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_96_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten_fu_96_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_cast_i_fu_151_p1 = $signed(tmp_40_i_fu_118_p4);

assign OP1_V_2_cast_i_fu_164_p1 = $signed(tmp_42_i_fu_128_p4);

assign OP1_V_cast_i_fu_138_p1 = $signed(tmp_38_i_fu_108_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_flatten_reg_277_pp0_iter1_reg == 1'd0) & (out_product_val_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_z_s_empty_n == 1'b0)) | ((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_y_s_empty_n == 1'b0)) | ((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_x_s_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_flatten_reg_277_pp0_iter1_reg == 1'd0) & (out_product_val_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_z_s_empty_n == 1'b0)) | ((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_y_s_empty_n == 1'b0)) | ((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_x_s_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_flatten_reg_277_pp0_iter1_reg == 1'd0) & (out_product_val_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_z_s_empty_n == 1'b0)) | ((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_y_s_empty_n == 1'b0)) | ((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_x_s_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_z_s_empty_n == 1'b0)) | ((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_y_s_empty_n == 1'b0)) | ((exitcond_flatten_reg_277 == 1'd0) & (filtered_gradient_x_s_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((exitcond_flatten_reg_277_pp0_iter1_reg == 1'd0) & (out_product_val_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_96_p2 = ((indvar_flatten_reg_85 == 6'd50) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_102_p2 = (indvar_flatten_reg_85 + 6'd1);

assign out_product_val_V_din = {{{{{{tmp_10_reg_311}, {tmp_9_fu_216_p1}}, {tmp_3_fu_213_p1}}, {tmp_8_fu_210_p1}}, {tmp_5_fu_207_p1}}, {tmp_2_fu_204_p1}};

assign p_Val2_3_fu_235_p0 = OP1_V_cast_i_fu_138_p1;

assign p_Val2_3_fu_235_p1 = OP1_V_cast_i_fu_138_p1;

assign p_Val2_4_fu_242_p0 = OP1_V_1_cast_i_fu_151_p1;

assign p_Val2_4_fu_242_p1 = OP1_V_1_cast_i_fu_151_p1;

assign p_Val2_5_fu_249_p0 = OP1_V_2_cast_i_fu_164_p1;

assign p_Val2_5_fu_249_p1 = OP1_V_2_cast_i_fu_164_p1;

assign p_Val2_6_fu_256_p0 = OP1_V_cast_i_fu_138_p1;

assign p_Val2_6_fu_256_p1 = OP1_V_1_cast_i_fu_151_p1;

assign p_Val2_7_fu_263_p0 = OP1_V_cast_i_fu_138_p1;

assign p_Val2_7_fu_263_p1 = OP1_V_2_cast_i_fu_164_p1;

assign p_Val2_8_fu_270_p0 = OP1_V_1_cast_i_fu_151_p1;

assign p_Val2_8_fu_270_p1 = OP1_V_2_cast_i_fu_164_p1;

assign start_out = real_start;

assign tmp_2_fu_204_p1 = $signed(tmp_1_reg_286);

assign tmp_38_i_fu_108_p4 = {{filtered_gradient_x_s_dout[31:14]}};

assign tmp_3_fu_213_p1 = $signed(tmp_s_reg_301);

assign tmp_40_i_fu_118_p4 = {{filtered_gradient_y_s_dout[31:14]}};

assign tmp_42_i_fu_128_p4 = {{filtered_gradient_z_s_dout[31:14]}};

assign tmp_5_fu_207_p1 = $signed(tmp_4_reg_291);

assign tmp_8_fu_210_p1 = $signed(tmp_7_reg_296);

assign tmp_9_fu_216_p1 = $signed(tmp_6_reg_306);

endmodule //outer_product
