-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gradient_weight_y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    gradient_x_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gradient_x_V_empty_n : IN STD_LOGIC;
    gradient_x_V_read : OUT STD_LOGIC;
    gradient_y_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gradient_y_V_empty_n : IN STD_LOGIC;
    gradient_y_V_read : OUT STD_LOGIC;
    gradient_z_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    gradient_z_V_empty_n : IN STD_LOGIC;
    gradient_z_V_read : OUT STD_LOGIC;
    y_filtered_x_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_filtered_x_V_full_n : IN STD_LOGIC;
    y_filtered_x_V_write : OUT STD_LOGIC;
    y_filtered_y_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_filtered_y_V_full_n : IN STD_LOGIC;
    y_filtered_y_V_write : OUT STD_LOGIC;
    y_filtered_z_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_filtered_z_V_full_n : IN STD_LOGIC;
    y_filtered_z_V_write : OUT STD_LOGIC );
end;


architecture behav of gradient_weight_y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal gradient_x_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_mid2_reg_659 : STD_LOGIC_VECTOR (0 downto 0);
    signal gradient_y_V_blk_n : STD_LOGIC;
    signal gradient_z_V_blk_n : STD_LOGIC;
    signal y_filtered_x_V_blk_n : STD_LOGIC;
    signal tmp_47_i_mid2_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_filtered_y_V_blk_n : STD_LOGIC;
    signal y_filtered_z_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_473 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_i_reg_484 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_assign_reg_495 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_flatten_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op119_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_551_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_i_mid2_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_i_mid2_fu_609_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_i_mid2_fu_617_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_50_i_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_i_reg_672 : STD_LOGIC_VECTOR (63 downto 0);
    signal buf_val_2_x_V_addr_reg_679 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_2_y_V_addr_reg_685 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_2_z_V_addr_reg_691 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_3_x_V_addr_reg_697 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_3_y_V_addr_reg_703 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_3_z_V_addr_reg_709 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_4_x_V_addr_reg_715 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_4_y_V_addr_reg_721 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_4_z_V_addr_reg_727 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_5_x_V_addr_reg_733 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_5_y_V_addr_reg_739 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_5_z_V_addr_reg_745 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_6_x_V_addr_reg_751 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_6_y_V_addr_reg_757 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_6_z_V_addr_reg_763 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_644_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal buf_val_1_x_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_1_x_V_ce0 : STD_LOGIC;
    signal buf_val_1_x_V_we0 : STD_LOGIC;
    signal buf_val_2_x_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_2_x_V_ce0 : STD_LOGIC;
    signal buf_val_2_x_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_2_x_V_ce1 : STD_LOGIC;
    signal buf_val_2_x_V_we1 : STD_LOGIC;
    signal buf_val_3_x_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_3_x_V_ce0 : STD_LOGIC;
    signal buf_val_3_x_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_3_x_V_ce1 : STD_LOGIC;
    signal buf_val_3_x_V_we1 : STD_LOGIC;
    signal buf_val_4_x_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_4_x_V_ce0 : STD_LOGIC;
    signal buf_val_4_x_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_4_x_V_ce1 : STD_LOGIC;
    signal buf_val_4_x_V_we1 : STD_LOGIC;
    signal buf_val_5_x_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_5_x_V_ce0 : STD_LOGIC;
    signal buf_val_5_x_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_5_x_V_ce1 : STD_LOGIC;
    signal buf_val_5_x_V_we1 : STD_LOGIC;
    signal buf_val_6_x_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_6_x_V_ce0 : STD_LOGIC;
    signal buf_val_6_x_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_6_x_V_ce1 : STD_LOGIC;
    signal buf_val_6_x_V_we1 : STD_LOGIC;
    signal buf_val_1_y_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_1_y_V_ce0 : STD_LOGIC;
    signal buf_val_1_y_V_we0 : STD_LOGIC;
    signal buf_val_2_y_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_2_y_V_ce0 : STD_LOGIC;
    signal buf_val_2_y_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_2_y_V_ce1 : STD_LOGIC;
    signal buf_val_2_y_V_we1 : STD_LOGIC;
    signal buf_val_3_y_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_3_y_V_ce0 : STD_LOGIC;
    signal buf_val_3_y_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_3_y_V_ce1 : STD_LOGIC;
    signal buf_val_3_y_V_we1 : STD_LOGIC;
    signal buf_val_4_y_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_4_y_V_ce0 : STD_LOGIC;
    signal buf_val_4_y_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_4_y_V_ce1 : STD_LOGIC;
    signal buf_val_4_y_V_we1 : STD_LOGIC;
    signal buf_val_5_y_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_5_y_V_ce0 : STD_LOGIC;
    signal buf_val_5_y_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_5_y_V_ce1 : STD_LOGIC;
    signal buf_val_5_y_V_we1 : STD_LOGIC;
    signal buf_val_6_y_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_6_y_V_ce0 : STD_LOGIC;
    signal buf_val_6_y_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_6_y_V_ce1 : STD_LOGIC;
    signal buf_val_6_y_V_we1 : STD_LOGIC;
    signal buf_val_1_z_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_1_z_V_ce0 : STD_LOGIC;
    signal buf_val_1_z_V_we0 : STD_LOGIC;
    signal buf_val_2_z_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_2_z_V_ce0 : STD_LOGIC;
    signal buf_val_2_z_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_2_z_V_ce1 : STD_LOGIC;
    signal buf_val_2_z_V_we1 : STD_LOGIC;
    signal buf_val_3_z_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_3_z_V_ce0 : STD_LOGIC;
    signal buf_val_3_z_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_3_z_V_ce1 : STD_LOGIC;
    signal buf_val_3_z_V_we1 : STD_LOGIC;
    signal buf_val_4_z_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_4_z_V_ce0 : STD_LOGIC;
    signal buf_val_4_z_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_4_z_V_ce1 : STD_LOGIC;
    signal buf_val_4_z_V_we1 : STD_LOGIC;
    signal buf_val_5_z_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_5_z_V_ce0 : STD_LOGIC;
    signal buf_val_5_z_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_5_z_V_ce1 : STD_LOGIC;
    signal buf_val_5_z_V_we1 : STD_LOGIC;
    signal buf_val_6_z_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal buf_val_6_z_V_ce0 : STD_LOGIC;
    signal buf_val_6_z_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_6_z_V_ce1 : STD_LOGIC;
    signal buf_val_6_z_V_we1 : STD_LOGIC;
    signal ap_phi_mux_storemerge3_phi_fu_510_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge3_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge3_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge2_phi_fu_523_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge2_reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge2_reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_536_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal exitcond1_i_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r6_fu_571_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_mid1_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i8_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_i_mid1_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_i7_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_mid2_fu_563_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_137 : BOOLEAN;

    component gradient_weight_yg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gradient_weight_yhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    buf_val_1_x_V_U : component gradient_weight_yg8j
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_1_x_V_address0,
        ce0 => buf_val_1_x_V_ce0,
        we0 => buf_val_1_x_V_we0,
        d0 => buf_val_2_x_V_q0);

    buf_val_2_x_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_2_x_V_address0,
        ce0 => buf_val_2_x_V_ce0,
        q0 => buf_val_2_x_V_q0,
        address1 => buf_val_2_x_V_addr_reg_679,
        ce1 => buf_val_2_x_V_ce1,
        we1 => buf_val_2_x_V_we1,
        d1 => buf_val_3_x_V_q0);

    buf_val_3_x_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_3_x_V_address0,
        ce0 => buf_val_3_x_V_ce0,
        q0 => buf_val_3_x_V_q0,
        address1 => buf_val_3_x_V_addr_reg_697,
        ce1 => buf_val_3_x_V_ce1,
        we1 => buf_val_3_x_V_we1,
        d1 => buf_val_4_x_V_q0);

    buf_val_4_x_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_4_x_V_address0,
        ce0 => buf_val_4_x_V_ce0,
        q0 => buf_val_4_x_V_q0,
        address1 => buf_val_4_x_V_addr_reg_715,
        ce1 => buf_val_4_x_V_ce1,
        we1 => buf_val_4_x_V_we1,
        d1 => buf_val_5_x_V_q0);

    buf_val_5_x_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_5_x_V_address0,
        ce0 => buf_val_5_x_V_ce0,
        q0 => buf_val_5_x_V_q0,
        address1 => buf_val_5_x_V_addr_reg_733,
        ce1 => buf_val_5_x_V_ce1,
        we1 => buf_val_5_x_V_we1,
        d1 => buf_val_6_x_V_q0);

    buf_val_6_x_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_6_x_V_address0,
        ce0 => buf_val_6_x_V_ce0,
        q0 => buf_val_6_x_V_q0,
        address1 => buf_val_6_x_V_addr_reg_751,
        ce1 => buf_val_6_x_V_ce1,
        we1 => buf_val_6_x_V_we1,
        d1 => ap_phi_mux_storemerge3_phi_fu_510_p4);

    buf_val_1_y_V_U : component gradient_weight_yg8j
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_1_y_V_address0,
        ce0 => buf_val_1_y_V_ce0,
        we0 => buf_val_1_y_V_we0,
        d0 => buf_val_2_y_V_q0);

    buf_val_2_y_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_2_y_V_address0,
        ce0 => buf_val_2_y_V_ce0,
        q0 => buf_val_2_y_V_q0,
        address1 => buf_val_2_y_V_addr_reg_685,
        ce1 => buf_val_2_y_V_ce1,
        we1 => buf_val_2_y_V_we1,
        d1 => buf_val_3_y_V_q0);

    buf_val_3_y_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_3_y_V_address0,
        ce0 => buf_val_3_y_V_ce0,
        q0 => buf_val_3_y_V_q0,
        address1 => buf_val_3_y_V_addr_reg_703,
        ce1 => buf_val_3_y_V_ce1,
        we1 => buf_val_3_y_V_we1,
        d1 => buf_val_4_y_V_q0);

    buf_val_4_y_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_4_y_V_address0,
        ce0 => buf_val_4_y_V_ce0,
        q0 => buf_val_4_y_V_q0,
        address1 => buf_val_4_y_V_addr_reg_721,
        ce1 => buf_val_4_y_V_ce1,
        we1 => buf_val_4_y_V_we1,
        d1 => buf_val_5_y_V_q0);

    buf_val_5_y_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_5_y_V_address0,
        ce0 => buf_val_5_y_V_ce0,
        q0 => buf_val_5_y_V_q0,
        address1 => buf_val_5_y_V_addr_reg_739,
        ce1 => buf_val_5_y_V_ce1,
        we1 => buf_val_5_y_V_we1,
        d1 => buf_val_6_y_V_q0);

    buf_val_6_y_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_6_y_V_address0,
        ce0 => buf_val_6_y_V_ce0,
        q0 => buf_val_6_y_V_q0,
        address1 => buf_val_6_y_V_addr_reg_757,
        ce1 => buf_val_6_y_V_ce1,
        we1 => buf_val_6_y_V_we1,
        d1 => ap_phi_mux_storemerge2_phi_fu_523_p4);

    buf_val_1_z_V_U : component gradient_weight_yg8j
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_1_z_V_address0,
        ce0 => buf_val_1_z_V_ce0,
        we0 => buf_val_1_z_V_we0,
        d0 => buf_val_2_z_V_q0);

    buf_val_2_z_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_2_z_V_address0,
        ce0 => buf_val_2_z_V_ce0,
        q0 => buf_val_2_z_V_q0,
        address1 => buf_val_2_z_V_addr_reg_691,
        ce1 => buf_val_2_z_V_ce1,
        we1 => buf_val_2_z_V_we1,
        d1 => buf_val_3_z_V_q0);

    buf_val_3_z_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_3_z_V_address0,
        ce0 => buf_val_3_z_V_ce0,
        q0 => buf_val_3_z_V_q0,
        address1 => buf_val_3_z_V_addr_reg_709,
        ce1 => buf_val_3_z_V_ce1,
        we1 => buf_val_3_z_V_we1,
        d1 => buf_val_4_z_V_q0);

    buf_val_4_z_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_4_z_V_address0,
        ce0 => buf_val_4_z_V_ce0,
        q0 => buf_val_4_z_V_q0,
        address1 => buf_val_4_z_V_addr_reg_727,
        ce1 => buf_val_4_z_V_ce1,
        we1 => buf_val_4_z_V_we1,
        d1 => buf_val_5_z_V_q0);

    buf_val_5_z_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_5_z_V_address0,
        ce0 => buf_val_5_z_V_ce0,
        q0 => buf_val_5_z_V_q0,
        address1 => buf_val_5_z_V_addr_reg_745,
        ce1 => buf_val_5_z_V_ce1,
        we1 => buf_val_5_z_V_we1,
        d1 => buf_val_6_z_V_q0);

    buf_val_6_z_V_U : component gradient_weight_yhbi
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_6_z_V_address0,
        ce0 => buf_val_6_z_V_ce0,
        q0 => buf_val_6_z_V_q0,
        address1 => buf_val_6_z_V_addr_reg_763,
        ce1 => buf_val_6_z_V_ce1,
        we1 => buf_val_6_z_V_we1,
        d1 => ap_phi_mux_storemerge_phi_fu_536_p4);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge2_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_137)) then
                if (((tmp_i_mid2_fu_589_p3 = ap_const_lv1_0) and (exitcond_flatten_fu_545_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_storemerge2_reg_519 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge2_reg_519 <= ap_phi_reg_pp0_iter0_storemerge2_reg_519;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_storemerge3_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_137)) then
                if (((tmp_i_mid2_fu_589_p3 = ap_const_lv1_0) and (exitcond_flatten_fu_545_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_storemerge3_reg_506 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge3_reg_506 <= ap_phi_reg_pp0_iter0_storemerge3_reg_506;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_storemerge_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_137)) then
                if (((tmp_i_mid2_fu_589_p3 = ap_const_lv1_0) and (exitcond_flatten_fu_545_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_storemerge_reg_532 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge_reg_532 <= ap_phi_reg_pp0_iter0_storemerge_reg_532;
                end if;
            end if; 
        end if;
    end process;

    col_assign_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_assign_reg_495 <= c_fu_644_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_assign_reg_495 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_473_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_473 <= indvar_flatten_next_fu_551_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_473 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_i_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                r_i_reg_484 <= r_i_mid2_fu_617_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_i_reg_484 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_545_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buf_val_2_x_V_addr_reg_679 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_2_y_V_addr_reg_685 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_2_z_V_addr_reg_691 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_3_x_V_addr_reg_697 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_3_y_V_addr_reg_703 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_3_z_V_addr_reg_709 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_4_x_V_addr_reg_715 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_4_y_V_addr_reg_721 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_4_z_V_addr_reg_727 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_5_x_V_addr_reg_733 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_5_y_V_addr_reg_739 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_5_z_V_addr_reg_745 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_6_x_V_addr_reg_751 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_6_y_V_addr_reg_757 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                buf_val_6_z_V_addr_reg_763 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);
                tmp_47_i_mid2_reg_663 <= tmp_47_i_mid2_fu_609_p3;
                    tmp_50_i_reg_672(3 downto 0) <= tmp_50_i_fu_625_p1(3 downto 0);
                tmp_i_mid2_reg_659 <= tmp_i_mid2_fu_589_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_650 <= exitcond_flatten_fu_545_p2;
            end if;
        end if;
    end process;
    tmp_50_i_reg_672(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_545_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond_flatten_fu_545_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond_flatten_fu_545_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(gradient_x_V_empty_n, gradient_y_V_empty_n, gradient_z_V_empty_n, y_filtered_x_V_full_n, y_filtered_y_V_full_n, y_filtered_z_V_full_n, ap_enable_reg_pp0_iter1, tmp_47_i_mid2_reg_663, ap_predicate_op119_read_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_z_V_full_n = ap_const_logic_0)) or ((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_y_V_full_n = ap_const_logic_0)) or ((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_x_V_full_n = ap_const_logic_0)) or ((gradient_z_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1)) or ((gradient_y_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1)) or ((gradient_x_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(gradient_x_V_empty_n, gradient_y_V_empty_n, gradient_z_V_empty_n, y_filtered_x_V_full_n, y_filtered_y_V_full_n, y_filtered_z_V_full_n, ap_enable_reg_pp0_iter1, tmp_47_i_mid2_reg_663, ap_predicate_op119_read_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_z_V_full_n = ap_const_logic_0)) or ((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_y_V_full_n = ap_const_logic_0)) or ((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_x_V_full_n = ap_const_logic_0)) or ((gradient_z_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1)) or ((gradient_y_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1)) or ((gradient_x_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(gradient_x_V_empty_n, gradient_y_V_empty_n, gradient_z_V_empty_n, y_filtered_x_V_full_n, y_filtered_y_V_full_n, y_filtered_z_V_full_n, ap_enable_reg_pp0_iter1, tmp_47_i_mid2_reg_663, ap_predicate_op119_read_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_z_V_full_n = ap_const_logic_0)) or ((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_y_V_full_n = ap_const_logic_0)) or ((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_x_V_full_n = ap_const_logic_0)) or ((gradient_z_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1)) or ((gradient_y_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1)) or ((gradient_x_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(gradient_x_V_empty_n, gradient_y_V_empty_n, gradient_z_V_empty_n, y_filtered_x_V_full_n, y_filtered_y_V_full_n, y_filtered_z_V_full_n, tmp_47_i_mid2_reg_663, ap_predicate_op119_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_z_V_full_n = ap_const_logic_0)) or ((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_y_V_full_n = ap_const_logic_0)) or ((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (y_filtered_x_V_full_n = ap_const_logic_0)) or ((gradient_z_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1)) or ((gradient_y_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1)) or ((gradient_x_V_empty_n = ap_const_logic_0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1)));
    end process;


    ap_condition_137_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_137 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_545_p2)
    begin
        if ((exitcond_flatten_fu_545_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge2_phi_fu_523_p4_assign_proc : process(gradient_y_V_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_650, tmp_i_mid2_reg_659, ap_phi_reg_pp0_iter1_storemerge2_reg_519)
    begin
        if (((tmp_i_mid2_reg_659 = ap_const_lv1_1) and (exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_storemerge2_phi_fu_523_p4 <= gradient_y_V_dout;
        else 
            ap_phi_mux_storemerge2_phi_fu_523_p4 <= ap_phi_reg_pp0_iter1_storemerge2_reg_519;
        end if; 
    end process;


    ap_phi_mux_storemerge3_phi_fu_510_p4_assign_proc : process(gradient_x_V_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_650, tmp_i_mid2_reg_659, ap_phi_reg_pp0_iter1_storemerge3_reg_506)
    begin
        if (((tmp_i_mid2_reg_659 = ap_const_lv1_1) and (exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_storemerge3_phi_fu_510_p4 <= gradient_x_V_dout;
        else 
            ap_phi_mux_storemerge3_phi_fu_510_p4 <= ap_phi_reg_pp0_iter1_storemerge3_reg_506;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_536_p4_assign_proc : process(gradient_z_V_dout, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_650, tmp_i_mid2_reg_659, ap_phi_reg_pp0_iter1_storemerge_reg_532)
    begin
        if (((tmp_i_mid2_reg_659 = ap_const_lv1_1) and (exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_storemerge_phi_fu_536_p4 <= gradient_z_V_dout;
        else 
            ap_phi_mux_storemerge_phi_fu_536_p4 <= ap_phi_reg_pp0_iter1_storemerge_reg_532;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge2_reg_519 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_storemerge3_reg_506 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_storemerge_reg_532 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op119_read_state3_assign_proc : process(exitcond_flatten_reg_650, tmp_i_mid2_reg_659)
    begin
                ap_predicate_op119_read_state3 <= ((tmp_i_mid2_reg_659 = ap_const_lv1_1) and (exitcond_flatten_reg_650 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    buf_val_1_x_V_address0 <= tmp_50_i_reg_672(4 - 1 downto 0);

    buf_val_1_x_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_1_x_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_1_x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_1_x_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_1_x_V_we0 <= ap_const_logic_1;
        else 
            buf_val_1_x_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_1_y_V_address0 <= tmp_50_i_reg_672(4 - 1 downto 0);

    buf_val_1_y_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_1_y_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_1_y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_1_y_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_1_y_V_we0 <= ap_const_logic_1;
        else 
            buf_val_1_y_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_1_z_V_address0 <= tmp_50_i_reg_672(4 - 1 downto 0);

    buf_val_1_z_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_1_z_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_1_z_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_1_z_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_1_z_V_we0 <= ap_const_logic_1;
        else 
            buf_val_1_z_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_2_x_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_2_x_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_x_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_2_x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_2_x_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_x_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_2_x_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_2_x_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_x_V_we1 <= ap_const_logic_1;
        else 
            buf_val_2_x_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_2_y_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_2_y_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_y_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_2_y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_2_y_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_y_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_2_y_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_2_y_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_y_V_we1 <= ap_const_logic_1;
        else 
            buf_val_2_y_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_2_z_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_2_z_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_z_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_2_z_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_2_z_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_z_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_2_z_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_2_z_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_z_V_we1 <= ap_const_logic_1;
        else 
            buf_val_2_z_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_3_x_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_3_x_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_3_x_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_3_x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_3_x_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_3_x_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_3_x_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_3_x_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_3_x_V_we1 <= ap_const_logic_1;
        else 
            buf_val_3_x_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_3_y_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_3_y_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_3_y_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_3_y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_3_y_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_3_y_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_3_y_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_3_y_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_3_y_V_we1 <= ap_const_logic_1;
        else 
            buf_val_3_y_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_3_z_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_3_z_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_3_z_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_3_z_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_3_z_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_3_z_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_3_z_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_3_z_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_3_z_V_we1 <= ap_const_logic_1;
        else 
            buf_val_3_z_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_4_x_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_4_x_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_4_x_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_4_x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_4_x_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_4_x_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_4_x_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_4_x_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_4_x_V_we1 <= ap_const_logic_1;
        else 
            buf_val_4_x_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_4_y_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_4_y_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_4_y_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_4_y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_4_y_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_4_y_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_4_y_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_4_y_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_4_y_V_we1 <= ap_const_logic_1;
        else 
            buf_val_4_y_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_4_z_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_4_z_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_4_z_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_4_z_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_4_z_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_4_z_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_4_z_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_4_z_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_4_z_V_we1 <= ap_const_logic_1;
        else 
            buf_val_4_z_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_5_x_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_5_x_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_5_x_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_5_x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_5_x_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_5_x_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_5_x_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_5_x_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_5_x_V_we1 <= ap_const_logic_1;
        else 
            buf_val_5_x_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_5_y_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_5_y_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_5_y_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_5_y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_5_y_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_5_y_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_5_y_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_5_y_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_5_y_V_we1 <= ap_const_logic_1;
        else 
            buf_val_5_y_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_5_z_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_5_z_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_5_z_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_5_z_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_5_z_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_5_z_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_5_z_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_5_z_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_5_z_V_we1 <= ap_const_logic_1;
        else 
            buf_val_5_z_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_6_x_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_6_x_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_6_x_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_6_x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_6_x_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_6_x_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_6_x_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_6_x_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_6_x_V_we1 <= ap_const_logic_1;
        else 
            buf_val_6_x_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_6_y_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_6_y_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_6_y_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_6_y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_6_y_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_6_y_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_6_y_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_6_y_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_6_y_V_we1 <= ap_const_logic_1;
        else 
            buf_val_6_y_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    buf_val_6_z_V_address0 <= tmp_50_i_fu_625_p1(4 - 1 downto 0);

    buf_val_6_z_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_6_z_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_6_z_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_6_z_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_6_z_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_6_z_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_6_z_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_6_z_V_we1 <= ap_const_logic_1;
        else 
            buf_val_6_z_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_644_p2 <= std_logic_vector(unsigned(col_assign_mid2_fu_563_p3) + unsigned(ap_const_lv4_1));
    col_assign_mid2_fu_563_p3 <= 
        ap_const_lv4_0 when (exitcond1_i_fu_557_p2(0) = '1') else 
        col_assign_reg_495;
    exitcond1_i_fu_557_p2 <= "1" when (col_assign_reg_495 = ap_const_lv4_A) else "0";
    exitcond_flatten_fu_545_p2 <= "1" when (indvar_flatten_reg_473 = ap_const_lv7_50) else "0";

    gradient_x_V_blk_n_assign_proc : process(gradient_x_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_650, tmp_i_mid2_reg_659)
    begin
        if (((tmp_i_mid2_reg_659 = ap_const_lv1_1) and (exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gradient_x_V_blk_n <= gradient_x_V_empty_n;
        else 
            gradient_x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gradient_x_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op119_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gradient_x_V_read <= ap_const_logic_1;
        else 
            gradient_x_V_read <= ap_const_logic_0;
        end if; 
    end process;


    gradient_y_V_blk_n_assign_proc : process(gradient_y_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_650, tmp_i_mid2_reg_659)
    begin
        if (((tmp_i_mid2_reg_659 = ap_const_lv1_1) and (exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gradient_y_V_blk_n <= gradient_y_V_empty_n;
        else 
            gradient_y_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gradient_y_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op119_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gradient_y_V_read <= ap_const_logic_1;
        else 
            gradient_y_V_read <= ap_const_logic_0;
        end if; 
    end process;


    gradient_z_V_blk_n_assign_proc : process(gradient_z_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_650, tmp_i_mid2_reg_659)
    begin
        if (((tmp_i_mid2_reg_659 = ap_const_lv1_1) and (exitcond_flatten_reg_650 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gradient_z_V_blk_n <= gradient_z_V_empty_n;
        else 
            gradient_z_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gradient_z_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op119_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op119_read_state3 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gradient_z_V_read <= ap_const_logic_1;
        else 
            gradient_z_V_read <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_551_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_473) + unsigned(ap_const_lv7_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    r6_fu_571_p2 <= std_logic_vector(unsigned(r_i_reg_484) + unsigned(ap_const_lv4_1));
    r_i_mid2_fu_617_p3 <= 
        r6_fu_571_p2 when (exitcond1_i_fu_557_p2(0) = '1') else 
        r_i_reg_484;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_47_i7_fu_603_p2 <= "1" when (unsigned(r_i_reg_484) > unsigned(ap_const_lv4_2)) else "0";
    tmp_47_i_mid1_fu_597_p2 <= "1" when (unsigned(r6_fu_571_p2) > unsigned(ap_const_lv4_2)) else "0";
    tmp_47_i_mid2_fu_609_p3 <= 
        tmp_47_i_mid1_fu_597_p2 when (exitcond1_i_fu_557_p2(0) = '1') else 
        tmp_47_i7_fu_603_p2;
    tmp_50_i_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_mid2_fu_563_p3),64));
    tmp_i8_fu_583_p2 <= "1" when (unsigned(r_i_reg_484) < unsigned(ap_const_lv4_5)) else "0";
    tmp_i_mid1_fu_577_p2 <= "1" when (unsigned(r6_fu_571_p2) < unsigned(ap_const_lv4_5)) else "0";
    tmp_i_mid2_fu_589_p3 <= 
        tmp_i_mid1_fu_577_p2 when (exitcond1_i_fu_557_p2(0) = '1') else 
        tmp_i8_fu_583_p2;

    y_filtered_x_V_blk_n_assign_proc : process(y_filtered_x_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_47_i_mid2_reg_663)
    begin
        if (((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_filtered_x_V_blk_n <= y_filtered_x_V_full_n;
        else 
            y_filtered_x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_filtered_x_V_din <= ap_const_lv1_0;

    y_filtered_x_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_47_i_mid2_reg_663, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            y_filtered_x_V_write <= ap_const_logic_1;
        else 
            y_filtered_x_V_write <= ap_const_logic_0;
        end if; 
    end process;


    y_filtered_y_V_blk_n_assign_proc : process(y_filtered_y_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_47_i_mid2_reg_663)
    begin
        if (((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_filtered_y_V_blk_n <= y_filtered_y_V_full_n;
        else 
            y_filtered_y_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_filtered_y_V_din <= ap_const_lv1_0;

    y_filtered_y_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_47_i_mid2_reg_663, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            y_filtered_y_V_write <= ap_const_logic_1;
        else 
            y_filtered_y_V_write <= ap_const_logic_0;
        end if; 
    end process;


    y_filtered_z_V_blk_n_assign_proc : process(y_filtered_z_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_47_i_mid2_reg_663)
    begin
        if (((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            y_filtered_z_V_blk_n <= y_filtered_z_V_full_n;
        else 
            y_filtered_z_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_filtered_z_V_din <= ap_const_lv1_0;

    y_filtered_z_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_47_i_mid2_reg_663, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_47_i_mid2_reg_663 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            y_filtered_z_V_write <= ap_const_logic_1;
        else 
            y_filtered_z_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
