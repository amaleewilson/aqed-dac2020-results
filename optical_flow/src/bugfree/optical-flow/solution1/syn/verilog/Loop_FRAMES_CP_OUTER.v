// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_FRAMES_CP_OUTER (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        m_axi_frames_V_AWVALID,
        m_axi_frames_V_AWREADY,
        m_axi_frames_V_AWADDR,
        m_axi_frames_V_AWID,
        m_axi_frames_V_AWLEN,
        m_axi_frames_V_AWSIZE,
        m_axi_frames_V_AWBURST,
        m_axi_frames_V_AWLOCK,
        m_axi_frames_V_AWCACHE,
        m_axi_frames_V_AWPROT,
        m_axi_frames_V_AWQOS,
        m_axi_frames_V_AWREGION,
        m_axi_frames_V_AWUSER,
        m_axi_frames_V_WVALID,
        m_axi_frames_V_WREADY,
        m_axi_frames_V_WDATA,
        m_axi_frames_V_WSTRB,
        m_axi_frames_V_WLAST,
        m_axi_frames_V_WID,
        m_axi_frames_V_WUSER,
        m_axi_frames_V_ARVALID,
        m_axi_frames_V_ARREADY,
        m_axi_frames_V_ARADDR,
        m_axi_frames_V_ARID,
        m_axi_frames_V_ARLEN,
        m_axi_frames_V_ARSIZE,
        m_axi_frames_V_ARBURST,
        m_axi_frames_V_ARLOCK,
        m_axi_frames_V_ARCACHE,
        m_axi_frames_V_ARPROT,
        m_axi_frames_V_ARQOS,
        m_axi_frames_V_ARREGION,
        m_axi_frames_V_ARUSER,
        m_axi_frames_V_RVALID,
        m_axi_frames_V_RREADY,
        m_axi_frames_V_RDATA,
        m_axi_frames_V_RLAST,
        m_axi_frames_V_RID,
        m_axi_frames_V_RUSER,
        m_axi_frames_V_RRESP,
        m_axi_frames_V_BVALID,
        m_axi_frames_V_BREADY,
        m_axi_frames_V_BRESP,
        m_axi_frames_V_BID,
        m_axi_frames_V_BUSER,
        frames_V_offset_dout,
        frames_V_offset_empty_n,
        frames_V_offset_read,
        frame1_a_V_din,
        frame1_a_V_full_n,
        frame1_a_V_write,
        frame2_a_V_din,
        frame2_a_V_full_n,
        frame2_a_V_write,
        frame3_a_V_din,
        frame3_a_V_full_n,
        frame3_a_V_write,
        frame3_b_V_din,
        frame3_b_V_full_n,
        frame3_b_V_write,
        frame4_a_V_din,
        frame4_a_V_full_n,
        frame4_a_V_write,
        frame5_a_V_din,
        frame5_a_V_full_n,
        frame5_a_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state21 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output   m_axi_frames_V_AWVALID;
input   m_axi_frames_V_AWREADY;
output  [31:0] m_axi_frames_V_AWADDR;
output  [0:0] m_axi_frames_V_AWID;
output  [31:0] m_axi_frames_V_AWLEN;
output  [2:0] m_axi_frames_V_AWSIZE;
output  [1:0] m_axi_frames_V_AWBURST;
output  [1:0] m_axi_frames_V_AWLOCK;
output  [3:0] m_axi_frames_V_AWCACHE;
output  [2:0] m_axi_frames_V_AWPROT;
output  [3:0] m_axi_frames_V_AWQOS;
output  [3:0] m_axi_frames_V_AWREGION;
output  [0:0] m_axi_frames_V_AWUSER;
output   m_axi_frames_V_WVALID;
input   m_axi_frames_V_WREADY;
output  [63:0] m_axi_frames_V_WDATA;
output  [7:0] m_axi_frames_V_WSTRB;
output   m_axi_frames_V_WLAST;
output  [0:0] m_axi_frames_V_WID;
output  [0:0] m_axi_frames_V_WUSER;
output   m_axi_frames_V_ARVALID;
input   m_axi_frames_V_ARREADY;
output  [31:0] m_axi_frames_V_ARADDR;
output  [0:0] m_axi_frames_V_ARID;
output  [31:0] m_axi_frames_V_ARLEN;
output  [2:0] m_axi_frames_V_ARSIZE;
output  [1:0] m_axi_frames_V_ARBURST;
output  [1:0] m_axi_frames_V_ARLOCK;
output  [3:0] m_axi_frames_V_ARCACHE;
output  [2:0] m_axi_frames_V_ARPROT;
output  [3:0] m_axi_frames_V_ARQOS;
output  [3:0] m_axi_frames_V_ARREGION;
output  [0:0] m_axi_frames_V_ARUSER;
input   m_axi_frames_V_RVALID;
output   m_axi_frames_V_RREADY;
input  [63:0] m_axi_frames_V_RDATA;
input   m_axi_frames_V_RLAST;
input  [0:0] m_axi_frames_V_RID;
input  [0:0] m_axi_frames_V_RUSER;
input  [1:0] m_axi_frames_V_RRESP;
input   m_axi_frames_V_BVALID;
output   m_axi_frames_V_BREADY;
input  [1:0] m_axi_frames_V_BRESP;
input  [0:0] m_axi_frames_V_BID;
input  [0:0] m_axi_frames_V_BUSER;
input  [31:0] frames_V_offset_dout;
input   frames_V_offset_empty_n;
output   frames_V_offset_read;
output  [7:0] frame1_a_V_din;
input   frame1_a_V_full_n;
output   frame1_a_V_write;
output  [7:0] frame2_a_V_din;
input   frame2_a_V_full_n;
output   frame2_a_V_write;
output  [7:0] frame3_a_V_din;
input   frame3_a_V_full_n;
output   frame3_a_V_write;
output  [7:0] frame3_b_V_din;
input   frame3_b_V_full_n;
output   frame3_b_V_write;
output  [7:0] frame4_a_V_din;
input   frame4_a_V_full_n;
output   frame4_a_V_write;
output  [7:0] frame5_a_V_din;
input   frame5_a_V_full_n;
output   frame5_a_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_frames_V_ARVALID;
reg m_axi_frames_V_RREADY;
reg frames_V_offset_read;
reg frame1_a_V_write;
reg frame2_a_V_write;
reg frame3_a_V_write;
reg frame3_b_V_write;
reg frame4_a_V_write;
reg frame5_a_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    frames_V_blk_n_AR;
reg    ap_enable_reg_pp0_iter10;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_124_reg_438;
reg    frames_V_blk_n_R;
reg    ap_enable_reg_pp0_iter17;
reg   [0:0] exitcond_flatten_i_reg_403;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter16_reg;
reg    frames_V_offset_blk_n;
reg    frame1_a_V_blk_n;
reg    ap_enable_reg_pp0_iter18;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter17_reg;
reg    frame2_a_V_blk_n;
reg    frame3_a_V_blk_n;
reg    frame3_b_V_blk_n;
reg    frame4_a_V_blk_n;
reg    frame5_a_V_blk_n;
reg   [5:0] indvar_flatten_i_reg_168;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_sig_ioackin_m_axi_frames_V_ARREADY;
reg    ap_block_state12_io;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
reg    ap_block_state19_pp0_stage0_iter17;
reg    ap_block_state20_pp0_stage0_iter18;
reg    ap_block_pp0_stage0_11001;
reg   [2:0] r_i_i_reg_180;
reg   [3:0] c_i_i_reg_191;
wire   [29:0] sext_cast_i_fu_212_p1;
reg   [29:0] sext_cast_i_reg_393;
reg    ap_block_state1;
wire   [5:0] tmp_29_i_fu_236_p2;
reg   [5:0] tmp_29_i_reg_398;
reg   [5:0] tmp_29_i_reg_398_pp0_iter1_reg;
reg   [5:0] tmp_29_i_reg_398_pp0_iter2_reg;
reg   [5:0] tmp_29_i_reg_398_pp0_iter3_reg;
reg   [5:0] tmp_29_i_reg_398_pp0_iter4_reg;
reg   [5:0] tmp_29_i_reg_398_pp0_iter5_reg;
reg   [5:0] tmp_29_i_reg_398_pp0_iter6_reg;
reg   [5:0] tmp_29_i_reg_398_pp0_iter7_reg;
reg   [5:0] tmp_29_i_reg_398_pp0_iter8_reg;
wire   [0:0] exitcond_flatten_i_fu_242_p2;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter6_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter7_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter8_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter9_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter10_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter11_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter12_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter13_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter14_reg;
reg   [0:0] exitcond_flatten_i_reg_403_pp0_iter15_reg;
wire   [5:0] indvar_flatten_next_s_fu_248_p2;
reg   [5:0] indvar_flatten_next_s_reg_407;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] exitcond_i14_i_fu_254_p2;
reg   [0:0] exitcond_i14_i_reg_412;
reg   [0:0] exitcond_i14_i_reg_412_pp0_iter1_reg;
reg   [0:0] exitcond_i14_i_reg_412_pp0_iter2_reg;
reg   [0:0] exitcond_i14_i_reg_412_pp0_iter3_reg;
reg   [0:0] exitcond_i14_i_reg_412_pp0_iter4_reg;
reg   [0:0] exitcond_i14_i_reg_412_pp0_iter5_reg;
reg   [0:0] exitcond_i14_i_reg_412_pp0_iter6_reg;
reg   [0:0] exitcond_i14_i_reg_412_pp0_iter7_reg;
reg   [0:0] exitcond_i14_i_reg_412_pp0_iter8_reg;
wire   [2:0] r7_i_fu_260_p2;
reg   [2:0] r7_i_reg_417;
reg   [2:0] r7_i_reg_417_pp0_iter1_reg;
reg   [2:0] r7_i_reg_417_pp0_iter2_reg;
reg   [2:0] r7_i_reg_417_pp0_iter3_reg;
reg   [2:0] r7_i_reg_417_pp0_iter4_reg;
reg   [2:0] r7_i_reg_417_pp0_iter5_reg;
reg   [2:0] r7_i_reg_417_pp0_iter6_reg;
reg   [2:0] r7_i_reg_417_pp0_iter7_reg;
reg   [2:0] r7_i_reg_417_pp0_iter8_reg;
wire   [2:0] r_i_mid2_i_fu_266_p3;
wire   [3:0] c_fu_286_p3;
wire   [29:0] sum3_i_fu_328_p2;
reg   [29:0] sum3_i_reg_433;
wire   [0:0] tmp_124_fu_333_p2;
wire   [7:0] tmp_125_fu_349_p1;
reg   [7:0] tmp_125_reg_448;
reg   [7:0] p_Result_1_i_i_reg_453;
reg   [7:0] p_Result_2_i_i_reg_458;
reg   [7:0] p_Result_3_i_i_reg_464;
reg   [7:0] p_Result_4_i_i_reg_469;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg   [5:0] ap_phi_mux_indvar_flatten_i_phi_fu_172_p4;
wire   [63:0] sum3_cast_i_fu_339_p1;
reg    ap_reg_ioackin_m_axi_frames_V_ARREADY;
reg    ap_block_pp0_stage0_01001;
wire   [28:0] tmp_fu_202_p4;
wire   [3:0] p_shl8_i_i_fu_224_p3;
wire   [5:0] p_shl_i_i_fu_216_p3;
wire   [5:0] tmp_i_fu_232_p1;
wire   [4:0] grp_fu_274_p1;
wire   [3:0] c_i_i_op_fu_280_p2;
wire   [3:0] p_shl8_i_mid1_i_fu_301_p3;
wire   [5:0] tmp_56_mid1_i_fu_308_p1;
wire   [5:0] p_shl_i_mid1_i_fu_294_p3;
wire   [5:0] tmp_57_mid1_i_fu_312_p2;
wire   [5:0] tmp_122_fu_318_p3;
wire   [29:0] tmp_58_mid2_cast_i_fu_324_p1;
wire   [5:0] grp_fu_274_p2;
reg    grp_fu_274_ce;
wire    ap_CS_fsm_state21;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_reg_ioackin_m_axi_frames_V_ARREADY = 1'b0;
end

optical_flow_urembkb #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 6 ))
optical_flow_urembkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_indvar_flatten_i_phi_fu_172_p4),
    .din1(grp_fu_274_p1),
    .ce(grp_fu_274_ce),
    .dout(grp_fu_274_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((frames_V_offset_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end else if ((~((frames_V_offset_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter18 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_frames_V_ARREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter10 == 1'b1) & (tmp_124_reg_438 == 1'd1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_frames_V_ARREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_frames_V_ARREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_frames_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_fu_242_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_i_i_reg_191 <= c_fu_286_p3;
    end else if ((~((frames_V_offset_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_i_i_reg_191 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_i_reg_168 <= indvar_flatten_next_s_reg_407;
    end else if ((~((frames_V_offset_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_i_reg_168 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_fu_242_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_i_i_reg_180 <= r_i_mid2_i_fu_266_p3;
    end else if ((~((frames_V_offset_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_i_i_reg_180 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_i_reg_403 <= exitcond_flatten_i_fu_242_p2;
        exitcond_flatten_i_reg_403_pp0_iter1_reg <= exitcond_flatten_i_reg_403;
        exitcond_i14_i_reg_412_pp0_iter1_reg <= exitcond_i14_i_reg_412;
        r7_i_reg_417_pp0_iter1_reg <= r7_i_reg_417;
        tmp_29_i_reg_398[5 : 1] <= tmp_29_i_fu_236_p2[5 : 1];
        tmp_29_i_reg_398_pp0_iter1_reg[5 : 1] <= tmp_29_i_reg_398[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_i_reg_403_pp0_iter10_reg <= exitcond_flatten_i_reg_403_pp0_iter9_reg;
        exitcond_flatten_i_reg_403_pp0_iter11_reg <= exitcond_flatten_i_reg_403_pp0_iter10_reg;
        exitcond_flatten_i_reg_403_pp0_iter12_reg <= exitcond_flatten_i_reg_403_pp0_iter11_reg;
        exitcond_flatten_i_reg_403_pp0_iter13_reg <= exitcond_flatten_i_reg_403_pp0_iter12_reg;
        exitcond_flatten_i_reg_403_pp0_iter14_reg <= exitcond_flatten_i_reg_403_pp0_iter13_reg;
        exitcond_flatten_i_reg_403_pp0_iter15_reg <= exitcond_flatten_i_reg_403_pp0_iter14_reg;
        exitcond_flatten_i_reg_403_pp0_iter16_reg <= exitcond_flatten_i_reg_403_pp0_iter15_reg;
        exitcond_flatten_i_reg_403_pp0_iter17_reg <= exitcond_flatten_i_reg_403_pp0_iter16_reg;
        exitcond_flatten_i_reg_403_pp0_iter2_reg <= exitcond_flatten_i_reg_403_pp0_iter1_reg;
        exitcond_flatten_i_reg_403_pp0_iter3_reg <= exitcond_flatten_i_reg_403_pp0_iter2_reg;
        exitcond_flatten_i_reg_403_pp0_iter4_reg <= exitcond_flatten_i_reg_403_pp0_iter3_reg;
        exitcond_flatten_i_reg_403_pp0_iter5_reg <= exitcond_flatten_i_reg_403_pp0_iter4_reg;
        exitcond_flatten_i_reg_403_pp0_iter6_reg <= exitcond_flatten_i_reg_403_pp0_iter5_reg;
        exitcond_flatten_i_reg_403_pp0_iter7_reg <= exitcond_flatten_i_reg_403_pp0_iter6_reg;
        exitcond_flatten_i_reg_403_pp0_iter8_reg <= exitcond_flatten_i_reg_403_pp0_iter7_reg;
        exitcond_flatten_i_reg_403_pp0_iter9_reg <= exitcond_flatten_i_reg_403_pp0_iter8_reg;
        exitcond_i14_i_reg_412_pp0_iter2_reg <= exitcond_i14_i_reg_412_pp0_iter1_reg;
        exitcond_i14_i_reg_412_pp0_iter3_reg <= exitcond_i14_i_reg_412_pp0_iter2_reg;
        exitcond_i14_i_reg_412_pp0_iter4_reg <= exitcond_i14_i_reg_412_pp0_iter3_reg;
        exitcond_i14_i_reg_412_pp0_iter5_reg <= exitcond_i14_i_reg_412_pp0_iter4_reg;
        exitcond_i14_i_reg_412_pp0_iter6_reg <= exitcond_i14_i_reg_412_pp0_iter5_reg;
        exitcond_i14_i_reg_412_pp0_iter7_reg <= exitcond_i14_i_reg_412_pp0_iter6_reg;
        exitcond_i14_i_reg_412_pp0_iter8_reg <= exitcond_i14_i_reg_412_pp0_iter7_reg;
        r7_i_reg_417_pp0_iter2_reg <= r7_i_reg_417_pp0_iter1_reg;
        r7_i_reg_417_pp0_iter3_reg <= r7_i_reg_417_pp0_iter2_reg;
        r7_i_reg_417_pp0_iter4_reg <= r7_i_reg_417_pp0_iter3_reg;
        r7_i_reg_417_pp0_iter5_reg <= r7_i_reg_417_pp0_iter4_reg;
        r7_i_reg_417_pp0_iter6_reg <= r7_i_reg_417_pp0_iter5_reg;
        r7_i_reg_417_pp0_iter7_reg <= r7_i_reg_417_pp0_iter6_reg;
        r7_i_reg_417_pp0_iter8_reg <= r7_i_reg_417_pp0_iter7_reg;
        tmp_29_i_reg_398_pp0_iter2_reg[5 : 1] <= tmp_29_i_reg_398_pp0_iter1_reg[5 : 1];
        tmp_29_i_reg_398_pp0_iter3_reg[5 : 1] <= tmp_29_i_reg_398_pp0_iter2_reg[5 : 1];
        tmp_29_i_reg_398_pp0_iter4_reg[5 : 1] <= tmp_29_i_reg_398_pp0_iter3_reg[5 : 1];
        tmp_29_i_reg_398_pp0_iter5_reg[5 : 1] <= tmp_29_i_reg_398_pp0_iter4_reg[5 : 1];
        tmp_29_i_reg_398_pp0_iter6_reg[5 : 1] <= tmp_29_i_reg_398_pp0_iter5_reg[5 : 1];
        tmp_29_i_reg_398_pp0_iter7_reg[5 : 1] <= tmp_29_i_reg_398_pp0_iter6_reg[5 : 1];
        tmp_29_i_reg_398_pp0_iter8_reg[5 : 1] <= tmp_29_i_reg_398_pp0_iter7_reg[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_fu_242_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_i14_i_reg_412 <= exitcond_i14_i_fu_254_p2;
        r7_i_reg_417 <= r7_i_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_s_reg_407 <= indvar_flatten_next_s_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter16_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_1_i_i_reg_453 <= {{m_axi_frames_V_RDATA[15:8]}};
        p_Result_2_i_i_reg_458 <= {{m_axi_frames_V_RDATA[23:16]}};
        p_Result_3_i_i_reg_464 <= {{m_axi_frames_V_RDATA[31:24]}};
        p_Result_4_i_i_reg_469 <= {{m_axi_frames_V_RDATA[39:32]}};
        tmp_125_reg_448 <= tmp_125_fu_349_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((frames_V_offset_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sext_cast_i_reg_393[28 : 0] <= sext_cast_i_fu_212_p1[28 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum3_i_reg_433 <= sum3_i_fu_328_p2;
        tmp_124_reg_438 <= tmp_124_fu_333_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_i_fu_242_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_i_phi_fu_172_p4 = indvar_flatten_next_s_reg_407;
    end else begin
        ap_phi_mux_indvar_flatten_i_phi_fu_172_p4 = indvar_flatten_i_reg_168;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_frames_V_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_frames_V_ARREADY = m_axi_frames_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_frames_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame1_a_V_blk_n = frame1_a_V_full_n;
    end else begin
        frame1_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        frame1_a_V_write = 1'b1;
    end else begin
        frame1_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame2_a_V_blk_n = frame2_a_V_full_n;
    end else begin
        frame2_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        frame2_a_V_write = 1'b1;
    end else begin
        frame2_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame3_a_V_blk_n = frame3_a_V_full_n;
    end else begin
        frame3_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        frame3_a_V_write = 1'b1;
    end else begin
        frame3_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame3_b_V_blk_n = frame3_b_V_full_n;
    end else begin
        frame3_b_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        frame3_b_V_write = 1'b1;
    end else begin
        frame3_b_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame4_a_V_blk_n = frame4_a_V_full_n;
    end else begin
        frame4_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        frame4_a_V_write = 1'b1;
    end else begin
        frame4_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frame5_a_V_blk_n = frame5_a_V_full_n;
    end else begin
        frame5_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1))) begin
        frame5_a_V_write = 1'b1;
    end else begin
        frame5_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (tmp_124_reg_438 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        frames_V_blk_n_AR = m_axi_frames_V_ARREADY;
    end else begin
        frames_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        frames_V_blk_n_R = m_axi_frames_V_RVALID;
    end else begin
        frames_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        frames_V_offset_blk_n = frames_V_offset_empty_n;
    end else begin
        frames_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((frames_V_offset_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        frames_V_offset_read = 1'b1;
    end else begin
        frames_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_274_ce = 1'b1;
    end else begin
        grp_fu_274_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_frames_V_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b1) & (tmp_124_reg_438 == 1'd1))) begin
        m_axi_frames_V_ARVALID = 1'b1;
    end else begin
        m_axi_frames_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_i_reg_403_pp0_iter16_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1))) begin
        m_axi_frames_V_RREADY = 1'b1;
    end else begin
        m_axi_frames_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((frames_V_offset_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_i_fu_242_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter18 == 1'b1) & (ap_enable_reg_pp0_iter17 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_i_fu_242_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter18 == 1'b1) & (ap_enable_reg_pp0_iter17 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter18 == 1'b1) & (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame5_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame4_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame3_b_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame3_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame2_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame1_a_V_full_n == 1'b0)))) | ((exitcond_flatten_i_reg_403_pp0_iter16_reg == 1'd0) & (m_axi_frames_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter18 == 1'b1) & (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame5_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame4_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame3_b_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame3_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame2_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame1_a_V_full_n == 1'b0)))) | ((exitcond_flatten_i_reg_403_pp0_iter16_reg == 1'd0) & (m_axi_frames_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state12_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter18 == 1'b1) & (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame5_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame4_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame3_b_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame3_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame2_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame1_a_V_full_n == 1'b0)))) | ((exitcond_flatten_i_reg_403_pp0_iter16_reg == 1'd0) & (m_axi_frames_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state12_io)));
end

always @ (*) begin
    ap_block_state1 = ((frames_V_offset_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((ap_sig_ioackin_m_axi_frames_V_ARREADY == 1'b0) & (tmp_124_reg_438 == 1'd1));
end

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter17 = ((exitcond_flatten_i_reg_403_pp0_iter16_reg == 1'd0) & (m_axi_frames_V_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state20_pp0_stage0_iter18 = (((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame5_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame4_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame3_b_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame3_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame2_a_V_full_n == 1'b0)) | ((exitcond_flatten_i_reg_403_pp0_iter17_reg == 1'd0) & (frame1_a_V_full_n == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign c_fu_286_p3 = ((exitcond_i14_i_fu_254_p2[0:0] === 1'b1) ? 4'd1 : c_i_i_op_fu_280_p2);

assign c_i_i_op_fu_280_p2 = (4'd1 + c_i_i_reg_191);

assign exitcond_flatten_i_fu_242_p2 = ((ap_phi_mux_indvar_flatten_i_phi_fu_172_p4 == 6'd50) ? 1'b1 : 1'b0);

assign exitcond_i14_i_fu_254_p2 = ((c_i_i_reg_191 == 4'd10) ? 1'b1 : 1'b0);

assign frame1_a_V_din = tmp_125_reg_448;

assign frame2_a_V_din = p_Result_1_i_i_reg_453;

assign frame3_a_V_din = p_Result_2_i_i_reg_458;

assign frame3_b_V_din = p_Result_2_i_i_reg_458;

assign frame4_a_V_din = p_Result_3_i_i_reg_464;

assign frame5_a_V_din = p_Result_4_i_i_reg_469;

assign grp_fu_274_p1 = 6'd10;

assign indvar_flatten_next_s_fu_248_p2 = (ap_phi_mux_indvar_flatten_i_phi_fu_172_p4 + 6'd1);

assign m_axi_frames_V_ARADDR = sum3_cast_i_fu_339_p1;

assign m_axi_frames_V_ARBURST = 2'd0;

assign m_axi_frames_V_ARCACHE = 4'd0;

assign m_axi_frames_V_ARID = 1'd0;

assign m_axi_frames_V_ARLEN = 32'd10;

assign m_axi_frames_V_ARLOCK = 2'd0;

assign m_axi_frames_V_ARPROT = 3'd0;

assign m_axi_frames_V_ARQOS = 4'd0;

assign m_axi_frames_V_ARREGION = 4'd0;

assign m_axi_frames_V_ARSIZE = 3'd0;

assign m_axi_frames_V_ARUSER = 1'd0;

assign m_axi_frames_V_AWADDR = 32'd0;

assign m_axi_frames_V_AWBURST = 2'd0;

assign m_axi_frames_V_AWCACHE = 4'd0;

assign m_axi_frames_V_AWID = 1'd0;

assign m_axi_frames_V_AWLEN = 32'd0;

assign m_axi_frames_V_AWLOCK = 2'd0;

assign m_axi_frames_V_AWPROT = 3'd0;

assign m_axi_frames_V_AWQOS = 4'd0;

assign m_axi_frames_V_AWREGION = 4'd0;

assign m_axi_frames_V_AWSIZE = 3'd0;

assign m_axi_frames_V_AWUSER = 1'd0;

assign m_axi_frames_V_AWVALID = 1'b0;

assign m_axi_frames_V_BREADY = 1'b0;

assign m_axi_frames_V_WDATA = 64'd0;

assign m_axi_frames_V_WID = 1'd0;

assign m_axi_frames_V_WLAST = 1'b0;

assign m_axi_frames_V_WSTRB = 8'd0;

assign m_axi_frames_V_WUSER = 1'd0;

assign m_axi_frames_V_WVALID = 1'b0;

assign p_shl8_i_i_fu_224_p3 = {{r_i_i_reg_180}, {1'd0}};

assign p_shl8_i_mid1_i_fu_301_p3 = {{r7_i_reg_417_pp0_iter8_reg}, {1'd0}};

assign p_shl_i_i_fu_216_p3 = {{r_i_i_reg_180}, {3'd0}};

assign p_shl_i_mid1_i_fu_294_p3 = {{r7_i_reg_417_pp0_iter8_reg}, {3'd0}};

assign r7_i_fu_260_p2 = (r_i_i_reg_180 + 3'd1);

assign r_i_mid2_i_fu_266_p3 = ((exitcond_i14_i_fu_254_p2[0:0] === 1'b1) ? r7_i_fu_260_p2 : r_i_i_reg_180);

assign sext_cast_i_fu_212_p1 = tmp_fu_202_p4;

assign start_out = real_start;

assign sum3_cast_i_fu_339_p1 = sum3_i_reg_433;

assign sum3_i_fu_328_p2 = (tmp_58_mid2_cast_i_fu_324_p1 + sext_cast_i_reg_393);

assign tmp_122_fu_318_p3 = ((exitcond_i14_i_reg_412_pp0_iter8_reg[0:0] === 1'b1) ? tmp_57_mid1_i_fu_312_p2 : tmp_29_i_reg_398_pp0_iter8_reg);

assign tmp_124_fu_333_p2 = ((grp_fu_274_p2 == 6'd0) ? 1'b1 : 1'b0);

assign tmp_125_fu_349_p1 = m_axi_frames_V_RDATA[7:0];

assign tmp_29_i_fu_236_p2 = (p_shl_i_i_fu_216_p3 + tmp_i_fu_232_p1);

assign tmp_56_mid1_i_fu_308_p1 = p_shl8_i_mid1_i_fu_301_p3;

assign tmp_57_mid1_i_fu_312_p2 = (tmp_56_mid1_i_fu_308_p1 + p_shl_i_mid1_i_fu_294_p3);

assign tmp_58_mid2_cast_i_fu_324_p1 = tmp_122_fu_318_p3;

assign tmp_fu_202_p4 = {{frames_V_offset_dout[31:3]}};

assign tmp_i_fu_232_p1 = p_shl8_i_i_fu_224_p3;

always @ (posedge ap_clk) begin
    sext_cast_i_reg_393[29] <= 1'b0;
    tmp_29_i_reg_398[0] <= 1'b0;
    tmp_29_i_reg_398_pp0_iter1_reg[0] <= 1'b0;
    tmp_29_i_reg_398_pp0_iter2_reg[0] <= 1'b0;
    tmp_29_i_reg_398_pp0_iter3_reg[0] <= 1'b0;
    tmp_29_i_reg_398_pp0_iter4_reg[0] <= 1'b0;
    tmp_29_i_reg_398_pp0_iter5_reg[0] <= 1'b0;
    tmp_29_i_reg_398_pp0_iter6_reg[0] <= 1'b0;
    tmp_29_i_reg_398_pp0_iter7_reg[0] <= 1'b0;
    tmp_29_i_reg_398_pp0_iter8_reg[0] <= 1'b0;
end

endmodule //Loop_FRAMES_CP_OUTER
