-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity optical_flow is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of optical_flow is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "optical_flow,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7v2000tfhg1761-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=201,HLS_SYN_TPT=134,HLS_SYN_MEM=55,HLS_SYN_DSP=150,HLS_SYN_FF=29407,HLS_SYN_LUT=25237,HLS_VERSION=2018_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal frames_V : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal optical_flow_entry12_U0_ap_start : STD_LOGIC;
    signal optical_flow_entry12_U0_ap_done : STD_LOGIC;
    signal optical_flow_entry12_U0_ap_continue : STD_LOGIC;
    signal optical_flow_entry12_U0_ap_idle : STD_LOGIC;
    signal optical_flow_entry12_U0_ap_ready : STD_LOGIC;
    signal optical_flow_entry12_U0_start_out : STD_LOGIC;
    signal optical_flow_entry12_U0_start_write : STD_LOGIC;
    signal optical_flow_entry12_U0_frames_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal optical_flow_entry12_U0_frames_V_out_write : STD_LOGIC;
    signal optical_flow_entry12_U0_outputs_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal optical_flow_entry12_U0_outputs_out_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_start : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_start_full_n : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_done : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_continue : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_idle : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_ready : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_start_out : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_start_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWVALID : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WVALID : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WLAST : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARVALID : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_RREADY : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_BREADY : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frames_V_offset_read : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame1_a_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame1_a_V_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame2_a_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame2_a_V_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame3_a_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame3_a_V_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame3_b_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame3_b_V_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame4_a_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame4_a_V_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame5_a_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame5_a_V_write : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_start : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_done : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_continue : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_idle : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_ready : STD_LOGIC;
    signal gradient_xy_calc_U0_start_out : STD_LOGIC;
    signal gradient_xy_calc_U0_start_write : STD_LOGIC;
    signal gradient_xy_calc_U0_frame3_a_V_read : STD_LOGIC;
    signal gradient_xy_calc_U0_gradient_x_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_xy_calc_U0_gradient_x_V_write : STD_LOGIC;
    signal gradient_xy_calc_U0_gradient_y_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_xy_calc_U0_gradient_y_V_write : STD_LOGIC;
    signal gradient_z_calc_U0_ap_start : STD_LOGIC;
    signal gradient_z_calc_U0_ap_done : STD_LOGIC;
    signal gradient_z_calc_U0_ap_continue : STD_LOGIC;
    signal gradient_z_calc_U0_ap_idle : STD_LOGIC;
    signal gradient_z_calc_U0_ap_ready : STD_LOGIC;
    signal gradient_z_calc_U0_frame1_a_V_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame2_a_V_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame3_b_V_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame4_a_V_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame5_a_V_read : STD_LOGIC;
    signal gradient_z_calc_U0_gradient_z_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_z_calc_U0_gradient_z_V_write : STD_LOGIC;
    signal gradient_weight_y_U0_ap_start : STD_LOGIC;
    signal gradient_weight_y_U0_ap_done : STD_LOGIC;
    signal gradient_weight_y_U0_ap_continue : STD_LOGIC;
    signal gradient_weight_y_U0_ap_idle : STD_LOGIC;
    signal gradient_weight_y_U0_ap_ready : STD_LOGIC;
    signal gradient_weight_y_U0_start_out : STD_LOGIC;
    signal gradient_weight_y_U0_start_write : STD_LOGIC;
    signal gradient_weight_y_U0_gradient_x_V_read : STD_LOGIC;
    signal gradient_weight_y_U0_gradient_y_V_read : STD_LOGIC;
    signal gradient_weight_y_U0_gradient_z_V_read : STD_LOGIC;
    signal gradient_weight_y_U0_y_filtered_x_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal gradient_weight_y_U0_y_filtered_x_V_write : STD_LOGIC;
    signal gradient_weight_y_U0_y_filtered_y_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal gradient_weight_y_U0_y_filtered_y_V_write : STD_LOGIC;
    signal gradient_weight_y_U0_y_filtered_z_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal gradient_weight_y_U0_y_filtered_z_V_write : STD_LOGIC;
    signal gradient_weight_x_U0_ap_start : STD_LOGIC;
    signal gradient_weight_x_U0_ap_done : STD_LOGIC;
    signal gradient_weight_x_U0_ap_continue : STD_LOGIC;
    signal gradient_weight_x_U0_ap_idle : STD_LOGIC;
    signal gradient_weight_x_U0_ap_ready : STD_LOGIC;
    signal gradient_weight_x_U0_start_out : STD_LOGIC;
    signal gradient_weight_x_U0_start_write : STD_LOGIC;
    signal gradient_weight_x_U0_y_filtered_x_V_read : STD_LOGIC;
    signal gradient_weight_x_U0_y_filtered_y_V_read : STD_LOGIC;
    signal gradient_weight_x_U0_y_filtered_z_V_read : STD_LOGIC;
    signal gradient_weight_x_U0_filtered_gradient_x_s_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_x_U0_filtered_gradient_x_s_write : STD_LOGIC;
    signal gradient_weight_x_U0_filtered_gradient_y_s_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_x_U0_filtered_gradient_y_s_write : STD_LOGIC;
    signal gradient_weight_x_U0_filtered_gradient_z_s_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_x_U0_filtered_gradient_z_s_write : STD_LOGIC;
    signal outer_product_U0_ap_start : STD_LOGIC;
    signal outer_product_U0_ap_done : STD_LOGIC;
    signal outer_product_U0_ap_continue : STD_LOGIC;
    signal outer_product_U0_ap_idle : STD_LOGIC;
    signal outer_product_U0_ap_ready : STD_LOGIC;
    signal outer_product_U0_start_out : STD_LOGIC;
    signal outer_product_U0_start_write : STD_LOGIC;
    signal outer_product_U0_filtered_gradient_x_s_read : STD_LOGIC;
    signal outer_product_U0_filtered_gradient_y_s_read : STD_LOGIC;
    signal outer_product_U0_filtered_gradient_z_s_read : STD_LOGIC;
    signal outer_product_U0_out_product_val_V_din : STD_LOGIC_VECTOR (190 downto 0);
    signal outer_product_U0_out_product_val_V_write : STD_LOGIC;
    signal tensor_weight_y_U0_ap_start : STD_LOGIC;
    signal tensor_weight_y_U0_ap_done : STD_LOGIC;
    signal tensor_weight_y_U0_ap_continue : STD_LOGIC;
    signal tensor_weight_y_U0_ap_idle : STD_LOGIC;
    signal tensor_weight_y_U0_ap_ready : STD_LOGIC;
    signal tensor_weight_y_U0_start_out : STD_LOGIC;
    signal tensor_weight_y_U0_start_write : STD_LOGIC;
    signal tensor_weight_y_U0_out_product_val_V_read : STD_LOGIC;
    signal tensor_weight_y_U0_tensor_y_val_V_din : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_weight_y_U0_tensor_y_val_V_write : STD_LOGIC;
    signal tensor_weight_x_U0_ap_start : STD_LOGIC;
    signal tensor_weight_x_U0_ap_done : STD_LOGIC;
    signal tensor_weight_x_U0_ap_continue : STD_LOGIC;
    signal tensor_weight_x_U0_ap_idle : STD_LOGIC;
    signal tensor_weight_x_U0_ap_ready : STD_LOGIC;
    signal tensor_weight_x_U0_tensor_y_val_V_read : STD_LOGIC;
    signal tensor_weight_x_U0_tensor_val_V_din : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_weight_x_U0_tensor_val_V_write : STD_LOGIC;
    signal flow_calc_U0_ap_start : STD_LOGIC;
    signal flow_calc_U0_ap_done : STD_LOGIC;
    signal flow_calc_U0_ap_continue : STD_LOGIC;
    signal flow_calc_U0_ap_idle : STD_LOGIC;
    signal flow_calc_U0_ap_ready : STD_LOGIC;
    signal flow_calc_U0_m_axi_outputs_AWVALID : STD_LOGIC;
    signal flow_calc_U0_m_axi_outputs_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal flow_calc_U0_m_axi_outputs_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal flow_calc_U0_m_axi_outputs_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal flow_calc_U0_m_axi_outputs_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal flow_calc_U0_m_axi_outputs_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal flow_calc_U0_m_axi_outputs_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal flow_calc_U0_m_axi_outputs_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal flow_calc_U0_m_axi_outputs_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal flow_calc_U0_m_axi_outputs_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal flow_calc_U0_m_axi_outputs_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal flow_calc_U0_m_axi_outputs_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal flow_calc_U0_m_axi_outputs_WVALID : STD_LOGIC;
    signal flow_calc_U0_m_axi_outputs_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal flow_calc_U0_m_axi_outputs_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal flow_calc_U0_m_axi_outputs_WLAST : STD_LOGIC;
    signal flow_calc_U0_m_axi_outputs_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal flow_calc_U0_m_axi_outputs_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARVALID : STD_LOGIC;
    signal flow_calc_U0_m_axi_outputs_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal flow_calc_U0_m_axi_outputs_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal flow_calc_U0_m_axi_outputs_RREADY : STD_LOGIC;
    signal flow_calc_U0_m_axi_outputs_BREADY : STD_LOGIC;
    signal flow_calc_U0_outputs_offset_read : STD_LOGIC;
    signal flow_calc_U0_tensor_val_V_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal frames_V_c_full_n : STD_LOGIC;
    signal frames_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal frames_V_c_empty_n : STD_LOGIC;
    signal outputs_c_full_n : STD_LOGIC;
    signal outputs_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal outputs_c_empty_n : STD_LOGIC;
    signal frame1_a_V_full_n : STD_LOGIC;
    signal frame1_a_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal frame1_a_V_empty_n : STD_LOGIC;
    signal frame2_a_V_full_n : STD_LOGIC;
    signal frame2_a_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal frame2_a_V_empty_n : STD_LOGIC;
    signal frame3_a_V_full_n : STD_LOGIC;
    signal frame3_a_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal frame3_a_V_empty_n : STD_LOGIC;
    signal frame3_b_V_full_n : STD_LOGIC;
    signal frame3_b_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal frame3_b_V_empty_n : STD_LOGIC;
    signal frame4_a_V_full_n : STD_LOGIC;
    signal frame4_a_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal frame4_a_V_empty_n : STD_LOGIC;
    signal frame5_a_V_full_n : STD_LOGIC;
    signal frame5_a_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal frame5_a_V_empty_n : STD_LOGIC;
    signal gradient_x_V_full_n : STD_LOGIC;
    signal gradient_x_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_x_V_empty_n : STD_LOGIC;
    signal gradient_y_V_full_n : STD_LOGIC;
    signal gradient_y_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_y_V_empty_n : STD_LOGIC;
    signal gradient_z_V_full_n : STD_LOGIC;
    signal gradient_z_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_z_V_empty_n : STD_LOGIC;
    signal y_filtered_x_V_full_n : STD_LOGIC;
    signal y_filtered_x_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal y_filtered_x_V_empty_n : STD_LOGIC;
    signal y_filtered_y_V_full_n : STD_LOGIC;
    signal y_filtered_y_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal y_filtered_y_V_empty_n : STD_LOGIC;
    signal y_filtered_z_V_full_n : STD_LOGIC;
    signal y_filtered_z_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal y_filtered_z_V_empty_n : STD_LOGIC;
    signal filtered_gradient_x_s_full_n : STD_LOGIC;
    signal filtered_gradient_x_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_x_s_empty_n : STD_LOGIC;
    signal filtered_gradient_y_s_full_n : STD_LOGIC;
    signal filtered_gradient_y_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_y_s_empty_n : STD_LOGIC;
    signal filtered_gradient_z_s_full_n : STD_LOGIC;
    signal filtered_gradient_z_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_z_s_empty_n : STD_LOGIC;
    signal out_product_val_V_full_n : STD_LOGIC;
    signal out_product_val_V_dout : STD_LOGIC_VECTOR (190 downto 0);
    signal out_product_val_V_empty_n : STD_LOGIC;
    signal tensor_y_val_V_full_n : STD_LOGIC;
    signal tensor_y_val_V_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_y_val_V_empty_n : STD_LOGIC;
    signal tensor_val_V_full_n : STD_LOGIC;
    signal tensor_val_V_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_val_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_optical_flow_entry12_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_optical_flow_entry12_U0_ap_ready : STD_LOGIC;
    signal optical_flow_entry12_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_flow_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_flow_calc_U0_full_n : STD_LOGIC;
    signal start_for_flow_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_flow_calc_U0_empty_n : STD_LOGIC;
    signal start_for_gradient_xy_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_xy_calc_U0_full_n : STD_LOGIC;
    signal start_for_gradient_xy_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_xy_calc_U0_empty_n : STD_LOGIC;
    signal start_for_gradient_z_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_z_calc_U0_full_n : STD_LOGIC;
    signal start_for_gradient_z_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_z_calc_U0_empty_n : STD_LOGIC;
    signal start_for_gradient_weight_y_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_y_U0_full_n : STD_LOGIC;
    signal start_for_gradient_weight_y_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_y_U0_empty_n : STD_LOGIC;
    signal gradient_z_calc_U0_start_full_n : STD_LOGIC;
    signal gradient_z_calc_U0_start_write : STD_LOGIC;
    signal start_for_gradient_weight_x_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_x_U0_full_n : STD_LOGIC;
    signal start_for_gradient_weight_x_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_x_U0_empty_n : STD_LOGIC;
    signal start_for_outer_product_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_outer_product_U0_full_n : STD_LOGIC;
    signal start_for_outer_product_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_outer_product_U0_empty_n : STD_LOGIC;
    signal start_for_tensor_weight_y_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_y_U0_full_n : STD_LOGIC;
    signal start_for_tensor_weight_y_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_y_U0_empty_n : STD_LOGIC;
    signal start_for_tensor_weight_x_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_x_U0_full_n : STD_LOGIC;
    signal start_for_tensor_weight_x_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_x_U0_empty_n : STD_LOGIC;
    signal tensor_weight_x_U0_start_full_n : STD_LOGIC;
    signal tensor_weight_x_U0_start_write : STD_LOGIC;
    signal flow_calc_U0_start_full_n : STD_LOGIC;
    signal flow_calc_U0_start_write : STD_LOGIC;

    component optical_flow_entry12 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        frames_V : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs : IN STD_LOGIC_VECTOR (31 downto 0);
        frames_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        frames_V_out_full_n : IN STD_LOGIC;
        frames_V_out_write : OUT STD_LOGIC;
        outputs_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs_out_full_n : IN STD_LOGIC;
        outputs_out_write : OUT STD_LOGIC );
    end component;


    component Loop_FRAMES_CP_OUTER IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_frames_V_AWVALID : OUT STD_LOGIC;
        m_axi_frames_V_AWREADY : IN STD_LOGIC;
        m_axi_frames_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frames_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frames_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frames_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frames_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frames_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frames_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frames_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frames_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frames_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frames_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frames_V_WVALID : OUT STD_LOGIC;
        m_axi_frames_V_WREADY : IN STD_LOGIC;
        m_axi_frames_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_frames_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_frames_V_WLAST : OUT STD_LOGIC;
        m_axi_frames_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frames_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frames_V_ARVALID : OUT STD_LOGIC;
        m_axi_frames_V_ARREADY : IN STD_LOGIC;
        m_axi_frames_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frames_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frames_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frames_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frames_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frames_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frames_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frames_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frames_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frames_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frames_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frames_V_RVALID : IN STD_LOGIC;
        m_axi_frames_V_RREADY : OUT STD_LOGIC;
        m_axi_frames_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_frames_V_RLAST : IN STD_LOGIC;
        m_axi_frames_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frames_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frames_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frames_V_BVALID : IN STD_LOGIC;
        m_axi_frames_V_BREADY : OUT STD_LOGIC;
        m_axi_frames_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frames_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frames_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        frames_V_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        frames_V_offset_empty_n : IN STD_LOGIC;
        frames_V_offset_read : OUT STD_LOGIC;
        frame1_a_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        frame1_a_V_full_n : IN STD_LOGIC;
        frame1_a_V_write : OUT STD_LOGIC;
        frame2_a_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        frame2_a_V_full_n : IN STD_LOGIC;
        frame2_a_V_write : OUT STD_LOGIC;
        frame3_a_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        frame3_a_V_full_n : IN STD_LOGIC;
        frame3_a_V_write : OUT STD_LOGIC;
        frame3_b_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        frame3_b_V_full_n : IN STD_LOGIC;
        frame3_b_V_write : OUT STD_LOGIC;
        frame4_a_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        frame4_a_V_full_n : IN STD_LOGIC;
        frame4_a_V_write : OUT STD_LOGIC;
        frame5_a_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        frame5_a_V_full_n : IN STD_LOGIC;
        frame5_a_V_write : OUT STD_LOGIC );
    end component;


    component gradient_xy_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        frame3_a_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        frame3_a_V_empty_n : IN STD_LOGIC;
        frame3_a_V_read : OUT STD_LOGIC;
        gradient_x_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_x_V_full_n : IN STD_LOGIC;
        gradient_x_V_write : OUT STD_LOGIC;
        gradient_y_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_y_V_full_n : IN STD_LOGIC;
        gradient_y_V_write : OUT STD_LOGIC );
    end component;


    component gradient_z_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        frame1_a_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        frame1_a_V_empty_n : IN STD_LOGIC;
        frame1_a_V_read : OUT STD_LOGIC;
        frame2_a_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        frame2_a_V_empty_n : IN STD_LOGIC;
        frame2_a_V_read : OUT STD_LOGIC;
        frame3_b_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        frame3_b_V_empty_n : IN STD_LOGIC;
        frame3_b_V_read : OUT STD_LOGIC;
        frame4_a_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        frame4_a_V_empty_n : IN STD_LOGIC;
        frame4_a_V_read : OUT STD_LOGIC;
        frame5_a_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        frame5_a_V_empty_n : IN STD_LOGIC;
        frame5_a_V_read : OUT STD_LOGIC;
        gradient_z_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_z_V_full_n : IN STD_LOGIC;
        gradient_z_V_write : OUT STD_LOGIC );
    end component;


    component gradient_weight_y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        gradient_x_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_x_V_empty_n : IN STD_LOGIC;
        gradient_x_V_read : OUT STD_LOGIC;
        gradient_y_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_y_V_empty_n : IN STD_LOGIC;
        gradient_y_V_read : OUT STD_LOGIC;
        gradient_z_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_z_V_empty_n : IN STD_LOGIC;
        gradient_z_V_read : OUT STD_LOGIC;
        y_filtered_x_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        y_filtered_x_V_full_n : IN STD_LOGIC;
        y_filtered_x_V_write : OUT STD_LOGIC;
        y_filtered_y_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        y_filtered_y_V_full_n : IN STD_LOGIC;
        y_filtered_y_V_write : OUT STD_LOGIC;
        y_filtered_z_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        y_filtered_z_V_full_n : IN STD_LOGIC;
        y_filtered_z_V_write : OUT STD_LOGIC );
    end component;


    component gradient_weight_x IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        y_filtered_x_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        y_filtered_x_V_empty_n : IN STD_LOGIC;
        y_filtered_x_V_read : OUT STD_LOGIC;
        y_filtered_y_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        y_filtered_y_V_empty_n : IN STD_LOGIC;
        y_filtered_y_V_read : OUT STD_LOGIC;
        y_filtered_z_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        y_filtered_z_V_empty_n : IN STD_LOGIC;
        y_filtered_z_V_read : OUT STD_LOGIC;
        filtered_gradient_x_s_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_x_s_full_n : IN STD_LOGIC;
        filtered_gradient_x_s_write : OUT STD_LOGIC;
        filtered_gradient_y_s_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_y_s_full_n : IN STD_LOGIC;
        filtered_gradient_y_s_write : OUT STD_LOGIC;
        filtered_gradient_z_s_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_z_s_full_n : IN STD_LOGIC;
        filtered_gradient_z_s_write : OUT STD_LOGIC );
    end component;


    component outer_product IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        filtered_gradient_x_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_x_s_empty_n : IN STD_LOGIC;
        filtered_gradient_x_s_read : OUT STD_LOGIC;
        filtered_gradient_y_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_y_s_empty_n : IN STD_LOGIC;
        filtered_gradient_y_s_read : OUT STD_LOGIC;
        filtered_gradient_z_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_z_s_empty_n : IN STD_LOGIC;
        filtered_gradient_z_s_read : OUT STD_LOGIC;
        out_product_val_V_din : OUT STD_LOGIC_VECTOR (190 downto 0);
        out_product_val_V_full_n : IN STD_LOGIC;
        out_product_val_V_write : OUT STD_LOGIC );
    end component;


    component tensor_weight_y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        out_product_val_V_dout : IN STD_LOGIC_VECTOR (190 downto 0);
        out_product_val_V_empty_n : IN STD_LOGIC;
        out_product_val_V_read : OUT STD_LOGIC;
        tensor_y_val_V_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        tensor_y_val_V_full_n : IN STD_LOGIC;
        tensor_y_val_V_write : OUT STD_LOGIC );
    end component;


    component tensor_weight_x IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tensor_y_val_V_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        tensor_y_val_V_empty_n : IN STD_LOGIC;
        tensor_y_val_V_read : OUT STD_LOGIC;
        tensor_val_V_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        tensor_val_V_full_n : IN STD_LOGIC;
        tensor_val_V_write : OUT STD_LOGIC );
    end component;


    component flow_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_outputs_AWVALID : OUT STD_LOGIC;
        m_axi_outputs_AWREADY : IN STD_LOGIC;
        m_axi_outputs_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WVALID : OUT STD_LOGIC;
        m_axi_outputs_WREADY : IN STD_LOGIC;
        m_axi_outputs_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_outputs_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_outputs_WLAST : OUT STD_LOGIC;
        m_axi_outputs_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARVALID : OUT STD_LOGIC;
        m_axi_outputs_ARREADY : IN STD_LOGIC;
        m_axi_outputs_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_outputs_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_outputs_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_outputs_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RVALID : IN STD_LOGIC;
        m_axi_outputs_RREADY : OUT STD_LOGIC;
        m_axi_outputs_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_outputs_RLAST : IN STD_LOGIC;
        m_axi_outputs_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BVALID : IN STD_LOGIC;
        m_axi_outputs_BREADY : OUT STD_LOGIC;
        m_axi_outputs_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_outputs_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_outputs_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        outputs_offset_empty_n : IN STD_LOGIC;
        outputs_offset_read : OUT STD_LOGIC;
        tensor_val_V_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        tensor_val_V_empty_n : IN STD_LOGIC;
        tensor_val_V_read : OUT STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d40_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w191_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (190 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (190 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w192_d10_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (191 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (191 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_flow_caCeG IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gradienDeQ IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gradienEe0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gradienFfa IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gradienGfk IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_outer_pHfu IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_tensor_IfE IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_tensor_JfO IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        frames_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        outputs : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component optical_flow_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    optical_flow_control_s_axi_U : component optical_flow_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        frames_V => frames_V,
        outputs => outputs);

    optical_flow_gmem0_m_axi_U : component optical_flow_gmem0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARADDR,
        I_ARID => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARID,
        I_ARLEN => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLEN,
        I_ARSIZE => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARSIZE,
        I_ARLOCK => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLOCK,
        I_ARCACHE => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARCACHE,
        I_ARQOS => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARQOS,
        I_ARPROT => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARPROT,
        I_ARUSER => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARUSER,
        I_ARBURST => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARBURST,
        I_ARREGION => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv64_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv8_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    optical_flow_gmem1_m_axi_U : component optical_flow_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => flow_calc_U0_m_axi_outputs_AWVALID,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => flow_calc_U0_m_axi_outputs_AWADDR,
        I_AWID => flow_calc_U0_m_axi_outputs_AWID,
        I_AWLEN => flow_calc_U0_m_axi_outputs_AWLEN,
        I_AWSIZE => flow_calc_U0_m_axi_outputs_AWSIZE,
        I_AWLOCK => flow_calc_U0_m_axi_outputs_AWLOCK,
        I_AWCACHE => flow_calc_U0_m_axi_outputs_AWCACHE,
        I_AWQOS => flow_calc_U0_m_axi_outputs_AWQOS,
        I_AWPROT => flow_calc_U0_m_axi_outputs_AWPROT,
        I_AWUSER => flow_calc_U0_m_axi_outputs_AWUSER,
        I_AWBURST => flow_calc_U0_m_axi_outputs_AWBURST,
        I_AWREGION => flow_calc_U0_m_axi_outputs_AWREGION,
        I_WVALID => flow_calc_U0_m_axi_outputs_WVALID,
        I_WREADY => gmem1_WREADY,
        I_WDATA => flow_calc_U0_m_axi_outputs_WDATA,
        I_WID => flow_calc_U0_m_axi_outputs_WID,
        I_WUSER => flow_calc_U0_m_axi_outputs_WUSER,
        I_WLAST => flow_calc_U0_m_axi_outputs_WLAST,
        I_WSTRB => flow_calc_U0_m_axi_outputs_WSTRB,
        I_BVALID => gmem1_BVALID,
        I_BREADY => flow_calc_U0_m_axi_outputs_BREADY,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    optical_flow_entry12_U0 : component optical_flow_entry12
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => optical_flow_entry12_U0_ap_start,
        start_full_n => start_for_flow_calc_U0_full_n,
        ap_done => optical_flow_entry12_U0_ap_done,
        ap_continue => optical_flow_entry12_U0_ap_continue,
        ap_idle => optical_flow_entry12_U0_ap_idle,
        ap_ready => optical_flow_entry12_U0_ap_ready,
        start_out => optical_flow_entry12_U0_start_out,
        start_write => optical_flow_entry12_U0_start_write,
        frames_V => frames_V,
        outputs => outputs,
        frames_V_out_din => optical_flow_entry12_U0_frames_V_out_din,
        frames_V_out_full_n => frames_V_c_full_n,
        frames_V_out_write => optical_flow_entry12_U0_frames_V_out_write,
        outputs_out_din => optical_flow_entry12_U0_outputs_out_din,
        outputs_out_full_n => outputs_c_full_n,
        outputs_out_write => optical_flow_entry12_U0_outputs_out_write);

    Loop_FRAMES_CP_OUTER_U0 : component Loop_FRAMES_CP_OUTER
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_FRAMES_CP_OUTER_U0_ap_start,
        start_full_n => Loop_FRAMES_CP_OUTER_U0_start_full_n,
        ap_done => Loop_FRAMES_CP_OUTER_U0_ap_done,
        ap_continue => Loop_FRAMES_CP_OUTER_U0_ap_continue,
        ap_idle => Loop_FRAMES_CP_OUTER_U0_ap_idle,
        ap_ready => Loop_FRAMES_CP_OUTER_U0_ap_ready,
        start_out => Loop_FRAMES_CP_OUTER_U0_start_out,
        start_write => Loop_FRAMES_CP_OUTER_U0_start_write,
        m_axi_frames_V_AWVALID => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWVALID,
        m_axi_frames_V_AWREADY => ap_const_logic_0,
        m_axi_frames_V_AWADDR => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWADDR,
        m_axi_frames_V_AWID => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWID,
        m_axi_frames_V_AWLEN => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLEN,
        m_axi_frames_V_AWSIZE => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWSIZE,
        m_axi_frames_V_AWBURST => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWBURST,
        m_axi_frames_V_AWLOCK => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWLOCK,
        m_axi_frames_V_AWCACHE => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWCACHE,
        m_axi_frames_V_AWPROT => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWPROT,
        m_axi_frames_V_AWQOS => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWQOS,
        m_axi_frames_V_AWREGION => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWREGION,
        m_axi_frames_V_AWUSER => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_AWUSER,
        m_axi_frames_V_WVALID => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WVALID,
        m_axi_frames_V_WREADY => ap_const_logic_0,
        m_axi_frames_V_WDATA => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WDATA,
        m_axi_frames_V_WSTRB => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WSTRB,
        m_axi_frames_V_WLAST => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WLAST,
        m_axi_frames_V_WID => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WID,
        m_axi_frames_V_WUSER => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_WUSER,
        m_axi_frames_V_ARVALID => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARVALID,
        m_axi_frames_V_ARREADY => gmem0_ARREADY,
        m_axi_frames_V_ARADDR => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARADDR,
        m_axi_frames_V_ARID => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARID,
        m_axi_frames_V_ARLEN => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLEN,
        m_axi_frames_V_ARSIZE => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARSIZE,
        m_axi_frames_V_ARBURST => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARBURST,
        m_axi_frames_V_ARLOCK => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARLOCK,
        m_axi_frames_V_ARCACHE => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARCACHE,
        m_axi_frames_V_ARPROT => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARPROT,
        m_axi_frames_V_ARQOS => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARQOS,
        m_axi_frames_V_ARREGION => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARREGION,
        m_axi_frames_V_ARUSER => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_ARUSER,
        m_axi_frames_V_RVALID => gmem0_RVALID,
        m_axi_frames_V_RREADY => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_RREADY,
        m_axi_frames_V_RDATA => gmem0_RDATA,
        m_axi_frames_V_RLAST => gmem0_RLAST,
        m_axi_frames_V_RID => gmem0_RID,
        m_axi_frames_V_RUSER => gmem0_RUSER,
        m_axi_frames_V_RRESP => gmem0_RRESP,
        m_axi_frames_V_BVALID => ap_const_logic_0,
        m_axi_frames_V_BREADY => Loop_FRAMES_CP_OUTER_U0_m_axi_frames_V_BREADY,
        m_axi_frames_V_BRESP => ap_const_lv2_0,
        m_axi_frames_V_BID => ap_const_lv1_0,
        m_axi_frames_V_BUSER => ap_const_lv1_0,
        frames_V_offset_dout => frames_V_c_dout,
        frames_V_offset_empty_n => frames_V_c_empty_n,
        frames_V_offset_read => Loop_FRAMES_CP_OUTER_U0_frames_V_offset_read,
        frame1_a_V_din => Loop_FRAMES_CP_OUTER_U0_frame1_a_V_din,
        frame1_a_V_full_n => frame1_a_V_full_n,
        frame1_a_V_write => Loop_FRAMES_CP_OUTER_U0_frame1_a_V_write,
        frame2_a_V_din => Loop_FRAMES_CP_OUTER_U0_frame2_a_V_din,
        frame2_a_V_full_n => frame2_a_V_full_n,
        frame2_a_V_write => Loop_FRAMES_CP_OUTER_U0_frame2_a_V_write,
        frame3_a_V_din => Loop_FRAMES_CP_OUTER_U0_frame3_a_V_din,
        frame3_a_V_full_n => frame3_a_V_full_n,
        frame3_a_V_write => Loop_FRAMES_CP_OUTER_U0_frame3_a_V_write,
        frame3_b_V_din => Loop_FRAMES_CP_OUTER_U0_frame3_b_V_din,
        frame3_b_V_full_n => frame3_b_V_full_n,
        frame3_b_V_write => Loop_FRAMES_CP_OUTER_U0_frame3_b_V_write,
        frame4_a_V_din => Loop_FRAMES_CP_OUTER_U0_frame4_a_V_din,
        frame4_a_V_full_n => frame4_a_V_full_n,
        frame4_a_V_write => Loop_FRAMES_CP_OUTER_U0_frame4_a_V_write,
        frame5_a_V_din => Loop_FRAMES_CP_OUTER_U0_frame5_a_V_din,
        frame5_a_V_full_n => frame5_a_V_full_n,
        frame5_a_V_write => Loop_FRAMES_CP_OUTER_U0_frame5_a_V_write);

    gradient_xy_calc_U0 : component gradient_xy_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gradient_xy_calc_U0_ap_start,
        start_full_n => start_for_gradient_weight_y_U0_full_n,
        ap_done => gradient_xy_calc_U0_ap_done,
        ap_continue => gradient_xy_calc_U0_ap_continue,
        ap_idle => gradient_xy_calc_U0_ap_idle,
        ap_ready => gradient_xy_calc_U0_ap_ready,
        start_out => gradient_xy_calc_U0_start_out,
        start_write => gradient_xy_calc_U0_start_write,
        frame3_a_V_dout => frame3_a_V_dout,
        frame3_a_V_empty_n => frame3_a_V_empty_n,
        frame3_a_V_read => gradient_xy_calc_U0_frame3_a_V_read,
        gradient_x_V_din => gradient_xy_calc_U0_gradient_x_V_din,
        gradient_x_V_full_n => gradient_x_V_full_n,
        gradient_x_V_write => gradient_xy_calc_U0_gradient_x_V_write,
        gradient_y_V_din => gradient_xy_calc_U0_gradient_y_V_din,
        gradient_y_V_full_n => gradient_y_V_full_n,
        gradient_y_V_write => gradient_xy_calc_U0_gradient_y_V_write);

    gradient_z_calc_U0 : component gradient_z_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gradient_z_calc_U0_ap_start,
        ap_done => gradient_z_calc_U0_ap_done,
        ap_continue => gradient_z_calc_U0_ap_continue,
        ap_idle => gradient_z_calc_U0_ap_idle,
        ap_ready => gradient_z_calc_U0_ap_ready,
        frame1_a_V_dout => frame1_a_V_dout,
        frame1_a_V_empty_n => frame1_a_V_empty_n,
        frame1_a_V_read => gradient_z_calc_U0_frame1_a_V_read,
        frame2_a_V_dout => frame2_a_V_dout,
        frame2_a_V_empty_n => frame2_a_V_empty_n,
        frame2_a_V_read => gradient_z_calc_U0_frame2_a_V_read,
        frame3_b_V_dout => frame3_b_V_dout,
        frame3_b_V_empty_n => frame3_b_V_empty_n,
        frame3_b_V_read => gradient_z_calc_U0_frame3_b_V_read,
        frame4_a_V_dout => frame4_a_V_dout,
        frame4_a_V_empty_n => frame4_a_V_empty_n,
        frame4_a_V_read => gradient_z_calc_U0_frame4_a_V_read,
        frame5_a_V_dout => frame5_a_V_dout,
        frame5_a_V_empty_n => frame5_a_V_empty_n,
        frame5_a_V_read => gradient_z_calc_U0_frame5_a_V_read,
        gradient_z_V_din => gradient_z_calc_U0_gradient_z_V_din,
        gradient_z_V_full_n => gradient_z_V_full_n,
        gradient_z_V_write => gradient_z_calc_U0_gradient_z_V_write);

    gradient_weight_y_U0 : component gradient_weight_y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gradient_weight_y_U0_ap_start,
        start_full_n => start_for_gradient_weight_x_U0_full_n,
        ap_done => gradient_weight_y_U0_ap_done,
        ap_continue => gradient_weight_y_U0_ap_continue,
        ap_idle => gradient_weight_y_U0_ap_idle,
        ap_ready => gradient_weight_y_U0_ap_ready,
        start_out => gradient_weight_y_U0_start_out,
        start_write => gradient_weight_y_U0_start_write,
        gradient_x_V_dout => gradient_x_V_dout,
        gradient_x_V_empty_n => gradient_x_V_empty_n,
        gradient_x_V_read => gradient_weight_y_U0_gradient_x_V_read,
        gradient_y_V_dout => gradient_y_V_dout,
        gradient_y_V_empty_n => gradient_y_V_empty_n,
        gradient_y_V_read => gradient_weight_y_U0_gradient_y_V_read,
        gradient_z_V_dout => gradient_z_V_dout,
        gradient_z_V_empty_n => gradient_z_V_empty_n,
        gradient_z_V_read => gradient_weight_y_U0_gradient_z_V_read,
        y_filtered_x_V_din => gradient_weight_y_U0_y_filtered_x_V_din,
        y_filtered_x_V_full_n => y_filtered_x_V_full_n,
        y_filtered_x_V_write => gradient_weight_y_U0_y_filtered_x_V_write,
        y_filtered_y_V_din => gradient_weight_y_U0_y_filtered_y_V_din,
        y_filtered_y_V_full_n => y_filtered_y_V_full_n,
        y_filtered_y_V_write => gradient_weight_y_U0_y_filtered_y_V_write,
        y_filtered_z_V_din => gradient_weight_y_U0_y_filtered_z_V_din,
        y_filtered_z_V_full_n => y_filtered_z_V_full_n,
        y_filtered_z_V_write => gradient_weight_y_U0_y_filtered_z_V_write);

    gradient_weight_x_U0 : component gradient_weight_x
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gradient_weight_x_U0_ap_start,
        start_full_n => start_for_outer_product_U0_full_n,
        ap_done => gradient_weight_x_U0_ap_done,
        ap_continue => gradient_weight_x_U0_ap_continue,
        ap_idle => gradient_weight_x_U0_ap_idle,
        ap_ready => gradient_weight_x_U0_ap_ready,
        start_out => gradient_weight_x_U0_start_out,
        start_write => gradient_weight_x_U0_start_write,
        y_filtered_x_V_dout => y_filtered_x_V_dout,
        y_filtered_x_V_empty_n => y_filtered_x_V_empty_n,
        y_filtered_x_V_read => gradient_weight_x_U0_y_filtered_x_V_read,
        y_filtered_y_V_dout => y_filtered_y_V_dout,
        y_filtered_y_V_empty_n => y_filtered_y_V_empty_n,
        y_filtered_y_V_read => gradient_weight_x_U0_y_filtered_y_V_read,
        y_filtered_z_V_dout => y_filtered_z_V_dout,
        y_filtered_z_V_empty_n => y_filtered_z_V_empty_n,
        y_filtered_z_V_read => gradient_weight_x_U0_y_filtered_z_V_read,
        filtered_gradient_x_s_din => gradient_weight_x_U0_filtered_gradient_x_s_din,
        filtered_gradient_x_s_full_n => filtered_gradient_x_s_full_n,
        filtered_gradient_x_s_write => gradient_weight_x_U0_filtered_gradient_x_s_write,
        filtered_gradient_y_s_din => gradient_weight_x_U0_filtered_gradient_y_s_din,
        filtered_gradient_y_s_full_n => filtered_gradient_y_s_full_n,
        filtered_gradient_y_s_write => gradient_weight_x_U0_filtered_gradient_y_s_write,
        filtered_gradient_z_s_din => gradient_weight_x_U0_filtered_gradient_z_s_din,
        filtered_gradient_z_s_full_n => filtered_gradient_z_s_full_n,
        filtered_gradient_z_s_write => gradient_weight_x_U0_filtered_gradient_z_s_write);

    outer_product_U0 : component outer_product
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => outer_product_U0_ap_start,
        start_full_n => start_for_tensor_weight_y_U0_full_n,
        ap_done => outer_product_U0_ap_done,
        ap_continue => outer_product_U0_ap_continue,
        ap_idle => outer_product_U0_ap_idle,
        ap_ready => outer_product_U0_ap_ready,
        start_out => outer_product_U0_start_out,
        start_write => outer_product_U0_start_write,
        filtered_gradient_x_s_dout => filtered_gradient_x_s_dout,
        filtered_gradient_x_s_empty_n => filtered_gradient_x_s_empty_n,
        filtered_gradient_x_s_read => outer_product_U0_filtered_gradient_x_s_read,
        filtered_gradient_y_s_dout => filtered_gradient_y_s_dout,
        filtered_gradient_y_s_empty_n => filtered_gradient_y_s_empty_n,
        filtered_gradient_y_s_read => outer_product_U0_filtered_gradient_y_s_read,
        filtered_gradient_z_s_dout => filtered_gradient_z_s_dout,
        filtered_gradient_z_s_empty_n => filtered_gradient_z_s_empty_n,
        filtered_gradient_z_s_read => outer_product_U0_filtered_gradient_z_s_read,
        out_product_val_V_din => outer_product_U0_out_product_val_V_din,
        out_product_val_V_full_n => out_product_val_V_full_n,
        out_product_val_V_write => outer_product_U0_out_product_val_V_write);

    tensor_weight_y_U0 : component tensor_weight_y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tensor_weight_y_U0_ap_start,
        start_full_n => start_for_tensor_weight_x_U0_full_n,
        ap_done => tensor_weight_y_U0_ap_done,
        ap_continue => tensor_weight_y_U0_ap_continue,
        ap_idle => tensor_weight_y_U0_ap_idle,
        ap_ready => tensor_weight_y_U0_ap_ready,
        start_out => tensor_weight_y_U0_start_out,
        start_write => tensor_weight_y_U0_start_write,
        out_product_val_V_dout => out_product_val_V_dout,
        out_product_val_V_empty_n => out_product_val_V_empty_n,
        out_product_val_V_read => tensor_weight_y_U0_out_product_val_V_read,
        tensor_y_val_V_din => tensor_weight_y_U0_tensor_y_val_V_din,
        tensor_y_val_V_full_n => tensor_y_val_V_full_n,
        tensor_y_val_V_write => tensor_weight_y_U0_tensor_y_val_V_write);

    tensor_weight_x_U0 : component tensor_weight_x
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tensor_weight_x_U0_ap_start,
        ap_done => tensor_weight_x_U0_ap_done,
        ap_continue => tensor_weight_x_U0_ap_continue,
        ap_idle => tensor_weight_x_U0_ap_idle,
        ap_ready => tensor_weight_x_U0_ap_ready,
        tensor_y_val_V_dout => tensor_y_val_V_dout,
        tensor_y_val_V_empty_n => tensor_y_val_V_empty_n,
        tensor_y_val_V_read => tensor_weight_x_U0_tensor_y_val_V_read,
        tensor_val_V_din => tensor_weight_x_U0_tensor_val_V_din,
        tensor_val_V_full_n => tensor_val_V_full_n,
        tensor_val_V_write => tensor_weight_x_U0_tensor_val_V_write);

    flow_calc_U0 : component flow_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => flow_calc_U0_ap_start,
        ap_done => flow_calc_U0_ap_done,
        ap_continue => flow_calc_U0_ap_continue,
        ap_idle => flow_calc_U0_ap_idle,
        ap_ready => flow_calc_U0_ap_ready,
        m_axi_outputs_AWVALID => flow_calc_U0_m_axi_outputs_AWVALID,
        m_axi_outputs_AWREADY => gmem1_AWREADY,
        m_axi_outputs_AWADDR => flow_calc_U0_m_axi_outputs_AWADDR,
        m_axi_outputs_AWID => flow_calc_U0_m_axi_outputs_AWID,
        m_axi_outputs_AWLEN => flow_calc_U0_m_axi_outputs_AWLEN,
        m_axi_outputs_AWSIZE => flow_calc_U0_m_axi_outputs_AWSIZE,
        m_axi_outputs_AWBURST => flow_calc_U0_m_axi_outputs_AWBURST,
        m_axi_outputs_AWLOCK => flow_calc_U0_m_axi_outputs_AWLOCK,
        m_axi_outputs_AWCACHE => flow_calc_U0_m_axi_outputs_AWCACHE,
        m_axi_outputs_AWPROT => flow_calc_U0_m_axi_outputs_AWPROT,
        m_axi_outputs_AWQOS => flow_calc_U0_m_axi_outputs_AWQOS,
        m_axi_outputs_AWREGION => flow_calc_U0_m_axi_outputs_AWREGION,
        m_axi_outputs_AWUSER => flow_calc_U0_m_axi_outputs_AWUSER,
        m_axi_outputs_WVALID => flow_calc_U0_m_axi_outputs_WVALID,
        m_axi_outputs_WREADY => gmem1_WREADY,
        m_axi_outputs_WDATA => flow_calc_U0_m_axi_outputs_WDATA,
        m_axi_outputs_WSTRB => flow_calc_U0_m_axi_outputs_WSTRB,
        m_axi_outputs_WLAST => flow_calc_U0_m_axi_outputs_WLAST,
        m_axi_outputs_WID => flow_calc_U0_m_axi_outputs_WID,
        m_axi_outputs_WUSER => flow_calc_U0_m_axi_outputs_WUSER,
        m_axi_outputs_ARVALID => flow_calc_U0_m_axi_outputs_ARVALID,
        m_axi_outputs_ARREADY => ap_const_logic_0,
        m_axi_outputs_ARADDR => flow_calc_U0_m_axi_outputs_ARADDR,
        m_axi_outputs_ARID => flow_calc_U0_m_axi_outputs_ARID,
        m_axi_outputs_ARLEN => flow_calc_U0_m_axi_outputs_ARLEN,
        m_axi_outputs_ARSIZE => flow_calc_U0_m_axi_outputs_ARSIZE,
        m_axi_outputs_ARBURST => flow_calc_U0_m_axi_outputs_ARBURST,
        m_axi_outputs_ARLOCK => flow_calc_U0_m_axi_outputs_ARLOCK,
        m_axi_outputs_ARCACHE => flow_calc_U0_m_axi_outputs_ARCACHE,
        m_axi_outputs_ARPROT => flow_calc_U0_m_axi_outputs_ARPROT,
        m_axi_outputs_ARQOS => flow_calc_U0_m_axi_outputs_ARQOS,
        m_axi_outputs_ARREGION => flow_calc_U0_m_axi_outputs_ARREGION,
        m_axi_outputs_ARUSER => flow_calc_U0_m_axi_outputs_ARUSER,
        m_axi_outputs_RVALID => ap_const_logic_0,
        m_axi_outputs_RREADY => flow_calc_U0_m_axi_outputs_RREADY,
        m_axi_outputs_RDATA => ap_const_lv64_0,
        m_axi_outputs_RLAST => ap_const_logic_0,
        m_axi_outputs_RID => ap_const_lv1_0,
        m_axi_outputs_RUSER => ap_const_lv1_0,
        m_axi_outputs_RRESP => ap_const_lv2_0,
        m_axi_outputs_BVALID => gmem1_BVALID,
        m_axi_outputs_BREADY => flow_calc_U0_m_axi_outputs_BREADY,
        m_axi_outputs_BRESP => gmem1_BRESP,
        m_axi_outputs_BID => gmem1_BID,
        m_axi_outputs_BUSER => gmem1_BUSER,
        outputs_offset_dout => outputs_c_dout,
        outputs_offset_empty_n => outputs_c_empty_n,
        outputs_offset_read => flow_calc_U0_outputs_offset_read,
        tensor_val_V_dout => tensor_val_V_dout,
        tensor_val_V_empty_n => tensor_val_V_empty_n,
        tensor_val_V_read => flow_calc_U0_tensor_val_V_read);

    frames_V_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => optical_flow_entry12_U0_frames_V_out_din,
        if_full_n => frames_V_c_full_n,
        if_write => optical_flow_entry12_U0_frames_V_out_write,
        if_dout => frames_V_c_dout,
        if_empty_n => frames_V_c_empty_n,
        if_read => Loop_FRAMES_CP_OUTER_U0_frames_V_offset_read);

    outputs_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => optical_flow_entry12_U0_outputs_out_din,
        if_full_n => outputs_c_full_n,
        if_write => optical_flow_entry12_U0_outputs_out_write,
        if_dout => outputs_c_dout,
        if_empty_n => outputs_c_empty_n,
        if_read => flow_calc_U0_outputs_offset_read);

    frame1_a_V_U : component fifo_w8_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame1_a_V_din,
        if_full_n => frame1_a_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame1_a_V_write,
        if_dout => frame1_a_V_dout,
        if_empty_n => frame1_a_V_empty_n,
        if_read => gradient_z_calc_U0_frame1_a_V_read);

    frame2_a_V_U : component fifo_w8_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame2_a_V_din,
        if_full_n => frame2_a_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame2_a_V_write,
        if_dout => frame2_a_V_dout,
        if_empty_n => frame2_a_V_empty_n,
        if_read => gradient_z_calc_U0_frame2_a_V_read);

    frame3_a_V_U : component fifo_w8_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame3_a_V_din,
        if_full_n => frame3_a_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame3_a_V_write,
        if_dout => frame3_a_V_dout,
        if_empty_n => frame3_a_V_empty_n,
        if_read => gradient_xy_calc_U0_frame3_a_V_read);

    frame3_b_V_U : component fifo_w8_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame3_b_V_din,
        if_full_n => frame3_b_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame3_b_V_write,
        if_dout => frame3_b_V_dout,
        if_empty_n => frame3_b_V_empty_n,
        if_read => gradient_z_calc_U0_frame3_b_V_read);

    frame4_a_V_U : component fifo_w8_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame4_a_V_din,
        if_full_n => frame4_a_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame4_a_V_write,
        if_dout => frame4_a_V_dout,
        if_empty_n => frame4_a_V_empty_n,
        if_read => gradient_z_calc_U0_frame4_a_V_read);

    frame5_a_V_U : component fifo_w8_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame5_a_V_din,
        if_full_n => frame5_a_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame5_a_V_write,
        if_dout => frame5_a_V_dout,
        if_empty_n => frame5_a_V_empty_n,
        if_read => gradient_z_calc_U0_frame5_a_V_read);

    gradient_x_V_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_xy_calc_U0_gradient_x_V_din,
        if_full_n => gradient_x_V_full_n,
        if_write => gradient_xy_calc_U0_gradient_x_V_write,
        if_dout => gradient_x_V_dout,
        if_empty_n => gradient_x_V_empty_n,
        if_read => gradient_weight_y_U0_gradient_x_V_read);

    gradient_y_V_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_xy_calc_U0_gradient_y_V_din,
        if_full_n => gradient_y_V_full_n,
        if_write => gradient_xy_calc_U0_gradient_y_V_write,
        if_dout => gradient_y_V_dout,
        if_empty_n => gradient_y_V_empty_n,
        if_read => gradient_weight_y_U0_gradient_y_V_read);

    gradient_z_V_U : component fifo_w32_d40_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_z_calc_U0_gradient_z_V_din,
        if_full_n => gradient_z_V_full_n,
        if_write => gradient_z_calc_U0_gradient_z_V_write,
        if_dout => gradient_z_V_dout,
        if_empty_n => gradient_z_V_empty_n,
        if_read => gradient_weight_y_U0_gradient_z_V_read);

    y_filtered_x_V_U : component fifo_w1_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_y_U0_y_filtered_x_V_din,
        if_full_n => y_filtered_x_V_full_n,
        if_write => gradient_weight_y_U0_y_filtered_x_V_write,
        if_dout => y_filtered_x_V_dout,
        if_empty_n => y_filtered_x_V_empty_n,
        if_read => gradient_weight_x_U0_y_filtered_x_V_read);

    y_filtered_y_V_U : component fifo_w1_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_y_U0_y_filtered_y_V_din,
        if_full_n => y_filtered_y_V_full_n,
        if_write => gradient_weight_y_U0_y_filtered_y_V_write,
        if_dout => y_filtered_y_V_dout,
        if_empty_n => y_filtered_y_V_empty_n,
        if_read => gradient_weight_x_U0_y_filtered_y_V_read);

    y_filtered_z_V_U : component fifo_w1_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_y_U0_y_filtered_z_V_din,
        if_full_n => y_filtered_z_V_full_n,
        if_write => gradient_weight_y_U0_y_filtered_z_V_write,
        if_dout => y_filtered_z_V_dout,
        if_empty_n => y_filtered_z_V_empty_n,
        if_read => gradient_weight_x_U0_y_filtered_z_V_read);

    filtered_gradient_x_s_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_x_U0_filtered_gradient_x_s_din,
        if_full_n => filtered_gradient_x_s_full_n,
        if_write => gradient_weight_x_U0_filtered_gradient_x_s_write,
        if_dout => filtered_gradient_x_s_dout,
        if_empty_n => filtered_gradient_x_s_empty_n,
        if_read => outer_product_U0_filtered_gradient_x_s_read);

    filtered_gradient_y_s_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_x_U0_filtered_gradient_y_s_din,
        if_full_n => filtered_gradient_y_s_full_n,
        if_write => gradient_weight_x_U0_filtered_gradient_y_s_write,
        if_dout => filtered_gradient_y_s_dout,
        if_empty_n => filtered_gradient_y_s_empty_n,
        if_read => outer_product_U0_filtered_gradient_y_s_read);

    filtered_gradient_z_s_U : component fifo_w32_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_x_U0_filtered_gradient_z_s_din,
        if_full_n => filtered_gradient_z_s_full_n,
        if_write => gradient_weight_x_U0_filtered_gradient_z_s_write,
        if_dout => filtered_gradient_z_s_dout,
        if_empty_n => filtered_gradient_z_s_empty_n,
        if_read => outer_product_U0_filtered_gradient_z_s_read);

    out_product_val_V_U : component fifo_w191_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => outer_product_U0_out_product_val_V_din,
        if_full_n => out_product_val_V_full_n,
        if_write => outer_product_U0_out_product_val_V_write,
        if_dout => out_product_val_V_dout,
        if_empty_n => out_product_val_V_empty_n,
        if_read => tensor_weight_y_U0_out_product_val_V_read);

    tensor_y_val_V_U : component fifo_w192_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tensor_weight_y_U0_tensor_y_val_V_din,
        if_full_n => tensor_y_val_V_full_n,
        if_write => tensor_weight_y_U0_tensor_y_val_V_write,
        if_dout => tensor_y_val_V_dout,
        if_empty_n => tensor_y_val_V_empty_n,
        if_read => tensor_weight_x_U0_tensor_y_val_V_read);

    tensor_val_V_U : component fifo_w192_d10_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tensor_weight_x_U0_tensor_val_V_din,
        if_full_n => tensor_val_V_full_n,
        if_write => tensor_weight_x_U0_tensor_val_V_write,
        if_dout => tensor_val_V_dout,
        if_empty_n => tensor_val_V_empty_n,
        if_read => flow_calc_U0_tensor_val_V_read);

    start_for_flow_caCeG_U : component start_for_flow_caCeG
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_flow_calc_U0_din,
        if_full_n => start_for_flow_calc_U0_full_n,
        if_write => optical_flow_entry12_U0_start_write,
        if_dout => start_for_flow_calc_U0_dout,
        if_empty_n => start_for_flow_calc_U0_empty_n,
        if_read => flow_calc_U0_ap_ready);

    start_for_gradienDeQ_U : component start_for_gradienDeQ
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_xy_calc_U0_din,
        if_full_n => start_for_gradient_xy_calc_U0_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_start_write,
        if_dout => start_for_gradient_xy_calc_U0_dout,
        if_empty_n => start_for_gradient_xy_calc_U0_empty_n,
        if_read => gradient_xy_calc_U0_ap_ready);

    start_for_gradienEe0_U : component start_for_gradienEe0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_z_calc_U0_din,
        if_full_n => start_for_gradient_z_calc_U0_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_start_write,
        if_dout => start_for_gradient_z_calc_U0_dout,
        if_empty_n => start_for_gradient_z_calc_U0_empty_n,
        if_read => gradient_z_calc_U0_ap_ready);

    start_for_gradienFfa_U : component start_for_gradienFfa
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_weight_y_U0_din,
        if_full_n => start_for_gradient_weight_y_U0_full_n,
        if_write => gradient_xy_calc_U0_start_write,
        if_dout => start_for_gradient_weight_y_U0_dout,
        if_empty_n => start_for_gradient_weight_y_U0_empty_n,
        if_read => gradient_weight_y_U0_ap_ready);

    start_for_gradienGfk_U : component start_for_gradienGfk
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_weight_x_U0_din,
        if_full_n => start_for_gradient_weight_x_U0_full_n,
        if_write => gradient_weight_y_U0_start_write,
        if_dout => start_for_gradient_weight_x_U0_dout,
        if_empty_n => start_for_gradient_weight_x_U0_empty_n,
        if_read => gradient_weight_x_U0_ap_ready);

    start_for_outer_pHfu_U : component start_for_outer_pHfu
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_outer_product_U0_din,
        if_full_n => start_for_outer_product_U0_full_n,
        if_write => gradient_weight_x_U0_start_write,
        if_dout => start_for_outer_product_U0_dout,
        if_empty_n => start_for_outer_product_U0_empty_n,
        if_read => outer_product_U0_ap_ready);

    start_for_tensor_IfE_U : component start_for_tensor_IfE
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_tensor_weight_y_U0_din,
        if_full_n => start_for_tensor_weight_y_U0_full_n,
        if_write => outer_product_U0_start_write,
        if_dout => start_for_tensor_weight_y_U0_dout,
        if_empty_n => start_for_tensor_weight_y_U0_empty_n,
        if_read => tensor_weight_y_U0_ap_ready);

    start_for_tensor_JfO_U : component start_for_tensor_JfO
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_tensor_weight_x_U0_din,
        if_full_n => start_for_tensor_weight_x_U0_full_n,
        if_write => tensor_weight_y_U0_start_write,
        if_dout => start_for_tensor_weight_x_U0_dout,
        if_empty_n => start_for_tensor_weight_x_U0_empty_n,
        if_read => tensor_weight_x_U0_ap_ready);





    ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready <= ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_optical_flow_entry12_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_optical_flow_entry12_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_optical_flow_entry12_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_optical_flow_entry12_U0_ap_ready <= ap_sync_optical_flow_entry12_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Loop_FRAMES_CP_OUTER_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_FRAMES_CP_OUTER_U0_ap_ready))) then 
                Loop_FRAMES_CP_OUTER_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_FRAMES_CP_OUTER_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_FRAMES_CP_OUTER_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_FRAMES_CP_OUTER_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_FRAMES_CP_OUTER_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    optical_flow_entry12_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (optical_flow_entry12_U0_ap_ready = ap_const_logic_0))) then 
                optical_flow_entry12_U0_ap_ready_count <= std_logic_vector(unsigned(optical_flow_entry12_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((optical_flow_entry12_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                optical_flow_entry12_U0_ap_ready_count <= std_logic_vector(unsigned(optical_flow_entry12_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Loop_FRAMES_CP_OUTER_U0_ap_continue <= ap_const_logic_1;
    Loop_FRAMES_CP_OUTER_U0_ap_start <= ((ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_FRAMES_CP_OUTER_U0_start_full_n <= (start_for_gradient_z_calc_U0_full_n and start_for_gradient_xy_calc_U0_full_n);
    ap_done <= flow_calc_U0_ap_done;
    ap_idle <= (tensor_weight_y_U0_ap_idle and tensor_weight_x_U0_ap_idle and outer_product_U0_ap_idle and optical_flow_entry12_U0_ap_idle and gradient_z_calc_U0_ap_idle and gradient_xy_calc_U0_ap_idle and gradient_weight_y_U0_ap_idle and gradient_weight_x_U0_ap_idle and flow_calc_U0_ap_idle and Loop_FRAMES_CP_OUTER_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready <= (ap_sync_reg_Loop_FRAMES_CP_OUTER_U0_ap_ready or Loop_FRAMES_CP_OUTER_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= flow_calc_U0_ap_done;
    ap_sync_optical_flow_entry12_U0_ap_ready <= (optical_flow_entry12_U0_ap_ready or ap_sync_reg_optical_flow_entry12_U0_ap_ready);
    ap_sync_ready <= (ap_sync_optical_flow_entry12_U0_ap_ready and ap_sync_Loop_FRAMES_CP_OUTER_U0_ap_ready);
    flow_calc_U0_ap_continue <= ap_const_logic_1;
    flow_calc_U0_ap_start <= start_for_flow_calc_U0_empty_n;
    flow_calc_U0_start_full_n <= ap_const_logic_1;
    flow_calc_U0_start_write <= ap_const_logic_0;
    gradient_weight_x_U0_ap_continue <= ap_const_logic_1;
    gradient_weight_x_U0_ap_start <= start_for_gradient_weight_x_U0_empty_n;
    gradient_weight_y_U0_ap_continue <= ap_const_logic_1;
    gradient_weight_y_U0_ap_start <= start_for_gradient_weight_y_U0_empty_n;
    gradient_xy_calc_U0_ap_continue <= ap_const_logic_1;
    gradient_xy_calc_U0_ap_start <= start_for_gradient_xy_calc_U0_empty_n;
    gradient_z_calc_U0_ap_continue <= ap_const_logic_1;
    gradient_z_calc_U0_ap_start <= start_for_gradient_z_calc_U0_empty_n;
    gradient_z_calc_U0_start_full_n <= ap_const_logic_1;
    gradient_z_calc_U0_start_write <= ap_const_logic_0;
    optical_flow_entry12_U0_ap_continue <= ap_const_logic_1;
    optical_flow_entry12_U0_ap_start <= ((ap_sync_reg_optical_flow_entry12_U0_ap_ready xor ap_const_logic_1) and ap_start);
    outer_product_U0_ap_continue <= ap_const_logic_1;
    outer_product_U0_ap_start <= start_for_outer_product_U0_empty_n;
    start_for_flow_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_weight_x_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_weight_y_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_xy_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_z_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_outer_product_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_tensor_weight_x_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_tensor_weight_y_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tensor_weight_x_U0_ap_continue <= ap_const_logic_1;
    tensor_weight_x_U0_ap_start <= start_for_tensor_weight_x_U0_empty_n;
    tensor_weight_x_U0_start_full_n <= ap_const_logic_1;
    tensor_weight_x_U0_start_write <= ap_const_logic_0;
    tensor_weight_y_U0_ap_continue <= ap_const_logic_1;
    tensor_weight_y_U0_ap_start <= start_for_tensor_weight_y_U0_empty_n;
end behav;
