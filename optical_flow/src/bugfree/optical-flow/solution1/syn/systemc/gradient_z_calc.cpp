// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "gradient_z_calc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gradient_z_calc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic gradient_z_calc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> gradient_z_calc::ap_ST_fsm_state1 = "1";
const sc_lv<3> gradient_z_calc::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> gradient_z_calc::ap_ST_fsm_state6 = "100";
const sc_lv<32> gradient_z_calc::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool gradient_z_calc::ap_const_boolean_1 = true;
const sc_lv<32> gradient_z_calc::ap_const_lv32_1 = "1";
const bool gradient_z_calc::ap_const_boolean_0 = false;
const sc_lv<1> gradient_z_calc::ap_const_lv1_0 = "0";
const sc_lv<1> gradient_z_calc::ap_const_lv1_1 = "1";
const sc_lv<6> gradient_z_calc::ap_const_lv6_0 = "000000";
const sc_lv<6> gradient_z_calc::ap_const_lv6_32 = "110010";
const sc_lv<6> gradient_z_calc::ap_const_lv6_1 = "1";
const sc_lv<3> gradient_z_calc::ap_const_lv3_0 = "000";
const sc_lv<32> gradient_z_calc::ap_const_lv32_C = "1100";
const sc_lv<11> gradient_z_calc::ap_const_lv11_0 = "00000000000";
const sc_lv<57> gradient_z_calc::ap_const_lv57_155555556 = "101010101010101010101010101010110";
const sc_lv<32> gradient_z_calc::ap_const_lv32_24 = "100100";
const sc_lv<32> gradient_z_calc::ap_const_lv32_38 = "111000";
const sc_lv<57> gradient_z_calc::ap_const_lv57_0 = "000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> gradient_z_calc::ap_const_lv32_2 = "10";

gradient_z_calc::gradient_z_calc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_OP1_V_4_cast_fu_176_p1);
    sensitive << ( frame5_a_V_dout );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( frame1_a_V_empty_n );
    sensitive << ( frame2_a_V_empty_n );
    sensitive << ( frame3_b_V_empty_n );
    sensitive << ( frame4_a_V_empty_n );
    sensitive << ( frame5_a_V_empty_n );
    sensitive << ( gradient_z_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_264 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_reg_264_pp0_iter2_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( frame1_a_V_empty_n );
    sensitive << ( frame2_a_V_empty_n );
    sensitive << ( frame3_b_V_empty_n );
    sensitive << ( frame4_a_V_empty_n );
    sensitive << ( frame5_a_V_empty_n );
    sensitive << ( gradient_z_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_264 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_reg_264_pp0_iter2_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( frame1_a_V_empty_n );
    sensitive << ( frame2_a_V_empty_n );
    sensitive << ( frame3_b_V_empty_n );
    sensitive << ( frame4_a_V_empty_n );
    sensitive << ( frame5_a_V_empty_n );
    sensitive << ( gradient_z_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_264 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_reg_264_pp0_iter2_reg );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( frame1_a_V_empty_n );
    sensitive << ( frame2_a_V_empty_n );
    sensitive << ( frame3_b_V_empty_n );
    sensitive << ( frame4_a_V_empty_n );
    sensitive << ( frame5_a_V_empty_n );
    sensitive << ( exitcond_flatten_reg_264 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);
    sensitive << ( gradient_z_V_full_n );
    sensitive << ( exitcond_flatten_reg_264_pp0_iter2_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_120_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_exitcond_flatten_fu_120_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_109 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_frame1_a_V_blk_n);
    sensitive << ( frame1_a_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_264 );

    SC_METHOD(thread_frame1_a_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_264 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_frame2_a_V_blk_n);
    sensitive << ( frame2_a_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_264 );

    SC_METHOD(thread_frame2_a_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_264 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_frame3_b_V_blk_n);
    sensitive << ( frame3_b_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_264 );

    SC_METHOD(thread_frame3_b_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_264 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_frame4_a_V_blk_n);
    sensitive << ( frame4_a_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_264 );

    SC_METHOD(thread_frame4_a_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_264 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_frame5_a_V_blk_n);
    sensitive << ( frame5_a_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_264 );

    SC_METHOD(thread_frame5_a_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_264 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_gradient_z_V_blk_n);
    sensitive << ( gradient_z_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_reg_264_pp0_iter2_reg );

    SC_METHOD(thread_gradient_z_V_din);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_reg_264_pp0_iter2_reg );
    sensitive << ( tmp_27_reg_278_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_22_fu_240_p1 );
    sensitive << ( neg_ti_fu_250_p2 );

    SC_METHOD(thread_gradient_z_V_write);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_reg_264_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_indvar_flatten_next_fu_126_p2);
    sensitive << ( indvar_flatten_reg_109 );

    SC_METHOD(thread_mul_fu_205_p1);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_fu_194_p3 );

    SC_METHOD(thread_mul_fu_205_p2);
    sensitive << ( mul_fu_205_p1 );

    SC_METHOD(thread_neg_mul_fu_221_p2);
    sensitive << ( mul_reg_284 );

    SC_METHOD(thread_neg_ti_fu_250_p2);
    sensitive << ( tmp_23_fu_243_p3 );

    SC_METHOD(thread_p_Val2_1_cast_cast_fu_166_p1);
    sensitive << ( p_Val2_1_fu_158_p3 );

    SC_METHOD(thread_p_Val2_1_fu_158_p3);
    sensitive << ( frame4_a_V_dout );

    SC_METHOD(thread_p_Val2_2_fu_170_p2);
    sensitive << ( p_Val2_1_cast_cast_fu_166_p1 );
    sensitive << ( p_Val2_cast_fu_154_p1 );

    SC_METHOD(thread_p_Val2_3_fu_180_p2);
    sensitive << ( p_Val2_2_fu_170_p2 );
    sensitive << ( OP1_V_4_cast_fu_176_p1 );

    SC_METHOD(thread_p_Val2_cast_fu_154_p1);
    sensitive << ( p_Val2_s_fu_148_p2 );

    SC_METHOD(thread_p_Val2_s_fu_148_p2);
    sensitive << ( tmp_2_cast_fu_144_p1 );
    sensitive << ( p_shl_cast_cast_fu_140_p1 );

    SC_METHOD(thread_p_shl_cast_cast_fu_140_p1);
    sensitive << ( p_shl_fu_132_p3 );

    SC_METHOD(thread_p_shl_fu_132_p3);
    sensitive << ( frame2_a_V_dout );

    SC_METHOD(thread_tmp_22_fu_240_p1);
    sensitive << ( tmp_29_reg_289 );

    SC_METHOD(thread_tmp_23_fu_243_p3);
    sensitive << ( tmp_27_reg_278_pp0_iter2_reg );
    sensitive << ( tmp_s_fu_236_p1 );
    sensitive << ( tmp_22_fu_240_p1 );

    SC_METHOD(thread_tmp_28_fu_226_p4);
    sensitive << ( neg_mul_fu_221_p2 );

    SC_METHOD(thread_tmp_2_cast_fu_144_p1);
    sensitive << ( frame1_a_V_dout );

    SC_METHOD(thread_tmp_fu_194_p3);
    sensitive << ( p_Val2_3_reg_273 );

    SC_METHOD(thread_tmp_s_fu_236_p1);
    sensitive << ( tmp_28_fu_226_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( exitcond_flatten_fu_120_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gradient_z_calc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, frame1_a_V_dout, "(port)frame1_a_V_dout");
    sc_trace(mVcdFile, frame1_a_V_empty_n, "(port)frame1_a_V_empty_n");
    sc_trace(mVcdFile, frame1_a_V_read, "(port)frame1_a_V_read");
    sc_trace(mVcdFile, frame2_a_V_dout, "(port)frame2_a_V_dout");
    sc_trace(mVcdFile, frame2_a_V_empty_n, "(port)frame2_a_V_empty_n");
    sc_trace(mVcdFile, frame2_a_V_read, "(port)frame2_a_V_read");
    sc_trace(mVcdFile, frame3_b_V_dout, "(port)frame3_b_V_dout");
    sc_trace(mVcdFile, frame3_b_V_empty_n, "(port)frame3_b_V_empty_n");
    sc_trace(mVcdFile, frame3_b_V_read, "(port)frame3_b_V_read");
    sc_trace(mVcdFile, frame4_a_V_dout, "(port)frame4_a_V_dout");
    sc_trace(mVcdFile, frame4_a_V_empty_n, "(port)frame4_a_V_empty_n");
    sc_trace(mVcdFile, frame4_a_V_read, "(port)frame4_a_V_read");
    sc_trace(mVcdFile, frame5_a_V_dout, "(port)frame5_a_V_dout");
    sc_trace(mVcdFile, frame5_a_V_empty_n, "(port)frame5_a_V_empty_n");
    sc_trace(mVcdFile, frame5_a_V_read, "(port)frame5_a_V_read");
    sc_trace(mVcdFile, gradient_z_V_din, "(port)gradient_z_V_din");
    sc_trace(mVcdFile, gradient_z_V_full_n, "(port)gradient_z_V_full_n");
    sc_trace(mVcdFile, gradient_z_V_write, "(port)gradient_z_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, frame1_a_V_blk_n, "frame1_a_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_flatten_reg_264, "exitcond_flatten_reg_264");
    sc_trace(mVcdFile, frame2_a_V_blk_n, "frame2_a_V_blk_n");
    sc_trace(mVcdFile, frame3_b_V_blk_n, "frame3_b_V_blk_n");
    sc_trace(mVcdFile, frame4_a_V_blk_n, "frame4_a_V_blk_n");
    sc_trace(mVcdFile, frame5_a_V_blk_n, "frame5_a_V_blk_n");
    sc_trace(mVcdFile, gradient_z_V_blk_n, "gradient_z_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, exitcond_flatten_reg_264_pp0_iter2_reg, "exitcond_flatten_reg_264_pp0_iter2_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_109, "indvar_flatten_reg_109");
    sc_trace(mVcdFile, exitcond_flatten_fu_120_p2, "exitcond_flatten_fu_120_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond_flatten_reg_264_pp0_iter1_reg, "exitcond_flatten_reg_264_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_flatten_next_fu_126_p2, "indvar_flatten_next_fu_126_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, p_Val2_3_fu_180_p2, "p_Val2_3_fu_180_p2");
    sc_trace(mVcdFile, p_Val2_3_reg_273, "p_Val2_3_reg_273");
    sc_trace(mVcdFile, tmp_27_reg_278, "tmp_27_reg_278");
    sc_trace(mVcdFile, tmp_27_reg_278_pp0_iter2_reg, "tmp_27_reg_278_pp0_iter2_reg");
    sc_trace(mVcdFile, mul_fu_205_p2, "mul_fu_205_p2");
    sc_trace(mVcdFile, mul_reg_284, "mul_reg_284");
    sc_trace(mVcdFile, tmp_29_reg_289, "tmp_29_reg_289");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, p_shl_fu_132_p3, "p_shl_fu_132_p3");
    sc_trace(mVcdFile, tmp_2_cast_fu_144_p1, "tmp_2_cast_fu_144_p1");
    sc_trace(mVcdFile, p_shl_cast_cast_fu_140_p1, "p_shl_cast_cast_fu_140_p1");
    sc_trace(mVcdFile, p_Val2_s_fu_148_p2, "p_Val2_s_fu_148_p2");
    sc_trace(mVcdFile, p_Val2_1_fu_158_p3, "p_Val2_1_fu_158_p3");
    sc_trace(mVcdFile, p_Val2_1_cast_cast_fu_166_p1, "p_Val2_1_cast_cast_fu_166_p1");
    sc_trace(mVcdFile, p_Val2_cast_fu_154_p1, "p_Val2_cast_fu_154_p1");
    sc_trace(mVcdFile, p_Val2_2_fu_170_p2, "p_Val2_2_fu_170_p2");
    sc_trace(mVcdFile, OP1_V_4_cast_fu_176_p1, "OP1_V_4_cast_fu_176_p1");
    sc_trace(mVcdFile, tmp_fu_194_p3, "tmp_fu_194_p3");
    sc_trace(mVcdFile, mul_fu_205_p1, "mul_fu_205_p1");
    sc_trace(mVcdFile, neg_mul_fu_221_p2, "neg_mul_fu_221_p2");
    sc_trace(mVcdFile, tmp_28_fu_226_p4, "tmp_28_fu_226_p4");
    sc_trace(mVcdFile, tmp_s_fu_236_p1, "tmp_s_fu_236_p1");
    sc_trace(mVcdFile, tmp_22_fu_240_p1, "tmp_22_fu_240_p1");
    sc_trace(mVcdFile, tmp_23_fu_243_p3, "tmp_23_fu_243_p3");
    sc_trace(mVcdFile, neg_ti_fu_250_p2, "neg_ti_fu_250_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

gradient_z_calc::~gradient_z_calc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void gradient_z_calc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_120_p2.read()))) {
        indvar_flatten_reg_109 = indvar_flatten_next_fu_126_p2.read();
    } else if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        indvar_flatten_reg_109 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_264 = exitcond_flatten_fu_120_p2.read();
        exitcond_flatten_reg_264_pp0_iter1_reg = exitcond_flatten_reg_264.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        exitcond_flatten_reg_264_pp0_iter2_reg = exitcond_flatten_reg_264_pp0_iter1_reg.read();
        tmp_27_reg_278_pp0_iter2_reg = tmp_27_reg_278.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_264_pp0_iter1_reg.read()))) {
        mul_reg_284 = mul_fu_205_p2.read();
        tmp_29_reg_289 = mul_fu_205_p2.read().range(56, 36);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_Val2_3_reg_273 = p_Val2_3_fu_180_p2.read();
        tmp_27_reg_278 = p_Val2_3_fu_180_p2.read().range(12, 12);
    }
}

void gradient_z_calc::thread_OP1_V_4_cast_fu_176_p1() {
    OP1_V_4_cast_fu_176_p1 = esl_zext<13,8>(frame5_a_V_dout.read());
}

void gradient_z_calc::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void gradient_z_calc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void gradient_z_calc::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[2];
}

void gradient_z_calc::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gradient_z_calc::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame1_a_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame2_a_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame3_b_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame4_a_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame5_a_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_264_pp0_iter2_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gradient_z_V_full_n.read())));
}

void gradient_z_calc::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame1_a_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame2_a_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame3_b_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame4_a_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame5_a_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_264_pp0_iter2_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gradient_z_V_full_n.read())));
}

void gradient_z_calc::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame1_a_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame2_a_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame3_b_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame4_a_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, frame5_a_V_empty_n.read())))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_264_pp0_iter2_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gradient_z_V_full_n.read())));
}

void gradient_z_calc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void gradient_z_calc::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gradient_z_calc::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, frame1_a_V_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, frame2_a_V_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, frame3_b_V_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, frame4_a_V_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, frame5_a_V_empty_n.read())));
}

void gradient_z_calc::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void gradient_z_calc::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_264_pp0_iter2_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gradient_z_V_full_n.read()));
}

void gradient_z_calc::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_120_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void gradient_z_calc::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void gradient_z_calc::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void gradient_z_calc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void gradient_z_calc::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void gradient_z_calc::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void gradient_z_calc::thread_exitcond_flatten_fu_120_p2() {
    exitcond_flatten_fu_120_p2 = (!indvar_flatten_reg_109.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_109.read() == ap_const_lv6_32);
}

void gradient_z_calc::thread_frame1_a_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0))) {
        frame1_a_V_blk_n = frame1_a_V_empty_n.read();
    } else {
        frame1_a_V_blk_n = ap_const_logic_1;
    }
}

void gradient_z_calc::thread_frame1_a_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        frame1_a_V_read = ap_const_logic_1;
    } else {
        frame1_a_V_read = ap_const_logic_0;
    }
}

void gradient_z_calc::thread_frame2_a_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0))) {
        frame2_a_V_blk_n = frame2_a_V_empty_n.read();
    } else {
        frame2_a_V_blk_n = ap_const_logic_1;
    }
}

void gradient_z_calc::thread_frame2_a_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        frame2_a_V_read = ap_const_logic_1;
    } else {
        frame2_a_V_read = ap_const_logic_0;
    }
}

void gradient_z_calc::thread_frame3_b_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0))) {
        frame3_b_V_blk_n = frame3_b_V_empty_n.read();
    } else {
        frame3_b_V_blk_n = ap_const_logic_1;
    }
}

void gradient_z_calc::thread_frame3_b_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        frame3_b_V_read = ap_const_logic_1;
    } else {
        frame3_b_V_read = ap_const_logic_0;
    }
}

void gradient_z_calc::thread_frame4_a_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0))) {
        frame4_a_V_blk_n = frame4_a_V_empty_n.read();
    } else {
        frame4_a_V_blk_n = ap_const_logic_1;
    }
}

void gradient_z_calc::thread_frame4_a_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        frame4_a_V_read = ap_const_logic_1;
    } else {
        frame4_a_V_read = ap_const_logic_0;
    }
}

void gradient_z_calc::thread_frame5_a_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0))) {
        frame5_a_V_blk_n = frame5_a_V_empty_n.read();
    } else {
        frame5_a_V_blk_n = ap_const_logic_1;
    }
}

void gradient_z_calc::thread_frame5_a_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_264.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        frame5_a_V_read = ap_const_logic_1;
    } else {
        frame5_a_V_read = ap_const_logic_0;
    }
}

void gradient_z_calc::thread_gradient_z_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_264_pp0_iter2_reg.read()))) {
        gradient_z_V_blk_n = gradient_z_V_full_n.read();
    } else {
        gradient_z_V_blk_n = ap_const_logic_1;
    }
}

void gradient_z_calc::thread_gradient_z_V_din() {
    gradient_z_V_din = (!tmp_27_reg_278_pp0_iter2_reg.read()[0].is_01())? sc_lv<32>(): ((tmp_27_reg_278_pp0_iter2_reg.read()[0].to_bool())? neg_ti_fu_250_p2.read(): tmp_22_fu_240_p1.read());
}

void gradient_z_calc::thread_gradient_z_V_write() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_264_pp0_iter2_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        gradient_z_V_write = ap_const_logic_1;
    } else {
        gradient_z_V_write = ap_const_logic_0;
    }
}

void gradient_z_calc::thread_indvar_flatten_next_fu_126_p2() {
    indvar_flatten_next_fu_126_p2 = (!indvar_flatten_reg_109.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(indvar_flatten_reg_109.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void gradient_z_calc::thread_mul_fu_205_p1() {
    mul_fu_205_p1 = tmp_fu_194_p3.read();
}

void gradient_z_calc::thread_mul_fu_205_p2() {
    mul_fu_205_p2 = (!ap_const_lv57_155555556.is_01() || !mul_fu_205_p1.read().is_01())? sc_lv<57>(): sc_biguint<57>(ap_const_lv57_155555556) * sc_bigint<24>(mul_fu_205_p1.read());
}

void gradient_z_calc::thread_neg_mul_fu_221_p2() {
    neg_mul_fu_221_p2 = (!ap_const_lv57_0.is_01() || !mul_reg_284.read().is_01())? sc_lv<57>(): (sc_biguint<57>(ap_const_lv57_0) - sc_biguint<57>(mul_reg_284.read()));
}

void gradient_z_calc::thread_neg_ti_fu_250_p2() {
    neg_ti_fu_250_p2 = (!ap_const_lv32_0.is_01() || !tmp_23_fu_243_p3.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_23_fu_243_p3.read()));
}

void gradient_z_calc::thread_p_Val2_1_cast_cast_fu_166_p1() {
    p_Val2_1_cast_cast_fu_166_p1 = esl_zext<13,11>(p_Val2_1_fu_158_p3.read());
}

void gradient_z_calc::thread_p_Val2_1_fu_158_p3() {
    p_Val2_1_fu_158_p3 = esl_concat<8,3>(frame4_a_V_dout.read(), ap_const_lv3_0);
}

void gradient_z_calc::thread_p_Val2_2_fu_170_p2() {
    p_Val2_2_fu_170_p2 = (!p_Val2_1_cast_cast_fu_166_p1.read().is_01() || !p_Val2_cast_fu_154_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(p_Val2_1_cast_cast_fu_166_p1.read()) + sc_bigint<13>(p_Val2_cast_fu_154_p1.read()));
}

void gradient_z_calc::thread_p_Val2_3_fu_180_p2() {
    p_Val2_3_fu_180_p2 = (!p_Val2_2_fu_170_p2.read().is_01() || !OP1_V_4_cast_fu_176_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(p_Val2_2_fu_170_p2.read()) - sc_biguint<13>(OP1_V_4_cast_fu_176_p1.read()));
}

void gradient_z_calc::thread_p_Val2_cast_fu_154_p1() {
    p_Val2_cast_fu_154_p1 = esl_sext<13,12>(p_Val2_s_fu_148_p2.read());
}

void gradient_z_calc::thread_p_Val2_s_fu_148_p2() {
    p_Val2_s_fu_148_p2 = (!tmp_2_cast_fu_144_p1.read().is_01() || !p_shl_cast_cast_fu_140_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_2_cast_fu_144_p1.read()) - sc_biguint<12>(p_shl_cast_cast_fu_140_p1.read()));
}

void gradient_z_calc::thread_p_shl_cast_cast_fu_140_p1() {
    p_shl_cast_cast_fu_140_p1 = esl_zext<12,11>(p_shl_fu_132_p3.read());
}

void gradient_z_calc::thread_p_shl_fu_132_p3() {
    p_shl_fu_132_p3 = esl_concat<8,3>(frame2_a_V_dout.read(), ap_const_lv3_0);
}

void gradient_z_calc::thread_tmp_22_fu_240_p1() {
    tmp_22_fu_240_p1 = esl_sext<32,21>(tmp_29_reg_289.read());
}

void gradient_z_calc::thread_tmp_23_fu_243_p3() {
    tmp_23_fu_243_p3 = (!tmp_27_reg_278_pp0_iter2_reg.read()[0].is_01())? sc_lv<32>(): ((tmp_27_reg_278_pp0_iter2_reg.read()[0].to_bool())? tmp_s_fu_236_p1.read(): tmp_22_fu_240_p1.read());
}

void gradient_z_calc::thread_tmp_28_fu_226_p4() {
    tmp_28_fu_226_p4 = neg_mul_fu_221_p2.read().range(56, 36);
}

void gradient_z_calc::thread_tmp_2_cast_fu_144_p1() {
    tmp_2_cast_fu_144_p1 = esl_zext<12,8>(frame1_a_V_dout.read());
}

void gradient_z_calc::thread_tmp_fu_194_p3() {
    tmp_fu_194_p3 = esl_concat<13,11>(p_Val2_3_reg_273.read(), ap_const_lv11_0);
}

void gradient_z_calc::thread_tmp_s_fu_236_p1() {
    tmp_s_fu_236_p1 = esl_sext<32,21>(tmp_28_fu_226_p4.read());
}

void gradient_z_calc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(exitcond_flatten_fu_120_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter2.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) || (esl_seteq<1,1,1>(exitcond_flatten_fu_120_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

