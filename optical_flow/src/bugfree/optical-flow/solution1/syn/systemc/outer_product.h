// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _outer_product_HH_
#define _outer_product_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "optical_flow_mul_yd2.h"

namespace ap_rtl {

struct outer_product : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > filtered_gradient_x_s_dout;
    sc_in< sc_logic > filtered_gradient_x_s_empty_n;
    sc_out< sc_logic > filtered_gradient_x_s_read;
    sc_in< sc_lv<32> > filtered_gradient_y_s_dout;
    sc_in< sc_logic > filtered_gradient_y_s_empty_n;
    sc_out< sc_logic > filtered_gradient_y_s_read;
    sc_in< sc_lv<32> > filtered_gradient_z_s_dout;
    sc_in< sc_logic > filtered_gradient_z_s_empty_n;
    sc_out< sc_logic > filtered_gradient_z_s_read;
    sc_out< sc_lv<191> > out_product_val_V_din;
    sc_in< sc_logic > out_product_val_V_full_n;
    sc_out< sc_logic > out_product_val_V_write;


    // Module declarations
    outer_product(sc_module_name name);
    SC_HAS_PROCESS(outer_product);

    ~outer_product();

    sc_trace_file* mVcdFile;

    optical_flow_mul_yd2<1,1,18,18,36>* optical_flow_mul_yd2_U39;
    optical_flow_mul_yd2<1,1,18,18,36>* optical_flow_mul_yd2_U40;
    optical_flow_mul_yd2<1,1,18,18,36>* optical_flow_mul_yd2_U41;
    optical_flow_mul_yd2<1,1,18,18,36>* optical_flow_mul_yd2_U42;
    optical_flow_mul_yd2<1,1,18,18,36>* optical_flow_mul_yd2_U43;
    optical_flow_mul_yd2<1,1,18,18,36>* optical_flow_mul_yd2_U44;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > filtered_gradient_x_s_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_277;
    sc_signal< sc_logic > filtered_gradient_y_s_blk_n;
    sc_signal< sc_logic > filtered_gradient_z_s_blk_n;
    sc_signal< sc_logic > out_product_val_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_277_pp0_iter1_reg;
    sc_signal< sc_lv<6> > indvar_flatten_reg_85;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_96_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > indvar_flatten_next_fu_102_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<31> > tmp_1_reg_286;
    sc_signal< sc_lv<31> > tmp_4_reg_291;
    sc_signal< sc_lv<31> > tmp_7_reg_296;
    sc_signal< sc_lv<31> > tmp_s_reg_301;
    sc_signal< sc_lv<31> > tmp_6_reg_306;
    sc_signal< sc_lv<31> > tmp_10_reg_311;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<18> > tmp_38_i_fu_108_p4;
    sc_signal< sc_lv<36> > p_Val2_3_fu_235_p2;
    sc_signal< sc_lv<18> > tmp_40_i_fu_118_p4;
    sc_signal< sc_lv<36> > p_Val2_4_fu_242_p2;
    sc_signal< sc_lv<18> > tmp_42_i_fu_128_p4;
    sc_signal< sc_lv<36> > p_Val2_5_fu_249_p2;
    sc_signal< sc_lv<36> > p_Val2_6_fu_256_p2;
    sc_signal< sc_lv<36> > p_Val2_7_fu_263_p2;
    sc_signal< sc_lv<36> > p_Val2_8_fu_270_p2;
    sc_signal< sc_lv<32> > tmp_9_fu_216_p1;
    sc_signal< sc_lv<32> > tmp_3_fu_213_p1;
    sc_signal< sc_lv<32> > tmp_8_fu_210_p1;
    sc_signal< sc_lv<32> > tmp_5_fu_207_p1;
    sc_signal< sc_lv<32> > tmp_2_fu_204_p1;
    sc_signal< sc_lv<18> > p_Val2_3_fu_235_p0;
    sc_signal< sc_lv<36> > OP1_V_cast_i_fu_138_p1;
    sc_signal< sc_lv<18> > p_Val2_3_fu_235_p1;
    sc_signal< sc_lv<18> > p_Val2_4_fu_242_p0;
    sc_signal< sc_lv<36> > OP1_V_1_cast_i_fu_151_p1;
    sc_signal< sc_lv<18> > p_Val2_4_fu_242_p1;
    sc_signal< sc_lv<18> > p_Val2_5_fu_249_p0;
    sc_signal< sc_lv<36> > OP1_V_2_cast_i_fu_164_p1;
    sc_signal< sc_lv<18> > p_Val2_5_fu_249_p1;
    sc_signal< sc_lv<18> > p_Val2_6_fu_256_p0;
    sc_signal< sc_lv<18> > p_Val2_6_fu_256_p1;
    sc_signal< sc_lv<18> > p_Val2_7_fu_263_p0;
    sc_signal< sc_lv<18> > p_Val2_7_fu_263_p1;
    sc_signal< sc_lv<18> > p_Val2_8_fu_270_p0;
    sc_signal< sc_lv<18> > p_Val2_8_fu_270_p1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<6> ap_const_lv6_32;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_23;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_OP1_V_1_cast_i_fu_151_p1();
    void thread_OP1_V_2_cast_i_fu_164_p1();
    void thread_OP1_V_cast_i_fu_138_p1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten_fu_96_p2();
    void thread_filtered_gradient_x_s_blk_n();
    void thread_filtered_gradient_x_s_read();
    void thread_filtered_gradient_y_s_blk_n();
    void thread_filtered_gradient_y_s_read();
    void thread_filtered_gradient_z_s_blk_n();
    void thread_filtered_gradient_z_s_read();
    void thread_indvar_flatten_next_fu_102_p2();
    void thread_internal_ap_ready();
    void thread_out_product_val_V_blk_n();
    void thread_out_product_val_V_din();
    void thread_out_product_val_V_write();
    void thread_p_Val2_3_fu_235_p0();
    void thread_p_Val2_3_fu_235_p1();
    void thread_p_Val2_4_fu_242_p0();
    void thread_p_Val2_4_fu_242_p1();
    void thread_p_Val2_5_fu_249_p0();
    void thread_p_Val2_5_fu_249_p1();
    void thread_p_Val2_6_fu_256_p0();
    void thread_p_Val2_6_fu_256_p1();
    void thread_p_Val2_7_fu_263_p0();
    void thread_p_Val2_7_fu_263_p1();
    void thread_p_Val2_8_fu_270_p0();
    void thread_p_Val2_8_fu_270_p1();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_2_fu_204_p1();
    void thread_tmp_38_i_fu_108_p4();
    void thread_tmp_3_fu_213_p1();
    void thread_tmp_40_i_fu_118_p4();
    void thread_tmp_42_i_fu_128_p4();
    void thread_tmp_5_fu_207_p1();
    void thread_tmp_8_fu_210_p1();
    void thread_tmp_9_fu_216_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
