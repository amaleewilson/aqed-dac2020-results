// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tensor_weight_y (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        out_product_val_V_dout,
        out_product_val_V_empty_n,
        out_product_val_V_read,
        tensor_y_val_V_din,
        tensor_y_val_V_full_n,
        tensor_y_val_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [190:0] out_product_val_V_dout;
input   out_product_val_V_empty_n;
output   out_product_val_V_read;
output  [191:0] tensor_y_val_V_din;
input   tensor_y_val_V_full_n;
output   tensor_y_val_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg out_product_val_V_read;
reg tensor_y_val_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    out_product_val_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_1080;
reg   [0:0] tmp_i_mid2_reg_1089;
reg    tensor_y_val_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] tmp_3_i_mid2_reg_1103;
reg   [0:0] tmp_3_i_mid2_reg_1103_pp0_iter2_reg;
reg   [5:0] indvar_flatten_reg_162;
reg   [2:0] r_i_reg_173;
reg   [3:0] col_assign_reg_184;
wire   [0:0] exitcond_flatten_fu_235_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_predicate_op58_read_state3;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [5:0] indvar_flatten_next_fu_241_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_i_mid2_fu_273_p3;
wire   [0:0] or_cond_i_mid2_fu_303_p3;
reg   [0:0] or_cond_i_mid2_reg_1093;
reg   [0:0] or_cond_i_mid2_reg_1093_pp0_iter1_reg;
reg   [0:0] or_cond_i_mid2_reg_1093_pp0_iter2_reg;
wire   [0:0] tmp_3_i_mid2_fu_323_p3;
reg   [0:0] tmp_3_i_mid2_reg_1103_pp0_iter1_reg;
wire   [2:0] r_i_mid2_fu_331_p3;
reg   [3:0] buf_val_1_val_V_add_reg_1112;
reg   [3:0] buf_val_2_val_V_add_reg_1118;
reg   [3:0] buf_val_2_val_V_add_reg_1118_pp0_iter1_reg;
wire   [3:0] c_fu_345_p2;
wire   [31:0] tmp_14_fu_351_p1;
reg   [31:0] tmp_14_reg_1129;
reg   [31:0] tmp_9_i_reg_1134;
reg   [31:0] tmp_10_i_reg_1139;
reg   [31:0] tmp_11_i_reg_1144;
reg   [31:0] tmp_12_i_reg_1149;
wire   [31:0] tmp_15_fu_395_p1;
reg   [31:0] tmp_15_reg_1154;
reg   [31:0] tmp_14_i_reg_1159;
reg   [31:0] tmp_15_i_reg_1164;
reg   [31:0] tmp_16_i_reg_1169;
reg   [31:0] tmp_17_i_reg_1174;
reg   [30:0] tmp_16_reg_1184;
reg   [30:0] tmp_17_reg_1189;
wire   [50:0] p_Val2_1_2_i_fu_719_p2;
reg   [50:0] p_Val2_1_2_i_reg_1194;
reg   [31:0] tmp_7_reg_1199;
wire   [50:0] p_Val2_1_2_1_i_fu_749_p2;
reg   [50:0] p_Val2_1_2_1_i_reg_1204;
reg   [31:0] tmp_8_reg_1209;
wire   [50:0] p_Val2_1_2_2_i_fu_779_p2;
reg   [50:0] p_Val2_1_2_2_i_reg_1214;
reg   [31:0] tmp_9_reg_1219;
wire   [50:0] p_Val2_1_2_3_i_fu_809_p2;
reg   [50:0] p_Val2_1_2_3_i_reg_1224;
reg   [31:0] tmp_s_reg_1229;
wire   [50:0] p_Val2_1_2_4_i_fu_839_p2;
reg   [50:0] p_Val2_1_2_4_i_reg_1234;
reg   [31:0] tmp_10_reg_1239;
wire   [49:0] p_Val2_1_2_5_i_fu_869_p2;
reg   [49:0] p_Val2_1_2_5_i_reg_1244;
reg   [31:0] tmp_11_reg_1249;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] buf_val_1_val_V_address0;
reg    buf_val_1_val_V_ce0;
wire   [190:0] buf_val_1_val_V_q0;
reg    buf_val_1_val_V_ce1;
reg    buf_val_1_val_V_we1;
wire   [3:0] buf_val_2_val_V_address0;
reg    buf_val_2_val_V_ce0;
wire   [190:0] buf_val_2_val_V_q0;
reg    buf_val_2_val_V_ce1;
reg    buf_val_2_val_V_we1;
wire   [190:0] ap_phi_reg_pp0_iter0_tmp_val_V_4_i_reg_195;
reg   [190:0] ap_phi_reg_pp0_iter1_tmp_val_V_4_i_reg_195;
reg   [190:0] ap_phi_reg_pp0_iter2_tmp_val_V_4_i_reg_195;
wire   [63:0] tmp_i_32_fu_339_p1;
reg    ap_block_pp0_stage0_01001;
wire   [1:0] tmp_fu_213_p4;
wire   [0:0] icmp_fu_223_p2;
wire   [0:0] tmp_i_fu_207_p2;
wire   [0:0] exitcond2_i_fu_247_p2;
wire   [2:0] r_fu_261_p2;
wire   [0:0] tmp_i_mid1_fu_267_p2;
wire   [1:0] tmp_13_fu_281_p4;
wire   [0:0] icmp1_fu_291_p2;
wire   [0:0] or_cond_i_mid1_fu_297_p2;
wire   [0:0] or_cond_i_fu_229_p2;
wire   [0:0] tmp_3_i_mid1_fu_311_p2;
wire   [0:0] tmp_3_i_fu_317_p2;
wire   [3:0] col_assign_mid2_fu_253_p3;
wire  signed [31:0] p_Val2_1_0_i_fu_462_p1;
wire  signed [31:0] p_Val2_1_0_1_i_fu_471_p1;
wire  signed [31:0] p_Val2_1_0_2_i_fu_480_p1;
wire  signed [31:0] p_Val2_1_0_3_i_fu_489_p1;
wire  signed [31:0] p_Val2_1_0_4_i_fu_498_p1;
wire  signed [30:0] p_Val2_1_0_5_i_fu_507_p1;
wire  signed [31:0] p_Val2_1_1_i_fu_516_p1;
wire   [50:0] p_Val2_1_0_i_fu_462_p2;
wire   [31:0] tmp_1_fu_522_p4;
wire   [50:0] p_Val2_1_1_i_fu_516_p2;
wire   [50:0] tmp_23_1_i_fu_532_p3;
wire  signed [31:0] p_Val2_1_1_1_i_fu_549_p1;
wire   [50:0] p_Val2_1_0_1_i_fu_471_p2;
wire   [31:0] tmp_2_fu_555_p4;
wire   [50:0] p_Val2_1_1_1_i_fu_549_p2;
wire   [50:0] tmp_23_1_1_i_fu_565_p3;
wire  signed [31:0] p_Val2_1_1_2_i_fu_582_p1;
wire   [50:0] p_Val2_1_0_2_i_fu_480_p2;
wire   [31:0] tmp_3_fu_588_p4;
wire   [50:0] p_Val2_1_1_2_i_fu_582_p2;
wire   [50:0] tmp_23_1_2_i_fu_598_p3;
wire  signed [31:0] p_Val2_1_1_3_i_fu_615_p1;
wire   [50:0] p_Val2_1_0_3_i_fu_489_p2;
wire   [31:0] tmp_4_fu_621_p4;
wire   [50:0] p_Val2_1_1_3_i_fu_615_p2;
wire   [50:0] tmp_23_1_3_i_fu_631_p3;
wire  signed [31:0] p_Val2_1_1_4_i_fu_648_p1;
wire   [50:0] p_Val2_1_0_4_i_fu_498_p2;
wire   [31:0] tmp_5_fu_654_p4;
wire   [50:0] p_Val2_1_1_4_i_fu_648_p2;
wire   [50:0] tmp_23_1_4_i_fu_664_p3;
wire  signed [30:0] p_Val2_1_1_5_i_fu_681_p1;
wire   [50:0] p_Val2_1_0_5_i_fu_507_p2;
wire   [31:0] tmp_6_fu_687_p4;
wire   [50:0] p_Val2_1_1_5_i_fu_681_p2;
wire   [50:0] tmp_23_1_5_i_fu_697_p3;
wire   [31:0] tmp_18_fu_711_p1;
wire  signed [31:0] p_Val2_1_2_i_fu_719_p1;
wire   [50:0] p_Val2_2_1_i_fu_540_p2;
wire   [31:0] tmp_21_i_fu_735_p4;
wire  signed [31:0] p_Val2_1_2_1_i_fu_749_p1;
wire   [50:0] p_Val2_2_1_1_i_fu_573_p2;
wire   [31:0] tmp_22_i_fu_765_p4;
wire  signed [31:0] p_Val2_1_2_2_i_fu_779_p1;
wire   [50:0] p_Val2_2_1_2_i_fu_606_p2;
wire   [31:0] tmp_23_i_fu_795_p4;
wire  signed [31:0] p_Val2_1_2_3_i_fu_809_p1;
wire   [50:0] p_Val2_2_1_3_i_fu_639_p2;
wire   [31:0] tmp_24_i_fu_825_p4;
wire  signed [31:0] p_Val2_1_2_4_i_fu_839_p1;
wire   [50:0] p_Val2_2_1_4_i_fu_672_p2;
wire   [30:0] tmp_19_fu_855_p4;
wire  signed [30:0] p_Val2_1_2_5_i_fu_869_p1;
wire   [50:0] p_Val2_2_1_5_i_fu_705_p2;
wire   [50:0] tmp_23_2_i_fu_885_p3;
wire   [50:0] p_Val2_2_2_i_fu_892_p2;
wire   [50:0] tmp_23_2_1_i_fu_907_p3;
wire   [50:0] p_Val2_2_2_1_i_fu_914_p2;
wire   [50:0] tmp_23_2_2_i_fu_929_p3;
wire   [50:0] p_Val2_2_2_2_i_fu_936_p2;
wire   [50:0] tmp_23_2_3_i_fu_951_p3;
wire   [50:0] p_Val2_2_2_3_i_fu_958_p2;
wire   [50:0] tmp_23_2_4_i_fu_973_p3;
wire   [50:0] p_Val2_2_2_4_i_fu_980_p2;
wire  signed [50:0] p_Val2_1_2_5_i_cas_fu_995_p1;
wire   [50:0] tmp_23_2_5_i_fu_998_p3;
wire   [50:0] p_Val2_2_2_5_i_fu_1005_p2;
wire   [31:0] acc_val_5_V_fu_1011_p4;
wire   [31:0] acc_val_4_V_fu_985_p4;
wire   [31:0] acc_val_3_V_fu_963_p4;
wire   [31:0] acc_val_2_V_fu_941_p4;
wire   [31:0] acc_val_1_V_fu_919_p4;
wire   [31:0] acc_val_0_V_fu_897_p4;
wire   [31:0] acc_val_V_5_i_fu_1021_p3;
wire   [31:0] acc_val_V_4_i_fu_1028_p3;
wire   [31:0] acc_val_V_3_i_fu_1035_p3;
wire   [31:0] acc_val_V_2_i_fu_1042_p3;
wire   [31:0] acc_val_V_1_i_fu_1049_p3;
wire   [31:0] acc_val_V_0_i_fu_1056_p3;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_111;
reg    ap_condition_243;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

tensor_weight_y_bzec #(
    .DataWidth( 191 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
buf_val_1_val_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_1_val_V_address0),
    .ce0(buf_val_1_val_V_ce0),
    .q0(buf_val_1_val_V_q0),
    .address1(buf_val_1_val_V_add_reg_1112),
    .ce1(buf_val_1_val_V_ce1),
    .we1(buf_val_1_val_V_we1),
    .d1(buf_val_2_val_V_q0)
);

tensor_weight_y_bzec #(
    .DataWidth( 191 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
buf_val_2_val_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_2_val_V_address0),
    .ce0(buf_val_2_val_V_ce0),
    .q0(buf_val_2_val_V_q0),
    .address1(buf_val_2_val_V_add_reg_1118_pp0_iter1_reg),
    .ce1(buf_val_2_val_V_ce1),
    .we1(buf_val_2_val_V_we1),
    .d1(ap_phi_reg_pp0_iter2_tmp_val_V_4_i_reg_195)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_111)) begin
        if (((exitcond_flatten_fu_235_p2 == 1'd0) & (tmp_i_mid2_fu_273_p3 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_val_V_4_i_reg_195 <= 191'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_val_V_4_i_reg_195 <= ap_phi_reg_pp0_iter0_tmp_val_V_4_i_reg_195;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_243)) begin
        if (((tmp_i_mid2_reg_1089 == 1'd1) & (exitcond_flatten_reg_1080 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_tmp_val_V_4_i_reg_195 <= out_product_val_V_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_tmp_val_V_4_i_reg_195 <= ap_phi_reg_pp0_iter1_tmp_val_V_4_i_reg_195;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        col_assign_reg_184 <= c_fu_345_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_assign_reg_184 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_162 <= indvar_flatten_next_fu_241_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_162 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        r_i_reg_173 <= r_i_mid2_fu_331_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_i_reg_173 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_235_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_1_val_V_add_reg_1112 <= tmp_i_32_fu_339_p1;
        buf_val_2_val_V_add_reg_1118 <= tmp_i_32_fu_339_p1;
        or_cond_i_mid2_reg_1093 <= or_cond_i_mid2_fu_303_p3;
        tmp_3_i_mid2_reg_1103 <= tmp_3_i_mid2_fu_323_p3;
        tmp_i_mid2_reg_1089 <= tmp_i_mid2_fu_273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_2_val_V_add_reg_1118_pp0_iter1_reg <= buf_val_2_val_V_add_reg_1118;
        exitcond_flatten_reg_1080 <= exitcond_flatten_fu_235_p2;
        or_cond_i_mid2_reg_1093_pp0_iter1_reg <= or_cond_i_mid2_reg_1093;
        tmp_3_i_mid2_reg_1103_pp0_iter1_reg <= tmp_3_i_mid2_reg_1103;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        or_cond_i_mid2_reg_1093_pp0_iter2_reg <= or_cond_i_mid2_reg_1093_pp0_iter1_reg;
        tmp_3_i_mid2_reg_1103_pp0_iter2_reg <= tmp_3_i_mid2_reg_1103_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_i_mid2_reg_1093_pp0_iter1_reg == 1'd1))) begin
        p_Val2_1_2_1_i_reg_1204 <= p_Val2_1_2_1_i_fu_749_p2;
        p_Val2_1_2_2_i_reg_1214 <= p_Val2_1_2_2_i_fu_779_p2;
        p_Val2_1_2_3_i_reg_1224 <= p_Val2_1_2_3_i_fu_809_p2;
        p_Val2_1_2_4_i_reg_1234 <= p_Val2_1_2_4_i_fu_839_p2;
        p_Val2_1_2_5_i_reg_1244 <= p_Val2_1_2_5_i_fu_869_p2;
        p_Val2_1_2_i_reg_1194 <= p_Val2_1_2_i_fu_719_p2;
        tmp_10_reg_1239 <= {{p_Val2_2_1_4_i_fu_672_p2[50:19]}};
        tmp_11_reg_1249 <= {{p_Val2_2_1_5_i_fu_705_p2[50:19]}};
        tmp_7_reg_1199 <= {{p_Val2_2_1_i_fu_540_p2[50:19]}};
        tmp_8_reg_1209 <= {{p_Val2_2_1_1_i_fu_573_p2[50:19]}};
        tmp_9_reg_1219 <= {{p_Val2_2_1_2_i_fu_606_p2[50:19]}};
        tmp_s_reg_1229 <= {{p_Val2_2_1_3_i_fu_639_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_i_mid2_reg_1093 == 1'd1) & (exitcond_flatten_reg_1080 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_10_i_reg_1139 <= {{buf_val_1_val_V_q0[95:64]}};
        tmp_11_i_reg_1144 <= {{buf_val_1_val_V_q0[127:96]}};
        tmp_12_i_reg_1149 <= {{buf_val_1_val_V_q0[159:128]}};
        tmp_14_i_reg_1159 <= {{buf_val_2_val_V_q0[63:32]}};
        tmp_14_reg_1129 <= tmp_14_fu_351_p1;
        tmp_15_i_reg_1164 <= {{buf_val_2_val_V_q0[95:64]}};
        tmp_15_reg_1154 <= tmp_15_fu_395_p1;
        tmp_16_i_reg_1169 <= {{buf_val_2_val_V_q0[127:96]}};
        tmp_17_i_reg_1174 <= {{buf_val_2_val_V_q0[159:128]}};
        tmp_9_i_reg_1134 <= {{buf_val_1_val_V_q0[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_i_mid2_reg_1093 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_16_reg_1184 <= {{buf_val_1_val_V_q0[190:160]}};
        tmp_17_reg_1189 <= {{buf_val_2_val_V_q0[190:160]}};
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_235_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_1_val_V_ce0 = 1'b1;
    end else begin
        buf_val_1_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_1_val_V_ce1 = 1'b1;
    end else begin
        buf_val_1_val_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_1080 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_1_val_V_we1 = 1'b1;
    end else begin
        buf_val_1_val_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buf_val_2_val_V_ce0 = 1'b1;
    end else begin
        buf_val_2_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_val_2_val_V_ce1 = 1'b1;
    end else begin
        buf_val_2_val_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buf_val_2_val_V_we1 = 1'b1;
    end else begin
        buf_val_2_val_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_i_mid2_reg_1089 == 1'd1) & (exitcond_flatten_reg_1080 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_product_val_V_blk_n = out_product_val_V_empty_n;
    end else begin
        out_product_val_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op58_read_state3 == 1'b1))) begin
        out_product_val_V_read = 1'b1;
    end else begin
        out_product_val_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_3_i_mid2_reg_1103_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tensor_y_val_V_blk_n = tensor_y_val_V_full_n;
    end else begin
        tensor_y_val_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_i_mid2_reg_1103_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        tensor_y_val_V_write = 1'b1;
    end else begin
        tensor_y_val_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten_fu_235_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_val_0_V_fu_897_p4 = {{p_Val2_2_2_i_fu_892_p2[50:19]}};

assign acc_val_1_V_fu_919_p4 = {{p_Val2_2_2_1_i_fu_914_p2[50:19]}};

assign acc_val_2_V_fu_941_p4 = {{p_Val2_2_2_2_i_fu_936_p2[50:19]}};

assign acc_val_3_V_fu_963_p4 = {{p_Val2_2_2_3_i_fu_958_p2[50:19]}};

assign acc_val_4_V_fu_985_p4 = {{p_Val2_2_2_4_i_fu_980_p2[50:19]}};

assign acc_val_5_V_fu_1011_p4 = {{p_Val2_2_2_5_i_fu_1005_p2[50:19]}};

assign acc_val_V_0_i_fu_1056_p3 = ((or_cond_i_mid2_reg_1093_pp0_iter2_reg[0:0] === 1'b1) ? acc_val_0_V_fu_897_p4 : 32'd0);

assign acc_val_V_1_i_fu_1049_p3 = ((or_cond_i_mid2_reg_1093_pp0_iter2_reg[0:0] === 1'b1) ? acc_val_1_V_fu_919_p4 : 32'd0);

assign acc_val_V_2_i_fu_1042_p3 = ((or_cond_i_mid2_reg_1093_pp0_iter2_reg[0:0] === 1'b1) ? acc_val_2_V_fu_941_p4 : 32'd0);

assign acc_val_V_3_i_fu_1035_p3 = ((or_cond_i_mid2_reg_1093_pp0_iter2_reg[0:0] === 1'b1) ? acc_val_3_V_fu_963_p4 : 32'd0);

assign acc_val_V_4_i_fu_1028_p3 = ((or_cond_i_mid2_reg_1093_pp0_iter2_reg[0:0] === 1'b1) ? acc_val_4_V_fu_985_p4 : 32'd0);

assign acc_val_V_5_i_fu_1021_p3 = ((or_cond_i_mid2_reg_1093_pp0_iter2_reg[0:0] === 1'b1) ? acc_val_5_V_fu_1011_p4 : 32'd0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_3_i_mid2_reg_1103_pp0_iter2_reg == 1'd0) & (tensor_y_val_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((out_product_val_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op58_read_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_3_i_mid2_reg_1103_pp0_iter2_reg == 1'd0) & (tensor_y_val_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((out_product_val_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op58_read_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_3_i_mid2_reg_1103_pp0_iter2_reg == 1'd0) & (tensor_y_val_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((out_product_val_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op58_read_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((out_product_val_V_empty_n == 1'b0) & (ap_predicate_op58_read_state3 == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((tmp_3_i_mid2_reg_1103_pp0_iter2_reg == 1'd0) & (tensor_y_val_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_111 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_243 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_val_V_4_i_reg_195 = 'bx;

always @ (*) begin
    ap_predicate_op58_read_state3 = ((tmp_i_mid2_reg_1089 == 1'd1) & (exitcond_flatten_reg_1080 == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign buf_val_1_val_V_address0 = tmp_i_32_fu_339_p1;

assign buf_val_2_val_V_address0 = tmp_i_32_fu_339_p1;

assign c_fu_345_p2 = (col_assign_mid2_fu_253_p3 + 4'd1);

assign col_assign_mid2_fu_253_p3 = ((exitcond2_i_fu_247_p2[0:0] === 1'b1) ? 4'd0 : col_assign_reg_184);

assign exitcond2_i_fu_247_p2 = ((col_assign_reg_184 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_235_p2 = ((indvar_flatten_reg_162 == 6'd60) ? 1'b1 : 1'b0);

assign icmp1_fu_291_p2 = ((tmp_13_fu_281_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_fu_223_p2 = ((tmp_fu_213_p4 != 2'd0) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_241_p2 = (indvar_flatten_reg_162 + 6'd1);

assign or_cond_i_fu_229_p2 = (tmp_i_fu_207_p2 & icmp_fu_223_p2);

assign or_cond_i_mid1_fu_297_p2 = (tmp_i_mid1_fu_267_p2 & icmp1_fu_291_p2);

assign or_cond_i_mid2_fu_303_p3 = ((exitcond2_i_fu_247_p2[0:0] === 1'b1) ? or_cond_i_mid1_fu_297_p2 : or_cond_i_fu_229_p2);

assign p_Val2_1_0_1_i_fu_471_p1 = tmp_9_i_reg_1134;

assign p_Val2_1_0_1_i_fu_471_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_0_1_i_fu_471_p1));

assign p_Val2_1_0_2_i_fu_480_p1 = tmp_10_i_reg_1139;

assign p_Val2_1_0_2_i_fu_480_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_0_2_i_fu_480_p1));

assign p_Val2_1_0_3_i_fu_489_p1 = tmp_11_i_reg_1144;

assign p_Val2_1_0_3_i_fu_489_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_0_3_i_fu_489_p1));

assign p_Val2_1_0_4_i_fu_498_p1 = tmp_12_i_reg_1149;

assign p_Val2_1_0_4_i_fu_498_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_0_4_i_fu_498_p1));

assign p_Val2_1_0_5_i_fu_507_p1 = tmp_16_reg_1184;

assign p_Val2_1_0_5_i_fu_507_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_0_5_i_fu_507_p1));

assign p_Val2_1_0_i_fu_462_p1 = tmp_14_reg_1129;

assign p_Val2_1_0_i_fu_462_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_0_i_fu_462_p1));

assign p_Val2_1_1_1_i_fu_549_p1 = tmp_14_i_reg_1159;

assign p_Val2_1_1_1_i_fu_549_p2 = ($signed({{1'b0}, {51'd184182}}) * $signed(p_Val2_1_1_1_i_fu_549_p1));

assign p_Val2_1_1_2_i_fu_582_p1 = tmp_15_i_reg_1164;

assign p_Val2_1_1_2_i_fu_582_p2 = ($signed({{1'b0}, {51'd184182}}) * $signed(p_Val2_1_1_2_i_fu_582_p1));

assign p_Val2_1_1_3_i_fu_615_p1 = tmp_16_i_reg_1169;

assign p_Val2_1_1_3_i_fu_615_p2 = ($signed({{1'b0}, {51'd184182}}) * $signed(p_Val2_1_1_3_i_fu_615_p1));

assign p_Val2_1_1_4_i_fu_648_p1 = tmp_17_i_reg_1174;

assign p_Val2_1_1_4_i_fu_648_p2 = ($signed({{1'b0}, {51'd184182}}) * $signed(p_Val2_1_1_4_i_fu_648_p1));

assign p_Val2_1_1_5_i_fu_681_p1 = tmp_17_reg_1189;

assign p_Val2_1_1_5_i_fu_681_p2 = ($signed({{1'b0}, {51'd184182}}) * $signed(p_Val2_1_1_5_i_fu_681_p1));

assign p_Val2_1_1_i_fu_516_p1 = tmp_15_reg_1154;

assign p_Val2_1_1_i_fu_516_p2 = ($signed({{1'b0}, {51'd184182}}) * $signed(p_Val2_1_1_i_fu_516_p1));

assign p_Val2_1_2_1_i_fu_749_p1 = tmp_21_i_fu_735_p4;

assign p_Val2_1_2_1_i_fu_749_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_2_1_i_fu_749_p1));

assign p_Val2_1_2_2_i_fu_779_p1 = tmp_22_i_fu_765_p4;

assign p_Val2_1_2_2_i_fu_779_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_2_2_i_fu_779_p1));

assign p_Val2_1_2_3_i_fu_809_p1 = tmp_23_i_fu_795_p4;

assign p_Val2_1_2_3_i_fu_809_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_2_3_i_fu_809_p1));

assign p_Val2_1_2_4_i_fu_839_p1 = tmp_24_i_fu_825_p4;

assign p_Val2_1_2_4_i_fu_839_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_2_4_i_fu_839_p1));

assign p_Val2_1_2_5_i_cas_fu_995_p1 = $signed(p_Val2_1_2_5_i_reg_1244);

assign p_Val2_1_2_5_i_fu_869_p1 = tmp_19_fu_855_p4;

assign p_Val2_1_2_5_i_fu_869_p2 = ($signed({{1'b0}, {50'd170026}}) * $signed(p_Val2_1_2_5_i_fu_869_p1));

assign p_Val2_1_2_i_fu_719_p1 = tmp_18_fu_711_p1;

assign p_Val2_1_2_i_fu_719_p2 = ($signed({{1'b0}, {51'd170026}}) * $signed(p_Val2_1_2_i_fu_719_p1));

assign p_Val2_2_1_1_i_fu_573_p2 = (p_Val2_1_1_1_i_fu_549_p2 + tmp_23_1_1_i_fu_565_p3);

assign p_Val2_2_1_2_i_fu_606_p2 = (p_Val2_1_1_2_i_fu_582_p2 + tmp_23_1_2_i_fu_598_p3);

assign p_Val2_2_1_3_i_fu_639_p2 = (p_Val2_1_1_3_i_fu_615_p2 + tmp_23_1_3_i_fu_631_p3);

assign p_Val2_2_1_4_i_fu_672_p2 = (p_Val2_1_1_4_i_fu_648_p2 + tmp_23_1_4_i_fu_664_p3);

assign p_Val2_2_1_5_i_fu_705_p2 = (p_Val2_1_1_5_i_fu_681_p2 + tmp_23_1_5_i_fu_697_p3);

assign p_Val2_2_1_i_fu_540_p2 = (p_Val2_1_1_i_fu_516_p2 + tmp_23_1_i_fu_532_p3);

assign p_Val2_2_2_1_i_fu_914_p2 = (p_Val2_1_2_1_i_reg_1204 + tmp_23_2_1_i_fu_907_p3);

assign p_Val2_2_2_2_i_fu_936_p2 = (p_Val2_1_2_2_i_reg_1214 + tmp_23_2_2_i_fu_929_p3);

assign p_Val2_2_2_3_i_fu_958_p2 = (p_Val2_1_2_3_i_reg_1224 + tmp_23_2_3_i_fu_951_p3);

assign p_Val2_2_2_4_i_fu_980_p2 = (p_Val2_1_2_4_i_reg_1234 + tmp_23_2_4_i_fu_973_p3);

assign p_Val2_2_2_5_i_fu_1005_p2 = ($signed(p_Val2_1_2_5_i_cas_fu_995_p1) + $signed(tmp_23_2_5_i_fu_998_p3));

assign p_Val2_2_2_i_fu_892_p2 = (p_Val2_1_2_i_reg_1194 + tmp_23_2_i_fu_885_p3);

assign r_fu_261_p2 = (3'd1 + r_i_reg_173);

assign r_i_mid2_fu_331_p3 = ((exitcond2_i_fu_247_p2[0:0] === 1'b1) ? r_fu_261_p2 : r_i_reg_173);

assign start_out = real_start;

assign tensor_y_val_V_din = {{{{{{acc_val_V_5_i_fu_1021_p3}, {acc_val_V_4_i_fu_1028_p3}}, {acc_val_V_3_i_fu_1035_p3}}, {acc_val_V_2_i_fu_1042_p3}}, {acc_val_V_1_i_fu_1049_p3}}, {acc_val_V_0_i_fu_1056_p3}};

assign tmp_13_fu_281_p4 = {{r_fu_261_p2[2:1]}};

assign tmp_14_fu_351_p1 = buf_val_1_val_V_q0[31:0];

assign tmp_15_fu_395_p1 = buf_val_2_val_V_q0[31:0];

assign tmp_18_fu_711_p1 = ap_phi_reg_pp0_iter2_tmp_val_V_4_i_reg_195[31:0];

assign tmp_19_fu_855_p4 = {{ap_phi_reg_pp0_iter2_tmp_val_V_4_i_reg_195[190:160]}};

assign tmp_1_fu_522_p4 = {{p_Val2_1_0_i_fu_462_p2[50:19]}};

assign tmp_21_i_fu_735_p4 = {{ap_phi_reg_pp0_iter2_tmp_val_V_4_i_reg_195[63:32]}};

assign tmp_22_i_fu_765_p4 = {{ap_phi_reg_pp0_iter2_tmp_val_V_4_i_reg_195[95:64]}};

assign tmp_23_1_1_i_fu_565_p3 = {{tmp_2_fu_555_p4}, {19'd0}};

assign tmp_23_1_2_i_fu_598_p3 = {{tmp_3_fu_588_p4}, {19'd0}};

assign tmp_23_1_3_i_fu_631_p3 = {{tmp_4_fu_621_p4}, {19'd0}};

assign tmp_23_1_4_i_fu_664_p3 = {{tmp_5_fu_654_p4}, {19'd0}};

assign tmp_23_1_5_i_fu_697_p3 = {{tmp_6_fu_687_p4}, {19'd0}};

assign tmp_23_1_i_fu_532_p3 = {{tmp_1_fu_522_p4}, {19'd0}};

assign tmp_23_2_1_i_fu_907_p3 = {{tmp_8_reg_1209}, {19'd0}};

assign tmp_23_2_2_i_fu_929_p3 = {{tmp_9_reg_1219}, {19'd0}};

assign tmp_23_2_3_i_fu_951_p3 = {{tmp_s_reg_1229}, {19'd0}};

assign tmp_23_2_4_i_fu_973_p3 = {{tmp_10_reg_1239}, {19'd0}};

assign tmp_23_2_5_i_fu_998_p3 = {{tmp_11_reg_1249}, {19'd0}};

assign tmp_23_2_i_fu_885_p3 = {{tmp_7_reg_1199}, {19'd0}};

assign tmp_23_i_fu_795_p4 = {{ap_phi_reg_pp0_iter2_tmp_val_V_4_i_reg_195[127:96]}};

assign tmp_24_i_fu_825_p4 = {{ap_phi_reg_pp0_iter2_tmp_val_V_4_i_reg_195[159:128]}};

assign tmp_2_fu_555_p4 = {{p_Val2_1_0_1_i_fu_471_p2[50:19]}};

assign tmp_3_fu_588_p4 = {{p_Val2_1_0_2_i_fu_480_p2[50:19]}};

assign tmp_3_i_fu_317_p2 = ((r_i_reg_173 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_3_i_mid1_fu_311_p2 = ((r_fu_261_p2 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_3_i_mid2_fu_323_p3 = ((exitcond2_i_fu_247_p2[0:0] === 1'b1) ? tmp_3_i_mid1_fu_311_p2 : tmp_3_i_fu_317_p2);

assign tmp_4_fu_621_p4 = {{p_Val2_1_0_3_i_fu_489_p2[50:19]}};

assign tmp_5_fu_654_p4 = {{p_Val2_1_0_4_i_fu_498_p2[50:19]}};

assign tmp_6_fu_687_p4 = {{p_Val2_1_0_5_i_fu_507_p2[50:19]}};

assign tmp_fu_213_p4 = {{r_i_reg_173[2:1]}};

assign tmp_i_32_fu_339_p1 = col_assign_mid2_fu_253_p3;

assign tmp_i_fu_207_p2 = ((r_i_reg_173 < 3'd5) ? 1'b1 : 1'b0);

assign tmp_i_mid1_fu_267_p2 = ((r_fu_261_p2 < 3'd5) ? 1'b1 : 1'b0);

assign tmp_i_mid2_fu_273_p3 = ((exitcond2_i_fu_247_p2[0:0] === 1'b1) ? tmp_i_mid1_fu_267_p2 : tmp_i_fu_207_p2);

endmodule //tensor_weight_y
