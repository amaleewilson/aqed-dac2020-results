// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gradient_z_calc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        frame1_a_V_dout,
        frame1_a_V_empty_n,
        frame1_a_V_read,
        frame2_a_V_dout,
        frame2_a_V_empty_n,
        frame2_a_V_read,
        frame3_b_V_dout,
        frame3_b_V_empty_n,
        frame3_b_V_read,
        frame4_a_V_dout,
        frame4_a_V_empty_n,
        frame4_a_V_read,
        frame5_a_V_dout,
        frame5_a_V_empty_n,
        frame5_a_V_read,
        gradient_z_V_din,
        gradient_z_V_full_n,
        gradient_z_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] frame1_a_V_dout;
input   frame1_a_V_empty_n;
output   frame1_a_V_read;
input  [7:0] frame2_a_V_dout;
input   frame2_a_V_empty_n;
output   frame2_a_V_read;
input  [7:0] frame3_b_V_dout;
input   frame3_b_V_empty_n;
output   frame3_b_V_read;
input  [7:0] frame4_a_V_dout;
input   frame4_a_V_empty_n;
output   frame4_a_V_read;
input  [7:0] frame5_a_V_dout;
input   frame5_a_V_empty_n;
output   frame5_a_V_read;
output  [31:0] gradient_z_V_din;
input   gradient_z_V_full_n;
output   gradient_z_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg frame1_a_V_read;
reg frame2_a_V_read;
reg frame3_b_V_read;
reg frame4_a_V_read;
reg frame5_a_V_read;
reg gradient_z_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    frame1_a_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_264;
reg    frame2_a_V_blk_n;
reg    frame3_b_V_blk_n;
reg    frame4_a_V_blk_n;
reg    frame5_a_V_blk_n;
reg    gradient_z_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] exitcond_flatten_reg_264_pp0_iter2_reg;
reg   [5:0] indvar_flatten_reg_109;
wire   [0:0] exitcond_flatten_fu_120_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_264_pp0_iter1_reg;
wire   [5:0] indvar_flatten_next_fu_126_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [12:0] p_Val2_3_fu_180_p2;
reg   [12:0] p_Val2_3_reg_273;
reg   [0:0] tmp_27_reg_278;
reg   [0:0] tmp_27_reg_278_pp0_iter2_reg;
wire   [56:0] mul_fu_205_p2;
reg   [56:0] mul_reg_284;
reg   [20:0] tmp_29_reg_289;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [10:0] p_shl_fu_132_p3;
wire   [11:0] tmp_2_cast_fu_144_p1;
wire   [11:0] p_shl_cast_cast_fu_140_p1;
wire   [11:0] p_Val2_s_fu_148_p2;
wire   [10:0] p_Val2_1_fu_158_p3;
wire   [12:0] p_Val2_1_cast_cast_fu_166_p1;
wire  signed [12:0] p_Val2_cast_fu_154_p1;
wire   [12:0] p_Val2_2_fu_170_p2;
wire   [12:0] OP1_V_4_cast_fu_176_p1;
wire   [23:0] tmp_fu_194_p3;
wire  signed [23:0] mul_fu_205_p1;
wire   [56:0] neg_mul_fu_221_p2;
wire   [20:0] tmp_28_fu_226_p4;
wire  signed [31:0] tmp_s_fu_236_p1;
wire  signed [31:0] tmp_22_fu_240_p1;
wire   [31:0] tmp_23_fu_243_p3;
wire   [31:0] neg_ti_fu_250_p2;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_109 <= indvar_flatten_next_fu_126_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_109 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_264 <= exitcond_flatten_fu_120_p2;
        exitcond_flatten_reg_264_pp0_iter1_reg <= exitcond_flatten_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_264_pp0_iter2_reg <= exitcond_flatten_reg_264_pp0_iter1_reg;
        tmp_27_reg_278_pp0_iter2_reg <= tmp_27_reg_278;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_264_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_reg_284[56 : 11] <= mul_fu_205_p2[56 : 11];
        tmp_29_reg_289 <= {{mul_fu_205_p2[56:36]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Val2_3_reg_273 <= p_Val2_3_fu_180_p2;
        tmp_27_reg_278 <= p_Val2_3_fu_180_p2[32'd12];
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_120_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame1_a_V_blk_n = frame1_a_V_empty_n;
    end else begin
        frame1_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame1_a_V_read = 1'b1;
    end else begin
        frame1_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame2_a_V_blk_n = frame2_a_V_empty_n;
    end else begin
        frame2_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame2_a_V_read = 1'b1;
    end else begin
        frame2_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame3_b_V_blk_n = frame3_b_V_empty_n;
    end else begin
        frame3_b_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame3_b_V_read = 1'b1;
    end else begin
        frame3_b_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame4_a_V_blk_n = frame4_a_V_empty_n;
    end else begin
        frame4_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame4_a_V_read = 1'b1;
    end else begin
        frame4_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame5_a_V_blk_n = frame5_a_V_empty_n;
    end else begin
        frame5_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame5_a_V_read = 1'b1;
    end else begin
        frame5_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        gradient_z_V_blk_n = gradient_z_V_full_n;
    end else begin
        gradient_z_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_264_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gradient_z_V_write = 1'b1;
    end else begin
        gradient_z_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_120_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten_fu_120_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_4_cast_fu_176_p1 = frame5_a_V_dout;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_flatten_reg_264_pp0_iter2_reg == 1'd0) & (gradient_z_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_264 == 1'd0) & (frame5_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame4_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame3_b_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame2_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame1_a_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_flatten_reg_264_pp0_iter2_reg == 1'd0) & (gradient_z_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_264 == 1'd0) & (frame5_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame4_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame3_b_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame2_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame1_a_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_flatten_reg_264_pp0_iter2_reg == 1'd0) & (gradient_z_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_264 == 1'd0) & (frame5_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame4_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame3_b_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame2_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame1_a_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_flatten_reg_264 == 1'd0) & (frame5_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame4_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame3_b_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame2_a_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_264 == 1'd0) & (frame1_a_V_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((exitcond_flatten_reg_264_pp0_iter2_reg == 1'd0) & (gradient_z_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_120_p2 = ((indvar_flatten_reg_109 == 6'd50) ? 1'b1 : 1'b0);

assign gradient_z_V_din = ((tmp_27_reg_278_pp0_iter2_reg[0:0] === 1'b1) ? neg_ti_fu_250_p2 : tmp_22_fu_240_p1);

assign indvar_flatten_next_fu_126_p2 = (indvar_flatten_reg_109 + 6'd1);

assign mul_fu_205_p1 = tmp_fu_194_p3;

assign mul_fu_205_p2 = ($signed({{1'b0}, {57'd5726623062}}) * $signed(mul_fu_205_p1));

assign neg_mul_fu_221_p2 = (57'd0 - mul_reg_284);

assign neg_ti_fu_250_p2 = (32'd0 - tmp_23_fu_243_p3);

assign p_Val2_1_cast_cast_fu_166_p1 = p_Val2_1_fu_158_p3;

assign p_Val2_1_fu_158_p3 = {{frame4_a_V_dout}, {3'd0}};

assign p_Val2_2_fu_170_p2 = ($signed(p_Val2_1_cast_cast_fu_166_p1) + $signed(p_Val2_cast_fu_154_p1));

assign p_Val2_3_fu_180_p2 = (p_Val2_2_fu_170_p2 - OP1_V_4_cast_fu_176_p1);

assign p_Val2_cast_fu_154_p1 = $signed(p_Val2_s_fu_148_p2);

assign p_Val2_s_fu_148_p2 = (tmp_2_cast_fu_144_p1 - p_shl_cast_cast_fu_140_p1);

assign p_shl_cast_cast_fu_140_p1 = p_shl_fu_132_p3;

assign p_shl_fu_132_p3 = {{frame2_a_V_dout}, {3'd0}};

assign tmp_22_fu_240_p1 = $signed(tmp_29_reg_289);

assign tmp_23_fu_243_p3 = ((tmp_27_reg_278_pp0_iter2_reg[0:0] === 1'b1) ? tmp_s_fu_236_p1 : tmp_22_fu_240_p1);

assign tmp_28_fu_226_p4 = {{neg_mul_fu_221_p2[56:36]}};

assign tmp_2_cast_fu_144_p1 = frame1_a_V_dout;

assign tmp_fu_194_p3 = {{p_Val2_3_reg_273}, {11'd0}};

assign tmp_s_fu_236_p1 = $signed(tmp_28_fu_226_p4);

always @ (posedge ap_clk) begin
    mul_reg_284[10:0] <= 11'b00000000000;
end

endmodule //gradient_z_calc
