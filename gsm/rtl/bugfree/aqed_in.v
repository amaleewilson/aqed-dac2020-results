// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aqed_in (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bmc_in_address0,
        bmc_in_ce0,
        bmc_in_q0,
        bmc_in_address1,
        bmc_in_ce1,
        bmc_in_q1,
        bmc_in_offset,
        orig,
        dup,
        state_orig_issued_i,
        state_orig_issued_o,
        state_orig_issued_o_ap_vld,
        state_dup_issued_i,
        state_dup_issued_o,
        state_dup_issued_o_ap_vld,
        state_orig_in,
        state_orig_in_ap_vld,
        state_dup_in,
        state_dup_in_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] bmc_in_address0;
output   bmc_in_ce0;
input  [15:0] bmc_in_q0;
output  [2:0] bmc_in_address1;
output   bmc_in_ce1;
input  [15:0] bmc_in_q1;
input  [2:0] bmc_in_offset;
input   orig;
input   dup;
input  [0:0] state_orig_issued_i;
output  [0:0] state_orig_issued_o;
output   state_orig_issued_o_ap_vld;
input  [0:0] state_dup_issued_i;
output  [0:0] state_dup_issued_o;
output   state_dup_issued_o_ap_vld;
output  [15:0] state_orig_in;
output   state_orig_in_ap_vld;
output  [15:0] state_dup_in;
output   state_dup_in_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[2:0] bmc_in_address0;
reg bmc_in_ce0;
reg[2:0] bmc_in_address1;
reg bmc_in_ce1;
reg[0:0] state_orig_issued_o;
reg state_orig_issued_o_ap_vld;
reg[0:0] state_dup_issued_o;
reg state_dup_issued_o_ap_vld;
reg state_orig_in_ap_vld;
reg state_dup_in_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] state_in_count;
reg   [15:0] state_orig_val_0;
reg   [15:0] state_orig_val_1;
reg   [15:0] state_orig_val_2;
reg   [15:0] state_orig_val_3;
reg   [2:0] bmc_in_addr_reg_339;
wire   [0:0] issue_orig_fu_156_p2;
reg   [0:0] issue_orig_reg_344;
wire   [0:0] issue_dup_fu_178_p2;
reg   [0:0] issue_dup_reg_348;
reg   [15:0] state_in_count_load_reg_352;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_s_fu_248_p2;
reg   [0:0] tmp_s_reg_378;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_4_fu_258_p2;
reg   [0:0] tmp_4_reg_383;
wire   [63:0] bmc_in_offset_cast1_fu_141_p1;
wire   [63:0] sum_cast_fu_200_p1;
wire   [63:0] sum2_cast_fu_217_p1;
wire   [63:0] sum4_cast_fu_222_p1;
wire   [63:0] sum6_cast_fu_239_p1;
wire   [63:0] sum8_cast_fu_264_p1;
wire   [63:0] sum1_cast_fu_269_p1;
wire   [15:0] tmp_8_fu_321_p2;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_7_fu_304_p2;
wire   [0:0] issue_orig_fu_156_p0;
wire   [0:0] tmp_fu_150_p2;
wire   [0:0] tmp9_fu_172_p0;
wire   [0:0] not_state_dup_issued_fu_166_p2;
wire   [0:0] tmp9_fu_172_p2;
wire   [2:0] grp_fu_125_p2;
wire   [2:0] grp_fu_131_p2;
wire   [2:0] grp_fu_136_p2;
wire   [0:0] tmp_5_fu_278_p2;
wire   [0:0] tmp_6_fu_288_p2;
wire   [0:0] tmp2_fu_299_p2;
wire   [0:0] tmp1_fu_294_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 state_in_count = 16'd0;
#0 state_orig_val_0 = 16'd0;
#0 state_orig_val_1 = 16'd0;
#0 state_orig_val_2 = 16'd0;
#0 state_orig_val_3 = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bmc_in_addr_reg_339 <= bmc_in_offset_cast1_fu_141_p1;
        issue_dup_reg_348 <= issue_dup_fu_178_p2;
        issue_orig_reg_344 <= issue_orig_fu_156_p2;
        state_in_count_load_reg_352 <= state_in_count;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        state_in_count <= 16'd0;
    end else
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_in_count <= tmp_8_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        state_orig_val_0 <= bmc_in_q0;
        state_orig_val_1 <= bmc_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((issue_orig_reg_344 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        state_orig_val_2 <= bmc_in_q0;
        state_orig_val_3 <= bmc_in_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_4_reg_383 <= tmp_4_fu_258_p2;
        tmp_s_reg_378 <= tmp_s_fu_248_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bmc_in_address0 = sum8_cast_fu_264_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        bmc_in_address0 = bmc_in_addr_reg_339;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bmc_in_address0 = sum2_cast_fu_217_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        bmc_in_address0 = bmc_in_offset_cast1_fu_141_p1;
    end else begin
        bmc_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bmc_in_address1 = sum1_cast_fu_269_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        bmc_in_address1 = sum6_cast_fu_239_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bmc_in_address1 = sum4_cast_fu_222_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        bmc_in_address1 = sum_cast_fu_200_p1;
    end else begin
        bmc_in_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        bmc_in_ce0 = 1'b1;
    end else begin
        bmc_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        bmc_in_ce1 = 1'b1;
    end else begin
        bmc_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_7_fu_304_p2 == 1'd1) & (issue_dup_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        state_dup_in_ap_vld = 1'b1;
    end else begin
        state_dup_in_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((issue_dup_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        state_dup_issued_o = tmp_7_fu_304_p2;
    end else begin
        state_dup_issued_o = state_dup_issued_i;
    end
end

always @ (*) begin
    if (((issue_dup_reg_348 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        state_dup_issued_o_ap_vld = 1'b1;
    end else begin
        state_dup_issued_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((issue_orig_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_orig_in_ap_vld = 1'b1;
    end else begin
        state_orig_in_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((issue_orig_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_orig_issued_o = 1'd1;
    end else begin
        state_orig_issued_o = state_orig_issued_i;
    end
end

always @ (*) begin
    if (((issue_orig_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_orig_issued_o_ap_vld = 1'b1;
    end else begin
        state_orig_issued_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((issue_orig_fu_156_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((issue_orig_fu_156_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((issue_dup_reg_348 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign bmc_in_offset_cast1_fu_141_p1 = bmc_in_offset;

assign grp_fu_125_p2 = (bmc_in_offset + 3'd1);

assign grp_fu_131_p2 = (bmc_in_offset + 3'd2);

assign grp_fu_136_p2 = (bmc_in_offset + 3'd3);

assign issue_dup_fu_178_p2 = (tmp9_fu_172_p2 & state_orig_issued_i);

assign issue_orig_fu_156_p0 = orig;

assign issue_orig_fu_156_p2 = (tmp_fu_150_p2 & issue_orig_fu_156_p0);

assign not_state_dup_issued_fu_166_p2 = (state_dup_issued_i ^ 1'd1);

assign state_dup_in = state_in_count_load_reg_352;

assign state_orig_in = state_in_count;

assign sum1_cast_fu_269_p1 = grp_fu_136_p2;

assign sum2_cast_fu_217_p1 = grp_fu_131_p2;

assign sum4_cast_fu_222_p1 = grp_fu_136_p2;

assign sum6_cast_fu_239_p1 = grp_fu_125_p2;

assign sum8_cast_fu_264_p1 = grp_fu_131_p2;

assign sum_cast_fu_200_p1 = grp_fu_125_p2;

assign tmp1_fu_294_p2 = (tmp_5_fu_278_p2 & tmp_4_reg_383);

assign tmp2_fu_299_p2 = (tmp_s_reg_378 & tmp_6_fu_288_p2);

assign tmp9_fu_172_p0 = dup;

assign tmp9_fu_172_p2 = (tmp9_fu_172_p0 & not_state_dup_issued_fu_166_p2);

assign tmp_4_fu_258_p2 = ((state_orig_val_1 == bmc_in_q1) ? 1'b1 : 1'b0);

assign tmp_5_fu_278_p2 = ((state_orig_val_2 == bmc_in_q0) ? 1'b1 : 1'b0);

assign tmp_6_fu_288_p2 = ((state_orig_val_3 == bmc_in_q1) ? 1'b1 : 1'b0);

assign tmp_7_fu_304_p2 = (tmp2_fu_299_p2 & tmp1_fu_294_p2);

assign tmp_8_fu_321_p2 = (state_in_count_load_reg_352 + 16'd1);

assign tmp_fu_150_p2 = (state_orig_issued_i ^ 1'd1);

assign tmp_s_fu_248_p2 = ((state_orig_val_0 == bmc_in_q0) ? 1'b1 : 1'b0);

endmodule //aqed_in
