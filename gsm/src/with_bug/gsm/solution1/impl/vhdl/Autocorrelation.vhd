-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Autocorrelation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    s_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of Autocorrelation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv32_C0000001 : STD_LOGIC_VECTOR (31 downto 0) := "11000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_FF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv31_4000 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal bitoff_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitoff_ce0 : STD_LOGIC;
    signal bitoff_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitoff_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitoff_ce1 : STD_LOGIC;
    signal bitoff_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitoff_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitoff_ce2 : STD_LOGIC;
    signal bitoff_q2 : STD_LOGIC_VECTOR (3 downto 0);
    signal smax_reg_231 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_reg_243 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_265 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_270 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_offset_cast1_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_offset_cast1_reg_852 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_858 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal k_1_fu_285_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal temp_0_smax_fu_343_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_1_i_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_reg_881 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_371_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_reg_887 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp8_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp8_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp9_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp9_reg_918 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_cast_fu_624_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal n_cast_reg_923 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_66_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_reg_931 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_79_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_79_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_79_fu_646_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_79_reg_939 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_1_reg_944 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_2_reg_950 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_3_reg_956 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_4_reg_961 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_25_i1_reg_966 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_25_i2_reg_971 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_addr_5_reg_976 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal s_addr_6_reg_981 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal s_addr_7_reg_986 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_addr_8_reg_991 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_128_2_fu_795_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_128_2_reg_996 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_128_3_fu_800_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_128_3_reg_1001 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal scalauto_fu_616_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_n_phi_fu_258_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal n_reg_254 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_cast_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_cast_cast_fu_451_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_i_cast_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_i_cast_fu_485_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_1_cast_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_2_cast_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_3_cast_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_1_cast_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_2_cast_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_3_cast_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_fu_783_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_128_1_fu_789_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal sum_fu_291_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_i_fu_315_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_68_fu_301_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_i_fu_321_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal smax_2_fu_329_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_assign_1_fu_357_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_387_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_lobit_i_cast_fu_379_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_65_fu_399_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_64_fu_391_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal a_assign_2_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_fu_419_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_77_fu_435_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_i_cast26_cast_fu_413_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_i_cast_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_i_cast_fu_475_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_78_fu_490_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_i_fu_510_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_i_fu_520_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sel_tmp2_i_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_i_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp20_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp21_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_i_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i1_cast_fu_506_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal newSel_v_fu_566_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal newSel_fu_574_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sel_tmp14_i_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_i_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_cast_fu_516_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_i_cast_fu_526_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal newSel1_fu_590_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_cond_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_cast_fu_580_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel22_cast_fu_598_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal newSel2_fu_602_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sel_tmp21_i_op_fu_610_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_67_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum2_1_fu_650_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum2_2_fu_660_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum2_3_fu_670_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_69_fu_680_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_97_cast_fu_685_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_70_fu_689_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_805_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_814_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_823_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_832_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum4_1_fu_753_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum4_2_fu_763_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum4_3_fu_773_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_71_fu_783_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_128_1_fu_789_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_805_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_i_cast_fu_699_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_805_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_814_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_814_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_823_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_823_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_832_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_832_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component aqed_top_mac_mulacud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Autocorrelation_bbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    bitoff_U : component Autocorrelation_bbkb
    generic map (
        DataWidth => 4,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bitoff_address0,
        ce0 => bitoff_ce0,
        q0 => bitoff_q0,
        address1 => bitoff_address1,
        ce1 => bitoff_ce1,
        q1 => bitoff_q1,
        address2 => bitoff_address2,
        ce2 => bitoff_ce2,
        q2 => bitoff_q2);

    aqed_top_mac_mulacud_U9 : component aqed_top_mac_mulacud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => grp_fu_805_p0,
        din1 => reg_265,
        din2 => grp_fu_805_p2,
        dout => grp_fu_805_p3);

    aqed_top_mac_mulacud_U10 : component aqed_top_mac_mulacud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => grp_fu_814_p0,
        din1 => reg_270,
        din2 => grp_fu_814_p2,
        dout => grp_fu_814_p3);

    aqed_top_mac_mulacud_U11 : component aqed_top_mac_mulacud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => grp_fu_823_p0,
        din1 => s_q1,
        din2 => grp_fu_823_p2,
        dout => grp_fu_823_p3);

    aqed_top_mac_mulacud_U12 : component aqed_top_mac_mulacud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => grp_fu_832_p0,
        din1 => s_q0,
        din2 => grp_fu_832_p2,
        dout => grp_fu_832_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond2_fu_279_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_243 <= k_1_fu_285_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                k_reg_243 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    n_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_fu_351_p2 = ap_const_lv1_1))) then 
                n_reg_254 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_reg_877 = ap_const_lv1_0))) then 
                n_reg_254 <= scalauto_fu_616_p3;
            end if; 
        end if;
    end process;

    reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_265 <= s_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_265 <= s_q0;
            end if; 
        end if;
    end process;

    reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_270 <= s_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_270 <= s_q1;
            end if; 
        end if;
    end process;

    smax_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond2_reg_858 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                smax_reg_231 <= temp_0_smax_fu_343_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                smax_reg_231 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond2_reg_858 <= exitcond2_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_fu_351_p2 = ap_const_lv1_0))) then
                icmp8_reg_898 <= icmp8_fu_445_p2;
                icmp9_reg_918 <= icmp9_fu_500_p2;
                icmp_reg_892 <= icmp_fu_429_p2;
                tmp_1_i_reg_881 <= tmp_1_i_fu_365_p2;
                tmp_74_reg_887 <= smax_reg_231(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                n_cast_reg_923 <= n_cast_fu_624_p1;
                or_cond_79_reg_935 <= or_cond_79_fu_640_p2;
                tmp_66_reg_931 <= tmp_66_fu_628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (or_cond_79_fu_640_p2 = ap_const_lv1_1))) then
                s_addr_1_reg_944 <= s_offset_cast1_reg_852(3 - 1 downto 0);
                s_addr_2_reg_950 <= sum2_1_cast_fu_655_p1(3 - 1 downto 0);
                tmp_79_reg_939 <= tmp_79_fu_646_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                s_addr_3_reg_956 <= sum2_2_cast_fu_665_p1(3 - 1 downto 0);
                s_addr_4_reg_961 <= sum2_3_cast_fu_675_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_66_reg_931 = ap_const_lv1_1))) then
                s_addr_5_reg_976 <= s_offset_cast1_reg_852(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                s_addr_6_reg_981 <= sum4_1_cast_fu_758_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                s_addr_7_reg_986 <= sum4_2_cast_fu_768_p1(3 - 1 downto 0);
                s_addr_8_reg_991 <= sum4_3_cast_fu_778_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    s_offset_cast1_reg_852(2 downto 0) <= s_offset_cast1_fu_275_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_128_2_reg_996 <= tmp_128_2_fu_795_p2;
                tmp_128_3_reg_1001 <= tmp_128_3_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_25_i1_reg_966 <= grp_fu_823_p3(30 downto 15);
                tmp_25_i2_reg_971 <= grp_fu_832_p3(30 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_reg_877 <= tmp_fu_351_p2;
            end if;
        end if;
    end process;
    s_offset_cast1_reg_852(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond2_fu_279_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, tmp_66_reg_931, or_cond_79_fu_640_p2, ap_CS_fsm_state8, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond2_fu_279_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond2_fu_279_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (or_cond_79_fu_640_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_66_reg_931 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    a_assign_1_fu_357_p3 <= (smax_reg_231 & ap_const_lv16_0);
    a_assign_2_fu_407_p2 <= (a_lobit_i_cast_fu_379_p3 xor a_assign_1_fu_357_p3);
    a_lobit_i_cast_fu_379_p3 <= 
        ap_const_lv32_FFFFFFFF when (tmp_74_fu_371_p3(0) = '1') else 
        ap_const_lv32_0;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond2_fu_279_p2)
    begin
        if ((exitcond2_fu_279_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_n_phi_fu_258_p4_assign_proc : process(tmp_reg_877, ap_CS_fsm_state5, scalauto_fu_616_p3, n_reg_254)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_reg_877 = ap_const_lv1_0))) then 
            ap_phi_mux_n_phi_fu_258_p4 <= scalauto_fu_616_p3;
        else 
            ap_phi_mux_n_phi_fu_258_p4 <= n_reg_254;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitoff_address0 <= tmp_9_i_cast_cast_fu_451_p3(8 - 1 downto 0);
    bitoff_address1 <= tmp_15_i_cast_fu_470_p1(8 - 1 downto 0);
    bitoff_address2 <= tmp_19_i_cast_fu_485_p1(8 - 1 downto 0);

    bitoff_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bitoff_ce0 <= ap_const_logic_1;
        else 
            bitoff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bitoff_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bitoff_ce1 <= ap_const_logic_1;
        else 
            bitoff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bitoff_ce2_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bitoff_ce2 <= ap_const_logic_1;
        else 
            bitoff_ce2 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_279_p2 <= "1" when (k_reg_243 = ap_const_lv3_4) else "0";
    grp_fu_805_p0 <= tmp_23_i_cast_fu_699_p1(15 - 1 downto 0);
    grp_fu_805_p2 <= ap_const_lv31_4000(16 - 1 downto 0);
    grp_fu_814_p0 <= tmp_23_i_cast_fu_699_p1(15 - 1 downto 0);
    grp_fu_814_p2 <= ap_const_lv31_4000(16 - 1 downto 0);
    grp_fu_823_p0 <= tmp_23_i_cast_fu_699_p1(15 - 1 downto 0);
    grp_fu_823_p2 <= ap_const_lv31_4000(16 - 1 downto 0);
    grp_fu_832_p0 <= tmp_23_i_cast_fu_699_p1(15 - 1 downto 0);
    grp_fu_832_p2 <= ap_const_lv31_4000(16 - 1 downto 0);
    icmp8_fu_445_p2 <= "1" when (tmp_77_fu_435_p4 = ap_const_lv8_0) else "0";
    icmp9_fu_500_p2 <= "1" when (tmp_78_fu_490_p4 = ap_const_lv24_0) else "0";
    icmp_fu_429_p2 <= "1" when (tmp_76_fu_419_p4 = ap_const_lv16_0) else "0";
    k_1_fu_285_p2 <= std_logic_vector(unsigned(k_reg_243) + unsigned(ap_const_lv3_1));
        n_cast_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_n_phi_fu_258_p4),16));

    newSel1_fu_590_p3 <= 
        tmp_17_i_cast_fu_516_p1 when (sel_tmp7_i_fu_546_p2(0) = '1') else 
        tmp_21_i_cast_fu_526_p1;
        newSel22_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(newSel1_fu_590_p3),6));

    newSel2_fu_602_p3 <= 
        newSel_cast_fu_580_p1 when (or_cond_fu_584_p2(0) = '1') else 
        newSel22_cast_fu_598_p1;
    newSel_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newSel_fu_574_p2),6));
    newSel_fu_574_p2 <= std_logic_vector(unsigned(tmp_i1_cast_fu_506_p1) + unsigned(newSel_v_fu_566_p3));
    newSel_v_fu_566_p3 <= 
        ap_const_lv5_17 when (sel_tmp20_i_fu_561_p2(0) = '1') else 
        ap_const_lv5_F;
    or_cond_79_fu_640_p2 <= (tmp_67_fu_634_p2 and tmp_66_fu_628_p2);
    or_cond_fu_584_p2 <= (sel_tmp20_i_fu_561_p2 or sel_tmp14_i_fu_556_p2);
    p_i_cast26_cast_fu_413_p2 <= (tmp_65_fu_399_p3 xor tmp_64_fu_391_p3);

    s_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, s_offset_cast1_reg_852, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, s_addr_2_reg_950, s_addr_4_reg_961, ap_CS_fsm_state7, ap_CS_fsm_state8, s_addr_6_reg_981, ap_CS_fsm_state9, s_addr_8_reg_991, ap_CS_fsm_state11, ap_block_pp0_stage0, sum_cast_fu_296_p1, sum2_3_cast_fu_675_p1, sum4_1_cast_fu_758_p1, sum4_3_cast_fu_778_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_address0 <= s_addr_8_reg_991;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            s_address0 <= s_addr_6_reg_981;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_address0 <= sum4_3_cast_fu_778_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_address0 <= sum4_1_cast_fu_758_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_address0 <= s_addr_4_reg_961;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= s_addr_2_reg_950;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_address0 <= sum2_3_cast_fu_675_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address0 <= s_offset_cast1_reg_852(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_address0 <= sum_cast_fu_296_p1(3 - 1 downto 0);
        else 
            s_address0 <= "XXX";
        end if; 
    end process;


    s_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state5, s_addr_1_reg_944, s_addr_3_reg_956, ap_CS_fsm_state7, s_addr_5_reg_976, ap_CS_fsm_state8, ap_CS_fsm_state9, s_addr_7_reg_986, ap_CS_fsm_state11, sum2_1_cast_fu_655_p1, sum2_2_cast_fu_665_p1, sum4_2_cast_fu_768_p1, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_address1 <= s_addr_7_reg_986;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_address1 <= sum4_2_cast_fu_768_p1(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            s_address1 <= s_addr_5_reg_976;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_address1 <= s_addr_3_reg_956;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address1 <= s_addr_1_reg_944;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_address1 <= sum2_2_cast_fu_665_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address1 <= sum2_1_cast_fu_655_p1(3 - 1 downto 0);
        else 
            s_address1 <= "XXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            s_ce0 <= ap_const_logic_1;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            s_ce1 <= ap_const_logic_1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state7, tmp_25_i2_reg_971, ap_CS_fsm_state8, ap_CS_fsm_state11, tmp_128_3_reg_1001, tmp_128_1_fu_789_p2, ap_CS_fsm_state12, grp_fu_814_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_d0 <= tmp_128_3_reg_1001;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            s_d0 <= tmp_128_1_fu_789_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_d0 <= tmp_25_i2_reg_971;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d0 <= grp_fu_814_p3(30 downto 15);
        else 
            s_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_d1_assign_proc : process(tmp_25_i1_reg_966, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_128_2_reg_996, ap_CS_fsm_state11, tmp_71_fu_783_p2, ap_CS_fsm_state12, grp_fu_805_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_d1 <= tmp_128_2_reg_996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            s_d1 <= tmp_71_fu_783_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_d1 <= tmp_25_i1_reg_966;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_d1 <= grp_fu_805_p3(30 downto 15);
        else 
            s_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_offset_cast1_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_offset),64));

    s_we0_assign_proc : process(tmp_66_reg_931, or_cond_79_reg_935, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_66_reg_931 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (or_cond_79_reg_935 = ap_const_lv1_1)))) then 
            s_we0 <= ap_const_logic_1;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(tmp_66_reg_931, or_cond_79_reg_935, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_66_reg_931 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (or_cond_79_reg_935 = ap_const_lv1_1)))) then 
            s_we1 <= ap_const_logic_1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    scalauto_fu_616_p3 <= 
        ap_const_lv6_4 when (tmp_1_i_reg_881(0) = '1') else 
        sel_tmp21_i_op_fu_610_p2;
    sel_tmp14_i_fu_556_p2 <= (tmp21_fu_551_p2 and icmp_reg_892);
    sel_tmp20_i_fu_561_p2 <= (sel_tmp6_i_fu_535_p2 and icmp9_reg_918);
    sel_tmp21_i_op_fu_610_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) - unsigned(newSel2_fu_602_p3));
    sel_tmp2_i_fu_530_p2 <= (icmp_reg_892 xor ap_const_lv1_1);
    sel_tmp6_i_fu_535_p2 <= (tmp_1_i_reg_881 xor ap_const_lv1_1);
    sel_tmp7_i_fu_546_p2 <= (tmp20_fu_540_p2 and icmp8_reg_898);
    smax_2_fu_329_p3 <= 
        tmp_36_i_fu_321_p3 when (tmp_68_fu_301_p3(0) = '1') else 
        s_q0;
    sum2_1_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_1_fu_650_p2),64));
    sum2_1_fu_650_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(s_offset));
    sum2_2_cast_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_2_fu_660_p2),64));
    sum2_2_fu_660_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(s_offset));
    sum2_3_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_3_fu_670_p2),64));
    sum2_3_fu_670_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) + unsigned(s_offset));
    sum4_1_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_1_fu_753_p2),64));
    sum4_1_fu_753_p2 <= std_logic_vector(unsigned(s_offset) + unsigned(ap_const_lv3_1));
    sum4_2_cast_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_2_fu_763_p2),64));
    sum4_2_fu_763_p2 <= std_logic_vector(unsigned(s_offset) + unsigned(ap_const_lv3_2));
    sum4_3_cast_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_3_fu_773_p2),64));
    sum4_3_fu_773_p2 <= std_logic_vector(unsigned(s_offset) + unsigned(ap_const_lv3_3));
    sum_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_291_p2),64));
    sum_fu_291_p2 <= std_logic_vector(unsigned(k_reg_243) + unsigned(s_offset));
    temp_0_smax_fu_343_p3 <= 
        smax_2_fu_329_p3 when (tmp_s_fu_337_p2(0) = '1') else 
        smax_reg_231;
    tmp20_fu_540_p2 <= (sel_tmp6_i_fu_535_p2 and sel_tmp2_i_fu_530_p2);
    tmp21_fu_551_p2 <= (tmp_74_reg_887 and sel_tmp6_i_fu_535_p2);
    tmp_128_1_fu_789_p0 <= reg_270;
    tmp_128_1_fu_789_p2 <= std_logic_vector(shift_left(unsigned(tmp_128_1_fu_789_p0),to_integer(unsigned('0' & n_cast_reg_923(16-1 downto 0)))));
    tmp_128_2_fu_795_p2 <= std_logic_vector(shift_left(unsigned(s_q1),to_integer(unsigned('0' & n_cast_reg_923(16-1 downto 0)))));
    tmp_128_3_fu_800_p2 <= std_logic_vector(shift_left(unsigned(s_q0),to_integer(unsigned('0' & n_cast_reg_923(16-1 downto 0)))));
    tmp_14_i_cast_fu_460_p4 <= p_i_cast26_cast_fu_413_p2(23 downto 16);
    tmp_15_i_cast_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_i_cast_fu_460_p4),64));
    tmp_17_i_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_i_fu_510_p2),5));
    tmp_17_i_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) + unsigned(bitoff_q1));
    tmp_18_i_cast_fu_475_p4 <= a_assign_2_fu_407_p2(31 downto 24);
    tmp_19_i_cast_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_i_cast_fu_475_p4),64));
    tmp_1_i_fu_365_p2 <= "1" when (signed(a_assign_1_fu_357_p3) < signed(ap_const_lv32_C0000001)) else "0";
        tmp_21_i_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_i_fu_520_p2),5));

    tmp_21_i_fu_520_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(bitoff_q2));
    tmp_23_i_cast_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_fu_689_p2),31));
    tmp_35_i_fu_315_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(s_q0));
    tmp_36_i_fu_321_p3 <= 
        ap_const_lv16_7FFF when (tmp_i_fu_309_p2(0) = '1') else 
        tmp_35_i_fu_315_p2;
    tmp_64_fu_391_p3 <= (tmp_75_fu_387_p1 & ap_const_lv16_0);
    tmp_65_fu_399_p3 <= 
        ap_const_lv24_FFFFFF when (tmp_74_fu_371_p3(0) = '1') else 
        ap_const_lv24_0;
    tmp_66_fu_628_p2 <= "1" when (signed(ap_phi_mux_n_phi_fu_258_p4) > signed(ap_const_lv6_0)) else "0";
    tmp_67_fu_634_p2 <= "1" when (signed(ap_phi_mux_n_phi_fu_258_p4) < signed(ap_const_lv6_5)) else "0";
    tmp_68_fu_301_p3 <= s_q0(15 downto 15);
    tmp_69_fu_680_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(tmp_79_reg_939));
    tmp_70_fu_689_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv15_4000),to_integer(unsigned('0' & tmp_97_cast_fu_685_p1(15-1 downto 0)))));
    tmp_71_fu_783_p0 <= reg_265;
    tmp_71_fu_783_p2 <= std_logic_vector(shift_left(unsigned(tmp_71_fu_783_p0),to_integer(unsigned('0' & n_cast_reg_923(16-1 downto 0)))));
    tmp_74_fu_371_p3 <= smax_reg_231(15 downto 15);
    tmp_75_fu_387_p1 <= smax_reg_231(8 - 1 downto 0);
    tmp_76_fu_419_p4 <= a_assign_2_fu_407_p2(31 downto 16);
    tmp_77_fu_435_p4 <= a_assign_2_fu_407_p2(31 downto 24);
    tmp_78_fu_490_p4 <= a_assign_2_fu_407_p2(31 downto 8);
    tmp_79_fu_646_p1 <= ap_phi_mux_n_phi_fu_258_p4(3 - 1 downto 0);
    tmp_97_cast_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_fu_680_p2),15));
    tmp_9_i_cast_cast_fu_451_p3 <= 
        ap_const_lv64_FF when (tmp_74_fu_371_p3(0) = '1') else 
        ap_const_lv64_0;
    tmp_fu_351_p2 <= "1" when (smax_reg_231 = ap_const_lv16_0) else "0";
    tmp_i1_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bitoff_q0),5));
    tmp_i_fu_309_p2 <= "1" when (s_q0 = ap_const_lv16_8000) else "0";
    tmp_s_fu_337_p2 <= "1" when (signed(smax_2_fu_329_p3) > signed(smax_reg_231)) else "0";
end behav;
