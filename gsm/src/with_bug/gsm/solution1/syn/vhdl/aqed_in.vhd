-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aqed_in is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bmc_in_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bmc_in_ce0 : OUT STD_LOGIC;
    bmc_in_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bmc_in_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bmc_in_ce1 : OUT STD_LOGIC;
    bmc_in_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    bmc_in_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    orig : IN STD_LOGIC;
    dup : IN STD_LOGIC;
    state_orig_issued_i : IN STD_LOGIC_VECTOR (0 downto 0);
    state_orig_issued_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    state_orig_issued_o_ap_vld : OUT STD_LOGIC;
    state_dup_issued_i : IN STD_LOGIC_VECTOR (0 downto 0);
    state_dup_issued_o : OUT STD_LOGIC_VECTOR (0 downto 0);
    state_dup_issued_o_ap_vld : OUT STD_LOGIC;
    state_orig_in : OUT STD_LOGIC_VECTOR (15 downto 0);
    state_orig_in_ap_vld : OUT STD_LOGIC;
    state_dup_in : OUT STD_LOGIC_VECTOR (15 downto 0);
    state_dup_in_ap_vld : OUT STD_LOGIC );
end;


architecture behav of aqed_in is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_in_count : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal state_orig_val_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal state_orig_val_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal state_orig_val_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal state_orig_val_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal bmc_in_addr_reg_339 : STD_LOGIC_VECTOR (2 downto 0);
    signal issue_orig_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal issue_orig_reg_344 : STD_LOGIC_VECTOR (0 downto 0);
    signal issue_dup_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal issue_dup_reg_348 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_in_count_load_reg_352 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_4_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal bmc_in_offset_cast1_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_217_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum6_cast_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_321_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_7_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal issue_orig_fu_156_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_172_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_state_dup_issued_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_125_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                bmc_in_addr_reg_339 <= bmc_in_offset_cast1_fu_141_p1(3 - 1 downto 0);
                issue_dup_reg_348 <= issue_dup_fu_178_p2;
                issue_orig_reg_344 <= issue_orig_fu_156_p2;
                state_in_count_load_reg_352 <= state_in_count;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                state_in_count <= tmp_8_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                state_orig_val_0 <= bmc_in_q0;
                state_orig_val_1 <= bmc_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((issue_orig_reg_344 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                state_orig_val_2 <= bmc_in_q0;
                state_orig_val_3 <= bmc_in_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_4_reg_383 <= tmp_4_fu_258_p2;
                tmp_s_reg_378 <= tmp_s_fu_248_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, issue_orig_fu_156_p2, issue_dup_reg_348, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((issue_orig_fu_156_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((issue_orig_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((issue_dup_reg_348 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bmc_in_address0_assign_proc : process(ap_CS_fsm_state1, bmc_in_addr_reg_339, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, bmc_in_offset_cast1_fu_141_p1, sum2_cast_fu_217_p1, sum8_cast_fu_264_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bmc_in_address0 <= sum8_cast_fu_264_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bmc_in_address0 <= bmc_in_addr_reg_339;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bmc_in_address0 <= sum2_cast_fu_217_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bmc_in_address0 <= bmc_in_offset_cast1_fu_141_p1(3 - 1 downto 0);
        else 
            bmc_in_address0 <= "XXX";
        end if; 
    end process;


    bmc_in_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, sum_cast_fu_200_p1, sum4_cast_fu_222_p1, sum6_cast_fu_239_p1, sum1_cast_fu_269_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bmc_in_address1 <= sum1_cast_fu_269_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bmc_in_address1 <= sum6_cast_fu_239_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bmc_in_address1 <= sum4_cast_fu_222_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bmc_in_address1 <= sum_cast_fu_200_p1(3 - 1 downto 0);
        else 
            bmc_in_address1 <= "XXX";
        end if; 
    end process;


    bmc_in_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            bmc_in_ce0 <= ap_const_logic_1;
        else 
            bmc_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bmc_in_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            bmc_in_ce1 <= ap_const_logic_1;
        else 
            bmc_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    bmc_in_offset_cast1_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bmc_in_offset),64));
    grp_fu_125_p2 <= std_logic_vector(unsigned(bmc_in_offset) + unsigned(ap_const_lv3_1));
    grp_fu_131_p2 <= std_logic_vector(unsigned(bmc_in_offset) + unsigned(ap_const_lv3_2));
    grp_fu_136_p2 <= std_logic_vector(unsigned(bmc_in_offset) + unsigned(ap_const_lv3_3));
    issue_dup_fu_178_p2 <= (tmp9_fu_172_p2 and state_orig_issued_i);
    issue_orig_fu_156_p0 <= (0=>orig, others=>'-');
    issue_orig_fu_156_p2 <= (tmp_fu_150_p2 and issue_orig_fu_156_p0);
    not_state_dup_issued_fu_166_p2 <= (state_dup_issued_i xor ap_const_lv1_1);
    state_dup_in <= state_in_count_load_reg_352;

    state_dup_in_ap_vld_assign_proc : process(issue_dup_reg_348, ap_CS_fsm_state5, tmp_7_fu_304_p2)
    begin
        if (((tmp_7_fu_304_p2 = ap_const_lv1_1) and (issue_dup_reg_348 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_dup_in_ap_vld <= ap_const_logic_1;
        else 
            state_dup_in_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_dup_issued_o_assign_proc : process(state_dup_issued_i, issue_dup_reg_348, ap_CS_fsm_state5, tmp_7_fu_304_p2)
    begin
        if (((issue_dup_reg_348 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_dup_issued_o <= tmp_7_fu_304_p2;
        else 
            state_dup_issued_o <= state_dup_issued_i;
        end if; 
    end process;


    state_dup_issued_o_ap_vld_assign_proc : process(issue_dup_reg_348, ap_CS_fsm_state5)
    begin
        if (((issue_dup_reg_348 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            state_dup_issued_o_ap_vld <= ap_const_logic_1;
        else 
            state_dup_issued_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_orig_in <= state_in_count;

    state_orig_in_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, issue_orig_fu_156_p2)
    begin
        if (((issue_orig_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            state_orig_in_ap_vld <= ap_const_logic_1;
        else 
            state_orig_in_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    state_orig_issued_o_assign_proc : process(ap_start, ap_CS_fsm_state1, state_orig_issued_i, issue_orig_fu_156_p2)
    begin
        if (((issue_orig_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            state_orig_issued_o <= ap_const_lv1_1;
        else 
            state_orig_issued_o <= state_orig_issued_i;
        end if; 
    end process;


    state_orig_issued_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, issue_orig_fu_156_p2)
    begin
        if (((issue_orig_fu_156_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            state_orig_issued_o_ap_vld <= ap_const_logic_1;
        else 
            state_orig_issued_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum1_cast_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_136_p2),64));
    sum2_cast_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_131_p2),64));
    sum4_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_136_p2),64));
    sum6_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_125_p2),64));
    sum8_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_131_p2),64));
    sum_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_125_p2),64));
    tmp1_fu_294_p2 <= (tmp_5_fu_278_p2 and tmp_4_reg_383);
    tmp2_fu_299_p2 <= (tmp_s_reg_378 and tmp_6_fu_288_p2);
    tmp9_fu_172_p0 <= (0=>dup, others=>'-');
    tmp9_fu_172_p2 <= (tmp9_fu_172_p0 and not_state_dup_issued_fu_166_p2);
    tmp_4_fu_258_p2 <= "1" when (state_orig_val_1 = bmc_in_q1) else "0";
    tmp_5_fu_278_p2 <= "1" when (state_orig_val_2 = bmc_in_q0) else "0";
    tmp_6_fu_288_p2 <= "1" when (state_orig_val_3 = bmc_in_q1) else "0";
    tmp_7_fu_304_p2 <= (tmp2_fu_299_p2 and tmp1_fu_294_p2);
    tmp_8_fu_321_p2 <= std_logic_vector(unsigned(state_in_count_load_reg_352) + unsigned(ap_const_lv16_1));
    tmp_fu_150_p2 <= (state_orig_issued_i xor ap_const_lv1_1);
    tmp_s_fu_248_p2 <= "1" when (state_orig_val_0 = bmc_in_q0) else "0";
end behav;
