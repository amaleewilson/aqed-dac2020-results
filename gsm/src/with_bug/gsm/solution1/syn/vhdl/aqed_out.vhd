-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aqed_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    acc_out_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    state_orig_issued : IN STD_LOGIC_VECTOR (0 downto 0);
    state_orig_in : IN STD_LOGIC_VECTOR (15 downto 0);
    state_orig_done : OUT STD_LOGIC_VECTOR (0 downto 0);
    state_orig_done_ap_vld : OUT STD_LOGIC;
    state_dup_in : IN STD_LOGIC_VECTOR (15 downto 0);
    state_dup_issued : IN STD_LOGIC_VECTOR (0 downto 0);
    bmc_in_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bmc_in_ce0 : OUT STD_LOGIC;
    bmc_in_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    bmc_in_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    bmc_in_ce1 : OUT STD_LOGIC;
    bmc_in_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of aqed_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_out_count : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal state_acc_out1_index : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal state_qed_done : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal state_qed_check : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal state_orig_issued_lo_load_fu_165_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_out_count_load_reg_476 : STD_LOGIC_VECTOR (15 downto 0);
    signal brmerge_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_reg_496 : STD_LOGIC_VECTOR (0 downto 0);
    signal bmc_in_load_reg_505 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bmc_in_load_1_reg_510 : STD_LOGIC_VECTOR (15 downto 0);
    signal load_index_cast_fu_284_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal load_index_cast_reg_525 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal bmc_in_load_2_reg_541 : STD_LOGIC_VECTOR (15 downto 0);
    signal bmc_in_load_3_reg_546 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_6_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_561 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal state_qed_done_flag_reg_131 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_qed_done_loc_reg_147 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_out_offset_cast1_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex2_cast_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex239_cast_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex248_cast_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal gepindex257_cast_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_418_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_state_qed_done_flag_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_not_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_249_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum2_fu_260_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum4_fu_270_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mem_index_gep1_fu_293_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex_fu_307_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_index_gep2_fu_320_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_325_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex1_fu_333_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mem_index_gep3_fu_346_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_351_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal gepindex2_fu_359_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o2_qed_done_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_0_preg <= o2_qed_done_fu_434_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_return_1_preg <= state_qed_check;
                end if; 
            end if;
        end if;
    end process;


    state_qed_done_flag_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((brmerge_fu_243_p2 = ap_const_lv1_1) and (state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                state_qed_done_flag_reg_131 <= ap_const_lv1_0;
            elsif (((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_1) and (brmerge_reg_496 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                state_qed_done_flag_reg_131 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    state_qed_done_loc_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((brmerge_fu_243_p2 = ap_const_lv1_1) and (state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                state_qed_done_loc_reg_147 <= state_qed_done;
            elsif (((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_1) and (brmerge_reg_496 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                state_qed_done_loc_reg_147 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bmc_in_load_1_reg_510 <= bmc_in_q1;
                bmc_in_load_reg_505 <= bmc_in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bmc_in_load_2_reg_541 <= bmc_in_q0;
                bmc_in_load_3_reg_546 <= bmc_in_q1;
                    load_index_cast_reg_525(2 downto 0) <= load_index_cast_fu_284_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                brmerge_reg_496 <= brmerge_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_201_p2 = ap_const_lv1_1) and (state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                state_acc_out1_index <= acc_out_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                state_out_count <= tmp_3_fu_418_p2;
                tmp_2_reg_571 <= tmp_2_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                state_out_count_load_reg_476 <= state_out_count;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_1) and (brmerge_reg_496 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                state_qed_check <= tmp_1_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_state_qed_done_flag_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                state_qed_done <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_6_reg_561 <= tmp_6_fu_372_p2;
                tmp_7_reg_566 <= tmp_7_fu_377_p2;
            end if;
        end if;
    end process;
    load_index_cast_reg_525(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, state_orig_issued_lo_load_fu_165_p1, brmerge_fu_243_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_1) and (brmerge_fu_243_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and ((brmerge_fu_243_p2 = ap_const_lv1_1) or (state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    acc_out_offset_cast1_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(acc_out_offset),64));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state6, o2_qed_done_fu_434_p2, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_0 <= o2_qed_done_fu_434_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(state_qed_check, ap_CS_fsm_state6, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_return_1 <= state_qed_check;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    bmc_in_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, acc_out_offset_cast1_fu_160_p1, sum2_cast_fu_265_p1, gepindex2_cast_fu_288_p1, gepindex248_cast_fu_341_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bmc_in_address0 <= gepindex248_cast_fu_341_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bmc_in_address0 <= gepindex2_cast_fu_288_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bmc_in_address0 <= sum2_cast_fu_265_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bmc_in_address0 <= acc_out_offset_cast1_fu_160_p1(3 - 1 downto 0);
        else 
            bmc_in_address0 <= "XXX";
        end if; 
    end process;


    bmc_in_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, sum_cast_fu_255_p1, sum4_cast_fu_275_p1, gepindex239_cast_fu_315_p1, gepindex257_cast_fu_367_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bmc_in_address1 <= gepindex257_cast_fu_367_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bmc_in_address1 <= gepindex239_cast_fu_315_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bmc_in_address1 <= sum4_cast_fu_275_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            bmc_in_address1 <= sum_cast_fu_255_p1(3 - 1 downto 0);
        else 
            bmc_in_address1 <= "XXX";
        end if; 
    end process;


    bmc_in_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            bmc_in_ce0 <= ap_const_logic_1;
        else 
            bmc_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bmc_in_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            bmc_in_ce1 <= ap_const_logic_1;
        else 
            bmc_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_fu_243_p2 <= (state_qed_done or or_cond_not_fu_237_p2);
    gepindex1_fu_333_p3 <= 
        ap_const_lv4_7 when (tmp_4_fu_325_p3(0) = '1') else 
        mem_index_gep2_fu_320_p2;
    gepindex239_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex_fu_307_p3),64));
    gepindex248_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex1_fu_333_p3),64));
    gepindex257_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gepindex2_fu_359_p3),64));
    gepindex2_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_acc_out1_index),64));
    gepindex2_fu_359_p3 <= 
        ap_const_lv4_7 when (tmp_10_fu_351_p3(0) = '1') else 
        mem_index_gep3_fu_346_p2;
    gepindex_fu_307_p3 <= 
        ap_const_lv4_7 when (tmp_fu_299_p3(0) = '1') else 
        mem_index_gep1_fu_293_p2;
    load_index_cast_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_acc_out1_index),4));
    mem_index_gep1_fu_293_p2 <= std_logic_vector(unsigned(load_index_cast_fu_284_p1) + unsigned(ap_const_lv4_1));
    mem_index_gep2_fu_320_p2 <= std_logic_vector(unsigned(load_index_cast_reg_525) + unsigned(ap_const_lv4_2));
    mem_index_gep3_fu_346_p2 <= std_logic_vector(unsigned(load_index_cast_reg_525) + unsigned(ap_const_lv4_3));
    o2_qed_done_fu_434_p2 <= (tmp_2_reg_571 or state_qed_done_loc_reg_147);
    or_cond_fu_231_p2 <= (tmp_5_fu_225_p2 and state_dup_issued);
    or_cond_not_fu_237_p2 <= (or_cond_fu_231_p2 xor ap_const_lv1_1);
    p_state_qed_done_flag_fu_429_p2 <= (tmp_2_reg_571 or state_qed_done_flag_reg_131);
    rev_fu_189_p2 <= (ult_fu_183_p2 xor ap_const_lv1_1);

    state_orig_done_assign_proc : process(ap_start, ap_CS_fsm_state1, state_orig_issued_lo_load_fu_165_p1, rev_fu_189_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
            if ((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_1)) then 
                state_orig_done <= rev_fu_189_p2;
            elsif ((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_0)) then 
                state_orig_done <= ap_const_lv1_0;
            else 
                state_orig_done <= "X";
            end if;
        else 
            state_orig_done <= "X";
        end if; 
    end process;


    state_orig_done_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, state_orig_issued_lo_load_fu_165_p1)
    begin
        if ((((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((state_orig_issued_lo_load_fu_165_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            state_orig_done_ap_vld <= ap_const_logic_1;
        else 
            state_orig_done_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    state_orig_issued_lo_load_fu_165_p1 <= state_orig_issued;
    sum2_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_260_p2),64));
    sum2_fu_260_p2 <= std_logic_vector(unsigned(acc_out_offset) + unsigned(ap_const_lv3_2));
    sum4_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_270_p2),64));
    sum4_fu_270_p2 <= std_logic_vector(unsigned(acc_out_offset) + unsigned(ap_const_lv3_3));
    sum_cast_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_249_p2),64));
    sum_fu_249_p2 <= std_logic_vector(unsigned(acc_out_offset) + unsigned(ap_const_lv3_1));
    tmp1_fu_392_p2 <= (tmp_7_reg_566 and tmp_6_reg_561);
    tmp2_fu_396_p2 <= (tmp_9_fu_387_p2 and tmp_8_fu_382_p2);
    tmp_10_fu_351_p3 <= mem_index_gep3_fu_346_p2(3 downto 3);
    tmp_1_fu_402_p2 <= (tmp2_fu_396_p2 and tmp1_fu_392_p2);
    tmp_2_fu_414_p2 <= "1" when (unsigned(state_out_count_load_reg_476) > unsigned(state_dup_in)) else "0";
    tmp_3_fu_418_p2 <= std_logic_vector(unsigned(state_out_count_load_reg_476) + unsigned(ap_const_lv16_1));
    tmp_4_fu_325_p3 <= mem_index_gep2_fu_320_p2(3 downto 3);
    tmp_5_fu_225_p2 <= "1" when (state_out_count = state_dup_in) else "0";
    tmp_6_fu_372_p2 <= "1" when (bmc_in_q0 = bmc_in_load_reg_505) else "0";
    tmp_7_fu_377_p2 <= "1" when (bmc_in_q1 = bmc_in_load_1_reg_510) else "0";
    tmp_8_fu_382_p2 <= "1" when (bmc_in_q0 = bmc_in_load_2_reg_541) else "0";
    tmp_9_fu_387_p2 <= "1" when (bmc_in_q1 = bmc_in_load_3_reg_546) else "0";
    tmp_fu_299_p3 <= mem_index_gep1_fu_293_p2(3 downto 3);
    tmp_s_fu_201_p2 <= "1" when (state_out_count = state_orig_in) else "0";
    ult_fu_183_p2 <= "1" when (unsigned(state_out_count) < unsigned(state_orig_in)) else "0";
end behav;
