21,22c21
< #include "private.h"
< #include <stdint.h>
---
> 
30c29
< #define N 4
---
> #define N 160
32c31
< #define L 9
---
> 
34c33
<   { 81, 10854, 1893, -10291/*, 7614, 29718, 20475, -29215, -18949, -29806,
---
>   { 81, 10854, 1893, -10291, 7614, 29718, 20475, -29215, -18949, -29806,
57c56
<   -14833, -6658, 32058, 4020, 10461, 15159*/
---
>   -14833, -6658, 32058, 4020, 10461, 15159
61c60
<   { 80, 10848, 1888, -10288/*, 7616, 29712, 20480, -29216, -18944, -29808,
---
>   { 80, 10848, 1888, -10288, 7616, 29712, 20480, -29216, -18944, -29808,
84c83
<   -6656, 32064, 4016, 10464, 15152*/
---
>   -6656, 32064, 4016, 10464, 15152
91c90
< gsm ()
---
> main ()
109c108
<       printf ("Result:%d\n", main_result);
---
>       printf ("%d\n", main_result);
112,307d110
< 
< 
< struct st{// initialization 
< word orig_val[N]={0}; word * acc_out1; word orig_out1[N]={0}; longword orig_out2[M] = {0}; word dup_out1[N]={0}; word dup_out2[M] = {0}; uint16_t orig_in=0xFFFF; word orig_out[N]={0}; bool orig_issued=0; bool dup_issued=0; uint16_t dup_in=0xFFFF; uint16_t in_count=0; uint16_t out_count=0; bool orig_done=0; bool dup_done=0; bool qed_done; bool qed_check; bool index;};
< 
< st state;
< 
< struct out1{
<   uint8_t num_out;
< };
< 
< struct out2{
<   bool qed_done;
<   bool qed_check;
<   bool orig_done;
<   uint8_t check1;
<   uint8_t check2;
< 
< };
< 
< #define scale 2
< 
< struct out3{
<   bool qed_done;
<   bool qed_check;
<   bool orig_issued;
<   bool orig_done;
<   uint8_t check1;
<   uint8_t check2;
<   word bmc_in[scale*N];
<   word LARc_out[scale*M];
< 
< };
< 
< 
< out1 aqed_in (word *bmc_in, bool orig, bool dup) {
< 
<      int i;
< 
<       bool issue_orig = ((orig) && (!state.orig_issued)); 
< 
<       bool issue_dup = ((dup) && (!state.dup_issued) && (state.orig_issued));
< 
<       if (issue_orig){
<          state.orig_issued =1; 
<          state.orig_in =state.in_count; 
<          state.orig_val[0] = *(bmc_in);
<          state.orig_val[1] = *(bmc_in + 1);
<          state.orig_val[2] = *(bmc_in + 2);
<          state.orig_val[3] = *(bmc_in + 3);
< /*         state.orig_val[4] = *(bmc_in + 4);
<          state.orig_val[5] = *(bmc_in + 5);
<          state.orig_val[6] = *(bmc_in + 6);
<          state.orig_val[7] = *(bmc_in + 7);
<          state.orig_val[8] = *(bmc_in + 8);
<          state.orig_val[9] = *(bmc_in + 9);*/
<          
< 
<       }
< 
<       if (issue_dup){
<          state.dup_issued = ((state.orig_val[0] == *(bmc_in)) && (state.orig_val[1] == *(bmc_in + 1)) &&
<                              (state.orig_val[2] == *(bmc_in + 2)) && (state.orig_val[3] == *(bmc_in + 3)));
<          if(state.dup_issued) {
<                state.dup_in =state.in_count;  
<          }
<       }
<        state.in_count =state.in_count + 1;
<        out1 o1;
<        o1.num_out = 0;
< 
<    return o1;
< }
< 
< out2 aqed_out (word *acc_out, word *acc_out2) {
< 
< 
<    int check1 = 0;
<    int check2 = 0;
<    int i;
<    state.orig_done = state.orig_issued && (state.out_count>= state.orig_in);
<    if (state.orig_issued && (state.out_count == state.orig_in)){
<         state.acc_out1 = acc_out;
<    }
<    if (state.orig_issued && state.dup_issued && (state.out_count == state.dup_in) && !state.qed_done){
<         state.qed_done = 1;
< 
<          state.orig_out1[0] = *(state.acc_out1);
<          state.orig_out1[1] = *(state.acc_out1 + 1);
<          state.orig_out1[2] = *(state.acc_out1 + 2);
<          state.orig_out1[3] = *(state.acc_out1 + 3);
< /*         state.orig_out1[4] = *(state.acc_out1 + 4);
<          state.orig_out1[5] = *(state.acc_out1 + 5);
<          state.orig_out1[6] = *(state.acc_out1 + 6);
<          state.orig_out1[7] = *(state.acc_out1 + 7);
<          state.orig_out1[8] = *(state.acc_out1 + 8);
<          state.orig_out1[9] = *(state.acc_out1 + 9);*/
< 
<          state.dup_out1[0] = *(acc_out);
<          state.dup_out1[1] = *(acc_out + 1);
<          state.dup_out1[2] = *(acc_out + 2);
<          state.dup_out1[3] = *(acc_out + 3);
< /*         state.dup_out1[4] = *(acc_out + 4);
<          state.dup_out1[5] = *(acc_out + 5);
<          state.dup_out1[6] = *(acc_out + 6);
<          state.dup_out1[7] = *(acc_out + 7);
<          state.dup_out1[8] = *(acc_out + 8);
<          state.dup_out1[9] = *(acc_out + 9);*/
<          state.qed_check = ((state.orig_out1[0] == state.dup_out1[0]) && (state.orig_out1[1] == state.dup_out1[1]) &&
<                              (state.orig_out1[2] == state.dup_out1[2]) && (state.orig_out1[3] == state.dup_out1[3]) /*&&
<                              (state.orig_out1[4] == state.dup_out1[4]) && (state.orig_out1[5] == state.dup_out1[5]) &&
<                              (state.orig_out1[6] == state.dup_out1[6]) && (state.orig_out1[7] == state.dup_out1[7]) &&
<                              (state.orig_out1[8] == state.dup_out1[8]) && (state.orig_out1[9] == state.dup_out1[9])*/);
<    }
<    if (state.out_count > state.dup_in){
<         state.qed_done = 1;
<    }
<    state.out_count =state.out_count + 1;
<    out2 o2;
<    o2.qed_done = state.qed_done;
<    o2.qed_check = state.qed_check;
<    o2.check1 = check1;
<    o2.check2 = check2;
<    
<    return o2;
< }
< 
< 
< void increment (word *a, word *b){
<    int i;
< 
<        for (i = 0; i <= N; i++){
<         #pragma HLS PIPELINE 
<            a[i] = a[i] + i;
<         }
<         for (i = 0; i < M; i++){
<         #pragma HLS PIPELINE
<            b[i] = a[i] + a[i];
<         }
< }
< 
< word bmc_in[scale*N];
< 
< word LARc_out[scale*M];
< 
< 
< 
< uint8_t mem_num = 0;
< 
< #pragma design top
< out3 aqed_top (bool orig, bool dup) {
< 
< out1 o1;
< #pragma HLS data_pack variable=o1
< out2 o2;
< #pragma HLS data_pack variable=o2
< out3 o3;
< #pragma HLS data_pack variable=o3
< 
< word *inData;
< word *outLARc;
< 
< word *inData_o;
< word *outLARc_o;
< 
< 
< //Iterate through the memory
< inData = &bmc_in[(state.index)*N];
< outLARc = &LARc_out[(state.index)*M];
< 
< inData_o = &bmc_in[0];
< outLARc_o = &LARc_out[0];
< 
< 
< o1 = aqed_in(inData, orig, dup);
< 
< Gsm_LPC_Analysis(inData, outLARc);
< 
< o2 = aqed_out(inData, outLARc);
< 
< if (state.index == 1){
<     state.index = 0;}
< else {
<     state.index = 1;}
< 
< o3.qed_done = o2.qed_done;
< o3.qed_check = o2.qed_check;
< o3.orig_issued = state.orig_issued;
< o3.orig_done = state.orig_done;
< o3.check1 = o2.check1;
< o3.check2 = o2.check2;
< 
< return o3;
< 
< }
< 
