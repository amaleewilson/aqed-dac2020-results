// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "gsm_add.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gsm_add::ap_const_logic_1 = sc_dt::Log_1;
const bool gsm_add::ap_const_boolean_1 = true;
const sc_lv<17> gsm_add::ap_const_lv17_18000 = "11000000000000000";
const sc_lv<32> gsm_add::ap_const_lv32_F = "1111";
const sc_lv<32> gsm_add::ap_const_lv32_10 = "10000";
const sc_lv<2> gsm_add::ap_const_lv2_1 = "1";
const sc_lv<16> gsm_add::ap_const_lv16_8000 = "1000000000000000";
const sc_lv<16> gsm_add::ap_const_lv16_7FFF = "111111111111111";
const sc_logic gsm_add::ap_const_logic_0 = sc_dt::Log_0;

gsm_add::gsm_add(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_fu_88_p2 );
    sensitive << ( phitmp_fu_80_p3 );
    sensitive << ( tmp_2_fu_74_p2 );

    SC_METHOD(thread_b_cast_fu_34_p0);
    sensitive << ( b );

    SC_METHOD(thread_b_cast_fu_34_p1);
    sensitive << ( b_cast_fu_34_p0 );

    SC_METHOD(thread_icmp_fu_68_p2);
    sensitive << ( tmp_1_fu_58_p4 );

    SC_METHOD(thread_phitmp_fu_80_p3);
    sensitive << ( tmp_s_fu_52_p2 );

    SC_METHOD(thread_sum_fu_46_p2);
    sensitive << ( tmp_cast_fu_38_p1 );
    sensitive << ( tmp_cast_19_fu_42_p1 );

    SC_METHOD(thread_tmp_1_fu_58_p4);
    sensitive << ( sum_fu_46_p2 );

    SC_METHOD(thread_tmp_2_fu_74_p1);
    sensitive << ( a );

    SC_METHOD(thread_tmp_2_fu_74_p2);
    sensitive << ( b_cast_fu_34_p1 );
    sensitive << ( tmp_2_fu_74_p1 );

    SC_METHOD(thread_tmp_cast_19_fu_42_p0);
    sensitive << ( b );

    SC_METHOD(thread_tmp_cast_19_fu_42_p1);
    sensitive << ( tmp_cast_19_fu_42_p0 );

    SC_METHOD(thread_tmp_cast_fu_38_p0);
    sensitive << ( a );

    SC_METHOD(thread_tmp_cast_fu_38_p1);
    sensitive << ( tmp_cast_fu_38_p0 );

    SC_METHOD(thread_tmp_fu_88_p2);
    sensitive << ( tmp_s_fu_52_p2 );
    sensitive << ( icmp_fu_68_p2 );

    SC_METHOD(thread_tmp_s_fu_52_p2);
    sensitive << ( sum_fu_46_p2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gsm_add_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, b_cast_fu_34_p0, "b_cast_fu_34_p0");
    sc_trace(mVcdFile, tmp_cast_fu_38_p0, "tmp_cast_fu_38_p0");
    sc_trace(mVcdFile, tmp_cast_19_fu_42_p0, "tmp_cast_19_fu_42_p0");
    sc_trace(mVcdFile, tmp_cast_fu_38_p1, "tmp_cast_fu_38_p1");
    sc_trace(mVcdFile, tmp_cast_19_fu_42_p1, "tmp_cast_19_fu_42_p1");
    sc_trace(mVcdFile, sum_fu_46_p2, "sum_fu_46_p2");
    sc_trace(mVcdFile, tmp_1_fu_58_p4, "tmp_1_fu_58_p4");
    sc_trace(mVcdFile, b_cast_fu_34_p1, "b_cast_fu_34_p1");
    sc_trace(mVcdFile, tmp_2_fu_74_p1, "tmp_2_fu_74_p1");
    sc_trace(mVcdFile, tmp_s_fu_52_p2, "tmp_s_fu_52_p2");
    sc_trace(mVcdFile, icmp_fu_68_p2, "icmp_fu_68_p2");
    sc_trace(mVcdFile, tmp_fu_88_p2, "tmp_fu_88_p2");
    sc_trace(mVcdFile, phitmp_fu_80_p3, "phitmp_fu_80_p3");
    sc_trace(mVcdFile, tmp_2_fu_74_p2, "tmp_2_fu_74_p2");
#endif

    }
}

gsm_add::~gsm_add() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void gsm_add::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void gsm_add::thread_ap_return() {
    ap_return = (!tmp_fu_88_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_fu_88_p2.read()[0].to_bool())? phitmp_fu_80_p3.read(): tmp_2_fu_74_p2.read());
}

void gsm_add::thread_b_cast_fu_34_p0() {
    b_cast_fu_34_p0 = b.read();
}

void gsm_add::thread_b_cast_fu_34_p1() {
    b_cast_fu_34_p1 = esl_sext<16,13>(b_cast_fu_34_p0.read());
}

void gsm_add::thread_icmp_fu_68_p2() {
    icmp_fu_68_p2 = (!tmp_1_fu_58_p4.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_58_p4.read() == ap_const_lv2_1);
}

void gsm_add::thread_phitmp_fu_80_p3() {
    phitmp_fu_80_p3 = (!tmp_s_fu_52_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_s_fu_52_p2.read()[0].to_bool())? ap_const_lv16_8000: ap_const_lv16_7FFF);
}

void gsm_add::thread_sum_fu_46_p2() {
    sum_fu_46_p2 = (!tmp_cast_fu_38_p1.read().is_01() || !tmp_cast_19_fu_42_p1.read().is_01())? sc_lv<17>(): (sc_bigint<17>(tmp_cast_fu_38_p1.read()) + sc_bigint<17>(tmp_cast_19_fu_42_p1.read()));
}

void gsm_add::thread_tmp_1_fu_58_p4() {
    tmp_1_fu_58_p4 = sum_fu_46_p2.read().range(16, 15);
}

void gsm_add::thread_tmp_2_fu_74_p1() {
    tmp_2_fu_74_p1 = a.read();
}

void gsm_add::thread_tmp_2_fu_74_p2() {
    tmp_2_fu_74_p2 = (!b_cast_fu_34_p1.read().is_01() || !tmp_2_fu_74_p1.read().is_01())? sc_lv<16>(): (sc_bigint<16>(b_cast_fu_34_p1.read()) + sc_bigint<16>(tmp_2_fu_74_p1.read()));
}

void gsm_add::thread_tmp_cast_19_fu_42_p0() {
    tmp_cast_19_fu_42_p0 = b.read();
}

void gsm_add::thread_tmp_cast_19_fu_42_p1() {
    tmp_cast_19_fu_42_p1 = esl_sext<17,13>(tmp_cast_19_fu_42_p0.read());
}

void gsm_add::thread_tmp_cast_fu_38_p0() {
    tmp_cast_fu_38_p0 = a.read();
}

void gsm_add::thread_tmp_cast_fu_38_p1() {
    tmp_cast_fu_38_p1 = esl_sext<17,16>(tmp_cast_fu_38_p0.read());
}

void gsm_add::thread_tmp_fu_88_p2() {
    tmp_fu_88_p2 = (tmp_s_fu_52_p2.read() | icmp_fu_68_p2.read());
}

void gsm_add::thread_tmp_s_fu_52_p2() {
    tmp_s_fu_52_p2 = (!sum_fu_46_p2.read().is_01() || !ap_const_lv17_18000.is_01())? sc_lv<1>(): (sc_bigint<17>(sum_fu_46_p2.read()) < sc_bigint<17>(ap_const_lv17_18000));
}

}

