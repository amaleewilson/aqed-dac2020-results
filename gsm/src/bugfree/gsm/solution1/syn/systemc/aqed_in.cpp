// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aqed_in.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aqed_in::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aqed_in::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> aqed_in::ap_ST_fsm_state1 = "1";
const sc_lv<5> aqed_in::ap_ST_fsm_state2 = "10";
const sc_lv<5> aqed_in::ap_ST_fsm_state3 = "100";
const sc_lv<5> aqed_in::ap_ST_fsm_state4 = "1000";
const sc_lv<5> aqed_in::ap_ST_fsm_state5 = "10000";
const sc_lv<32> aqed_in::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> aqed_in::ap_const_lv1_1 = "1";
const sc_lv<32> aqed_in::ap_const_lv32_1 = "1";
const sc_lv<32> aqed_in::ap_const_lv32_2 = "10";
const sc_lv<32> aqed_in::ap_const_lv32_3 = "11";
const sc_lv<32> aqed_in::ap_const_lv32_4 = "100";
const sc_lv<3> aqed_in::ap_const_lv3_1 = "1";
const sc_lv<3> aqed_in::ap_const_lv3_2 = "10";
const sc_lv<3> aqed_in::ap_const_lv3_3 = "11";
const sc_lv<16> aqed_in::ap_const_lv16_1 = "1";
const sc_lv<1> aqed_in::ap_const_lv1_0 = "0";
const bool aqed_in::ap_const_boolean_1 = true;

aqed_in::aqed_in(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_bmc_in_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bmc_in_addr_reg_339 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( bmc_in_offset_cast1_fu_141_p1 );
    sensitive << ( sum2_cast_fu_217_p1 );
    sensitive << ( sum8_cast_fu_264_p1 );

    SC_METHOD(thread_bmc_in_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sum_cast_fu_200_p1 );
    sensitive << ( sum4_cast_fu_222_p1 );
    sensitive << ( sum6_cast_fu_239_p1 );
    sensitive << ( sum1_cast_fu_269_p1 );

    SC_METHOD(thread_bmc_in_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_bmc_in_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_bmc_in_offset_cast1_fu_141_p1);
    sensitive << ( bmc_in_offset );

    SC_METHOD(thread_grp_fu_125_p2);
    sensitive << ( bmc_in_offset );

    SC_METHOD(thread_grp_fu_131_p2);
    sensitive << ( bmc_in_offset );

    SC_METHOD(thread_grp_fu_136_p2);
    sensitive << ( bmc_in_offset );

    SC_METHOD(thread_issue_dup_fu_178_p2);
    sensitive << ( state_orig_issued_i );
    sensitive << ( tmp9_fu_172_p2 );

    SC_METHOD(thread_issue_orig_fu_156_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( orig );

    SC_METHOD(thread_issue_orig_fu_156_p2);
    sensitive << ( issue_orig_fu_156_p0 );
    sensitive << ( tmp_fu_150_p2 );

    SC_METHOD(thread_not_state_dup_issued_fu_166_p2);
    sensitive << ( state_dup_issued_i );

    SC_METHOD(thread_state_dup_in);
    sensitive << ( issue_dup_reg_348 );
    sensitive << ( state_in_count_load_reg_352 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_7_fu_304_p2 );

    SC_METHOD(thread_state_dup_in_ap_vld);
    sensitive << ( issue_dup_reg_348 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_7_fu_304_p2 );

    SC_METHOD(thread_state_dup_issued_o);
    sensitive << ( state_dup_issued_i );
    sensitive << ( issue_dup_reg_348 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_7_fu_304_p2 );

    SC_METHOD(thread_state_dup_issued_o_ap_vld);
    sensitive << ( issue_dup_reg_348 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_state_orig_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_in_count );
    sensitive << ( issue_orig_fu_156_p2 );

    SC_METHOD(thread_state_orig_in_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( issue_orig_fu_156_p2 );

    SC_METHOD(thread_state_orig_issued_o);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state_orig_issued_i );
    sensitive << ( issue_orig_fu_156_p2 );

    SC_METHOD(thread_state_orig_issued_o_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( issue_orig_fu_156_p2 );

    SC_METHOD(thread_sum1_cast_fu_269_p1);
    sensitive << ( grp_fu_136_p2 );

    SC_METHOD(thread_sum2_cast_fu_217_p1);
    sensitive << ( grp_fu_131_p2 );

    SC_METHOD(thread_sum4_cast_fu_222_p1);
    sensitive << ( grp_fu_136_p2 );

    SC_METHOD(thread_sum6_cast_fu_239_p1);
    sensitive << ( grp_fu_125_p2 );

    SC_METHOD(thread_sum8_cast_fu_264_p1);
    sensitive << ( grp_fu_131_p2 );

    SC_METHOD(thread_sum_cast_fu_200_p1);
    sensitive << ( grp_fu_125_p2 );

    SC_METHOD(thread_tmp1_fu_294_p2);
    sensitive << ( tmp_4_reg_383 );
    sensitive << ( tmp_5_fu_278_p2 );

    SC_METHOD(thread_tmp2_fu_299_p2);
    sensitive << ( tmp_s_reg_378 );
    sensitive << ( tmp_6_fu_288_p2 );

    SC_METHOD(thread_tmp9_fu_172_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dup );

    SC_METHOD(thread_tmp9_fu_172_p2);
    sensitive << ( tmp9_fu_172_p0 );
    sensitive << ( not_state_dup_issued_fu_166_p2 );

    SC_METHOD(thread_tmp_4_fu_258_p2);
    sensitive << ( bmc_in_q1 );
    sensitive << ( state_orig_val_1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_5_fu_278_p2);
    sensitive << ( bmc_in_q0 );
    sensitive << ( state_orig_val_2 );
    sensitive << ( issue_dup_reg_348 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_6_fu_288_p2);
    sensitive << ( bmc_in_q1 );
    sensitive << ( state_orig_val_3 );
    sensitive << ( issue_dup_reg_348 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_7_fu_304_p2);
    sensitive << ( tmp2_fu_299_p2 );
    sensitive << ( tmp1_fu_294_p2 );

    SC_METHOD(thread_tmp_8_fu_321_p2);
    sensitive << ( state_in_count_load_reg_352 );

    SC_METHOD(thread_tmp_fu_150_p2);
    sensitive << ( state_orig_issued_i );

    SC_METHOD(thread_tmp_s_fu_248_p2);
    sensitive << ( bmc_in_q0 );
    sensitive << ( state_orig_val_0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( issue_orig_fu_156_p2 );
    sensitive << ( issue_dup_reg_348 );
    sensitive << ( ap_CS_fsm_state3 );

    ap_CS_fsm = "00001";
    state_in_count = "0000000000000000";
    state_orig_val_0 = "0000000000000000";
    state_orig_val_1 = "0000000000000000";
    state_orig_val_2 = "0000000000000000";
    state_orig_val_3 = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aqed_in_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, bmc_in_address0, "(port)bmc_in_address0");
    sc_trace(mVcdFile, bmc_in_ce0, "(port)bmc_in_ce0");
    sc_trace(mVcdFile, bmc_in_q0, "(port)bmc_in_q0");
    sc_trace(mVcdFile, bmc_in_address1, "(port)bmc_in_address1");
    sc_trace(mVcdFile, bmc_in_ce1, "(port)bmc_in_ce1");
    sc_trace(mVcdFile, bmc_in_q1, "(port)bmc_in_q1");
    sc_trace(mVcdFile, bmc_in_offset, "(port)bmc_in_offset");
    sc_trace(mVcdFile, orig, "(port)orig");
    sc_trace(mVcdFile, dup, "(port)dup");
    sc_trace(mVcdFile, state_orig_issued_i, "(port)state_orig_issued_i");
    sc_trace(mVcdFile, state_orig_issued_o, "(port)state_orig_issued_o");
    sc_trace(mVcdFile, state_orig_issued_o_ap_vld, "(port)state_orig_issued_o_ap_vld");
    sc_trace(mVcdFile, state_dup_issued_i, "(port)state_dup_issued_i");
    sc_trace(mVcdFile, state_dup_issued_o, "(port)state_dup_issued_o");
    sc_trace(mVcdFile, state_dup_issued_o_ap_vld, "(port)state_dup_issued_o_ap_vld");
    sc_trace(mVcdFile, state_orig_in, "(port)state_orig_in");
    sc_trace(mVcdFile, state_orig_in_ap_vld, "(port)state_orig_in_ap_vld");
    sc_trace(mVcdFile, state_dup_in, "(port)state_dup_in");
    sc_trace(mVcdFile, state_dup_in_ap_vld, "(port)state_dup_in_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, state_in_count, "state_in_count");
    sc_trace(mVcdFile, state_orig_val_0, "state_orig_val_0");
    sc_trace(mVcdFile, state_orig_val_1, "state_orig_val_1");
    sc_trace(mVcdFile, state_orig_val_2, "state_orig_val_2");
    sc_trace(mVcdFile, state_orig_val_3, "state_orig_val_3");
    sc_trace(mVcdFile, bmc_in_addr_reg_339, "bmc_in_addr_reg_339");
    sc_trace(mVcdFile, issue_orig_fu_156_p2, "issue_orig_fu_156_p2");
    sc_trace(mVcdFile, issue_orig_reg_344, "issue_orig_reg_344");
    sc_trace(mVcdFile, issue_dup_fu_178_p2, "issue_dup_fu_178_p2");
    sc_trace(mVcdFile, issue_dup_reg_348, "issue_dup_reg_348");
    sc_trace(mVcdFile, state_in_count_load_reg_352, "state_in_count_load_reg_352");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_s_fu_248_p2, "tmp_s_fu_248_p2");
    sc_trace(mVcdFile, tmp_s_reg_378, "tmp_s_reg_378");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_4_fu_258_p2, "tmp_4_fu_258_p2");
    sc_trace(mVcdFile, tmp_4_reg_383, "tmp_4_reg_383");
    sc_trace(mVcdFile, bmc_in_offset_cast1_fu_141_p1, "bmc_in_offset_cast1_fu_141_p1");
    sc_trace(mVcdFile, sum_cast_fu_200_p1, "sum_cast_fu_200_p1");
    sc_trace(mVcdFile, sum2_cast_fu_217_p1, "sum2_cast_fu_217_p1");
    sc_trace(mVcdFile, sum4_cast_fu_222_p1, "sum4_cast_fu_222_p1");
    sc_trace(mVcdFile, sum6_cast_fu_239_p1, "sum6_cast_fu_239_p1");
    sc_trace(mVcdFile, sum8_cast_fu_264_p1, "sum8_cast_fu_264_p1");
    sc_trace(mVcdFile, sum1_cast_fu_269_p1, "sum1_cast_fu_269_p1");
    sc_trace(mVcdFile, tmp_8_fu_321_p2, "tmp_8_fu_321_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_7_fu_304_p2, "tmp_7_fu_304_p2");
    sc_trace(mVcdFile, issue_orig_fu_156_p0, "issue_orig_fu_156_p0");
    sc_trace(mVcdFile, tmp_fu_150_p2, "tmp_fu_150_p2");
    sc_trace(mVcdFile, tmp9_fu_172_p0, "tmp9_fu_172_p0");
    sc_trace(mVcdFile, not_state_dup_issued_fu_166_p2, "not_state_dup_issued_fu_166_p2");
    sc_trace(mVcdFile, tmp9_fu_172_p2, "tmp9_fu_172_p2");
    sc_trace(mVcdFile, grp_fu_125_p2, "grp_fu_125_p2");
    sc_trace(mVcdFile, grp_fu_131_p2, "grp_fu_131_p2");
    sc_trace(mVcdFile, grp_fu_136_p2, "grp_fu_136_p2");
    sc_trace(mVcdFile, tmp_5_fu_278_p2, "tmp_5_fu_278_p2");
    sc_trace(mVcdFile, tmp_6_fu_288_p2, "tmp_6_fu_288_p2");
    sc_trace(mVcdFile, tmp2_fu_299_p2, "tmp2_fu_299_p2");
    sc_trace(mVcdFile, tmp1_fu_294_p2, "tmp1_fu_294_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aqed_in::~aqed_in() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aqed_in::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        bmc_in_addr_reg_339 =  (sc_lv<3>) (bmc_in_offset_cast1_fu_141_p1.read());
        issue_dup_reg_348 = issue_dup_fu_178_p2.read();
        issue_orig_reg_344 = issue_orig_fu_156_p2.read();
        state_in_count_load_reg_352 = state_in_count.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_in_count = tmp_8_fu_321_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_orig_val_0 = bmc_in_q0.read();
        state_orig_val_1 = bmc_in_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(issue_orig_reg_344.read(), ap_const_lv1_1))) {
        state_orig_val_2 = bmc_in_q0.read();
        state_orig_val_3 = bmc_in_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_4_reg_383 = tmp_4_fu_258_p2.read();
        tmp_s_reg_378 = tmp_s_fu_248_p2.read();
    }
}

void aqed_in::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aqed_in::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aqed_in::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aqed_in::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aqed_in::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aqed_in::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aqed_in::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aqed_in::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aqed_in::thread_bmc_in_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        bmc_in_address0 =  (sc_lv<3>) (sum8_cast_fu_264_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        bmc_in_address0 = bmc_in_addr_reg_339.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        bmc_in_address0 =  (sc_lv<3>) (sum2_cast_fu_217_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        bmc_in_address0 =  (sc_lv<3>) (bmc_in_offset_cast1_fu_141_p1.read());
    } else {
        bmc_in_address0 = "XXX";
    }
}

void aqed_in::thread_bmc_in_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        bmc_in_address1 =  (sc_lv<3>) (sum1_cast_fu_269_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        bmc_in_address1 =  (sc_lv<3>) (sum6_cast_fu_239_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        bmc_in_address1 =  (sc_lv<3>) (sum4_cast_fu_222_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        bmc_in_address1 =  (sc_lv<3>) (sum_cast_fu_200_p1.read());
    } else {
        bmc_in_address1 = "XXX";
    }
}

void aqed_in::thread_bmc_in_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        bmc_in_ce0 = ap_const_logic_1;
    } else {
        bmc_in_ce0 = ap_const_logic_0;
    }
}

void aqed_in::thread_bmc_in_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        bmc_in_ce1 = ap_const_logic_1;
    } else {
        bmc_in_ce1 = ap_const_logic_0;
    }
}

void aqed_in::thread_bmc_in_offset_cast1_fu_141_p1() {
    bmc_in_offset_cast1_fu_141_p1 = esl_zext<64,3>(bmc_in_offset.read());
}

void aqed_in::thread_grp_fu_125_p2() {
    grp_fu_125_p2 = (!bmc_in_offset.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(bmc_in_offset.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aqed_in::thread_grp_fu_131_p2() {
    grp_fu_131_p2 = (!bmc_in_offset.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<3>(): (sc_biguint<3>(bmc_in_offset.read()) + sc_biguint<3>(ap_const_lv3_2));
}

void aqed_in::thread_grp_fu_136_p2() {
    grp_fu_136_p2 = (!bmc_in_offset.read().is_01() || !ap_const_lv3_3.is_01())? sc_lv<3>(): (sc_biguint<3>(bmc_in_offset.read()) + sc_biguint<3>(ap_const_lv3_3));
}

void aqed_in::thread_issue_dup_fu_178_p2() {
    issue_dup_fu_178_p2 = (tmp9_fu_172_p2.read() & state_orig_issued_i.read());
}

void aqed_in::thread_issue_orig_fu_156_p0() {
    issue_orig_fu_156_p0 =  (sc_lv<1>) (orig.read());
}

void aqed_in::thread_issue_orig_fu_156_p2() {
    issue_orig_fu_156_p2 = (issue_orig_fu_156_p0.read() & tmp_fu_150_p2.read());
}

void aqed_in::thread_not_state_dup_issued_fu_166_p2() {
    not_state_dup_issued_fu_166_p2 = (state_dup_issued_i.read() ^ ap_const_lv1_1);
}

void aqed_in::thread_state_dup_in() {
    state_dup_in = state_in_count_load_reg_352.read();
}

void aqed_in::thread_state_dup_in_ap_vld() {
    if ((esl_seteq<1,1,1>(issue_dup_reg_348.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_7_fu_304_p2.read()))) {
        state_dup_in_ap_vld = ap_const_logic_1;
    } else {
        state_dup_in_ap_vld = ap_const_logic_0;
    }
}

void aqed_in::thread_state_dup_issued_o() {
    if ((esl_seteq<1,1,1>(issue_dup_reg_348.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_dup_issued_o = tmp_7_fu_304_p2.read();
    } else {
        state_dup_issued_o = state_dup_issued_i.read();
    }
}

void aqed_in::thread_state_dup_issued_o_ap_vld() {
    if ((esl_seteq<1,1,1>(issue_dup_reg_348.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_dup_issued_o_ap_vld = ap_const_logic_1;
    } else {
        state_dup_issued_o_ap_vld = ap_const_logic_0;
    }
}

void aqed_in::thread_state_orig_in() {
    state_orig_in = state_in_count.read();
}

void aqed_in::thread_state_orig_in_ap_vld() {
    if ((esl_seteq<1,1,1>(issue_orig_fu_156_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        state_orig_in_ap_vld = ap_const_logic_1;
    } else {
        state_orig_in_ap_vld = ap_const_logic_0;
    }
}

void aqed_in::thread_state_orig_issued_o() {
    if ((esl_seteq<1,1,1>(issue_orig_fu_156_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        state_orig_issued_o = ap_const_lv1_1;
    } else {
        state_orig_issued_o = state_orig_issued_i.read();
    }
}

void aqed_in::thread_state_orig_issued_o_ap_vld() {
    if ((esl_seteq<1,1,1>(issue_orig_fu_156_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        state_orig_issued_o_ap_vld = ap_const_logic_1;
    } else {
        state_orig_issued_o_ap_vld = ap_const_logic_0;
    }
}

void aqed_in::thread_sum1_cast_fu_269_p1() {
    sum1_cast_fu_269_p1 = esl_zext<64,3>(grp_fu_136_p2.read());
}

void aqed_in::thread_sum2_cast_fu_217_p1() {
    sum2_cast_fu_217_p1 = esl_zext<64,3>(grp_fu_131_p2.read());
}

void aqed_in::thread_sum4_cast_fu_222_p1() {
    sum4_cast_fu_222_p1 = esl_zext<64,3>(grp_fu_136_p2.read());
}

void aqed_in::thread_sum6_cast_fu_239_p1() {
    sum6_cast_fu_239_p1 = esl_zext<64,3>(grp_fu_125_p2.read());
}

void aqed_in::thread_sum8_cast_fu_264_p1() {
    sum8_cast_fu_264_p1 = esl_zext<64,3>(grp_fu_131_p2.read());
}

void aqed_in::thread_sum_cast_fu_200_p1() {
    sum_cast_fu_200_p1 = esl_zext<64,3>(grp_fu_125_p2.read());
}

void aqed_in::thread_tmp1_fu_294_p2() {
    tmp1_fu_294_p2 = (tmp_4_reg_383.read() & tmp_5_fu_278_p2.read());
}

void aqed_in::thread_tmp2_fu_299_p2() {
    tmp2_fu_299_p2 = (tmp_s_reg_378.read() & tmp_6_fu_288_p2.read());
}

void aqed_in::thread_tmp9_fu_172_p0() {
    tmp9_fu_172_p0 =  (sc_lv<1>) (dup.read());
}

void aqed_in::thread_tmp9_fu_172_p2() {
    tmp9_fu_172_p2 = (tmp9_fu_172_p0.read() & not_state_dup_issued_fu_166_p2.read());
}

void aqed_in::thread_tmp_4_fu_258_p2() {
    tmp_4_fu_258_p2 = (!state_orig_val_1.read().is_01() || !bmc_in_q1.read().is_01())? sc_lv<1>(): sc_lv<1>(state_orig_val_1.read() == bmc_in_q1.read());
}

void aqed_in::thread_tmp_5_fu_278_p2() {
    tmp_5_fu_278_p2 = (!state_orig_val_2.read().is_01() || !bmc_in_q0.read().is_01())? sc_lv<1>(): sc_lv<1>(state_orig_val_2.read() == bmc_in_q0.read());
}

void aqed_in::thread_tmp_6_fu_288_p2() {
    tmp_6_fu_288_p2 = (!state_orig_val_3.read().is_01() || !bmc_in_q1.read().is_01())? sc_lv<1>(): sc_lv<1>(state_orig_val_3.read() == bmc_in_q1.read());
}

void aqed_in::thread_tmp_7_fu_304_p2() {
    tmp_7_fu_304_p2 = (tmp2_fu_299_p2.read() & tmp1_fu_294_p2.read());
}

void aqed_in::thread_tmp_8_fu_321_p2() {
    tmp_8_fu_321_p2 = (!state_in_count_load_reg_352.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(state_in_count_load_reg_352.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void aqed_in::thread_tmp_fu_150_p2() {
    tmp_fu_150_p2 = (state_orig_issued_i.read() ^ ap_const_lv1_1);
}

void aqed_in::thread_tmp_s_fu_248_p2() {
    tmp_s_fu_248_p2 = (!state_orig_val_0.read().is_01() || !bmc_in_q0.read().is_01())? sc_lv<1>(): sc_lv<1>(state_orig_val_0.read() == bmc_in_q0.read());
}

void aqed_in::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(issue_orig_fu_156_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(issue_orig_fu_156_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(issue_dup_reg_348.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

