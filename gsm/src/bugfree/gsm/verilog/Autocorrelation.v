// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Autocorrelation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        s_address1,
        s_ce1,
        s_we1,
        s_d1,
        s_q1,
        s_offset
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_pp0_stage0 = 24'd2;
parameter    ap_ST_fsm_state4 = 24'd4;
parameter    ap_ST_fsm_state5 = 24'd8;
parameter    ap_ST_fsm_state6 = 24'd16;
parameter    ap_ST_fsm_state7 = 24'd32;
parameter    ap_ST_fsm_state8 = 24'd64;
parameter    ap_ST_fsm_state9 = 24'd128;
parameter    ap_ST_fsm_state10 = 24'd256;
parameter    ap_ST_fsm_state11 = 24'd512;
parameter    ap_ST_fsm_state12 = 24'd1024;
parameter    ap_ST_fsm_state13 = 24'd2048;
parameter    ap_ST_fsm_state14 = 24'd4096;
parameter    ap_ST_fsm_state15 = 24'd8192;
parameter    ap_ST_fsm_state16 = 24'd16384;
parameter    ap_ST_fsm_state17 = 24'd32768;
parameter    ap_ST_fsm_state18 = 24'd65536;
parameter    ap_ST_fsm_state19 = 24'd131072;
parameter    ap_ST_fsm_state20 = 24'd262144;
parameter    ap_ST_fsm_state21 = 24'd524288;
parameter    ap_ST_fsm_state22 = 24'd1048576;
parameter    ap_ST_fsm_state23 = 24'd2097152;
parameter    ap_ST_fsm_state24 = 24'd4194304;
parameter    ap_ST_fsm_state25 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [15:0] s_d0;
input  [15:0] s_q0;
output  [4:0] s_address1;
output   s_ce1;
output   s_we1;
output  [15:0] s_d1;
input  [15:0] s_q1;
input  [3:0] s_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] s_address0;
reg s_ce0;
reg s_we0;
reg[15:0] s_d0;
reg[4:0] s_address1;
reg s_ce1;
reg s_we1;
reg[15:0] s_d1;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] bitoff_address0;
reg    bitoff_ce0;
wire   [3:0] bitoff_q0;
wire   [7:0] bitoff_address1;
reg    bitoff_ce1;
wire   [3:0] bitoff_q1;
wire   [7:0] bitoff_address2;
reg    bitoff_ce2;
wire   [3:0] bitoff_q2;
reg   [15:0] smax_reg_347;
reg   [3:0] k_reg_359;
reg   [15:0] reg_381;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state20;
wire   [63:0] s_offset_cast1_fu_391_p1;
reg   [63:0] s_offset_cast1_reg_1278;
wire   [4:0] s_offset_cast_fu_395_p1;
reg   [4:0] s_offset_cast_reg_1284;
wire   [0:0] exitcond2_fu_399_p2;
reg   [0:0] exitcond2_reg_1298;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] k_1_fu_405_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] temp_0_smax_fu_467_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] tmp_fu_475_p2;
reg   [0:0] tmp_reg_1317;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_1_i_fu_489_p2;
reg   [0:0] tmp_1_i_reg_1321;
wire   [0:0] tmp_13_fu_495_p3;
reg   [0:0] tmp_13_reg_1327;
wire   [0:0] icmp_fu_553_p2;
reg   [0:0] icmp_reg_1332;
wire   [0:0] icmp1_fu_569_p2;
reg   [0:0] icmp1_reg_1338;
wire   [0:0] icmp2_fu_624_p2;
reg   [0:0] icmp2_reg_1358;
wire  signed [15:0] n_cast_fu_748_p1;
reg  signed [15:0] n_cast_reg_1363;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_26_fu_752_p2;
reg   [0:0] tmp_26_reg_1377;
wire   [0:0] or_cond_41_fu_764_p2;
reg   [0:0] or_cond_41_reg_1381;
wire   [2:0] tmp_20_fu_770_p1;
reg   [2:0] tmp_20_reg_1385;
reg   [4:0] s_addr_1_reg_1390;
reg   [4:0] s_addr_2_reg_1396;
wire   [16:0] tmp58_cast_fu_813_p1;
reg   [16:0] tmp58_cast_reg_1402;
wire    ap_CS_fsm_state6;
reg   [1:0] tmp_22_reg_1414;
reg   [1:0] tmp_30_reg_1419;
reg   [4:0] s_addr_3_reg_1424;
reg   [4:0] s_addr_4_reg_1429;
reg   [1:0] tmp_32_reg_1434;
wire    ap_CS_fsm_state7;
reg   [1:0] tmp_35_reg_1439;
reg   [4:0] s_addr_5_reg_1444;
reg   [4:0] s_addr_6_reg_1449;
reg   [1:0] tmp_37_reg_1454;
wire    ap_CS_fsm_state8;
reg   [1:0] tmp_39_reg_1459;
reg   [4:0] s_addr_7_reg_1464;
reg   [4:0] s_addr_8_reg_1469;
reg   [1:0] tmp_41_reg_1474;
wire    ap_CS_fsm_state9;
reg   [1:0] tmp_43_reg_1479;
reg   [4:0] s_addr_9_reg_1484;
reg   [4:0] s_addr_10_reg_1489;
reg   [1:0] tmp_45_reg_1494;
wire    ap_CS_fsm_state10;
reg   [1:0] tmp_47_reg_1499;
reg   [4:0] s_addr_11_reg_1504;
wire    ap_CS_fsm_state14;
reg   [4:0] s_addr_12_reg_1509;
wire    ap_CS_fsm_state15;
reg   [15:0] s_load_11_reg_1515;
reg   [4:0] s_addr_13_reg_1520;
reg   [4:0] s_addr_14_reg_1526;
reg   [15:0] s_load_12_reg_1532;
wire    ap_CS_fsm_state17;
reg   [15:0] s_load_13_reg_1537;
reg   [4:0] s_addr_15_reg_1542;
reg   [4:0] s_addr_16_reg_1548;
reg   [15:0] s_load_14_reg_1554;
wire    ap_CS_fsm_state18;
reg   [15:0] s_load_15_reg_1559;
reg   [4:0] s_addr_17_reg_1564;
reg   [4:0] s_addr_18_reg_1570;
reg   [15:0] s_load_16_reg_1576;
wire    ap_CS_fsm_state19;
reg   [15:0] s_load_17_reg_1581;
reg   [4:0] s_addr_19_reg_1586;
reg   [4:0] s_addr_21_reg_1591;
reg   [4:0] s_addr_20_reg_1596;
reg   [15:0] s_load_20_reg_1601;
wire   [15:0] tmp_134_3_fu_1235_p2;
reg   [15:0] tmp_134_3_reg_1606;
wire    ap_CS_fsm_state21;
wire   [15:0] tmp_134_4_fu_1239_p2;
reg   [15:0] tmp_134_4_reg_1611;
wire   [15:0] tmp_134_5_fu_1243_p2;
reg   [15:0] tmp_134_5_reg_1616;
wire   [15:0] tmp_134_6_fu_1247_p2;
reg   [15:0] tmp_134_6_reg_1621;
wire   [15:0] tmp_134_7_fu_1251_p2;
reg   [15:0] tmp_134_7_reg_1626;
wire   [15:0] grp_fu_385_p2;
reg   [15:0] tmp_134_8_reg_1631;
wire   [15:0] tmp_134_9_fu_1255_p2;
reg   [15:0] tmp_134_9_reg_1636;
wire   [15:0] tmp_134_s_fu_1260_p2;
reg   [15:0] tmp_134_s_reg_1641;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage0;
wire   [5:0] scalauto_fu_740_p3;
reg  signed [5:0] ap_phi_mux_n_phi_fu_374_p4;
reg  signed [5:0] n_reg_370;
wire   [63:0] sum_cast_fu_420_p1;
wire   [63:0] tmp_9_i_cast_cast_fu_575_p3;
wire   [63:0] tmp_15_i_cast_fu_594_p1;
wire   [63:0] tmp_19_i_cast_fu_609_p1;
wire   [63:0] sum2_1_cast_fu_779_p1;
wire   [63:0] sum2_2_cast_fu_858_p1;
wire   [63:0] sum2_3_cast_fu_868_p1;
wire   [63:0] sum2_4_cast_fu_916_p1;
wire   [63:0] sum2_5_cast_fu_926_p1;
wire   [63:0] sum2_6_cast_fu_974_p1;
wire   [63:0] sum2_7_cast_fu_984_p1;
wire   [63:0] sum2_8_cast_fu_1032_p1;
wire   [63:0] sum2_9_cast_fu_1042_p1;
wire   [63:0] sum4_1_cast_fu_1130_p1;
wire   [63:0] sum4_2_cast_fu_1140_p1;
wire   [63:0] sum4_3_cast_fu_1150_p1;
wire   [63:0] sum4_4_cast_fu_1160_p1;
wire   [63:0] sum4_5_cast_fu_1170_p1;
wire   [63:0] sum4_6_cast_fu_1180_p1;
wire   [63:0] sum4_7_cast_fu_1190_p1;
wire   [63:0] sum4_8_cast_fu_1200_p1;
wire   [63:0] sum4_cast_fu_1210_p1;
wire   [63:0] sum4_9_cast_fu_1220_p1;
wire  signed [15:0] tmp_24_fu_1047_p1;
wire  signed [15:0] tmp_31_fu_1051_p1;
wire    ap_CS_fsm_state11;
wire  signed [15:0] tmp_34_fu_1093_p1;
wire  signed [15:0] tmp_36_fu_1097_p1;
wire    ap_CS_fsm_state12;
wire  signed [15:0] tmp_38_fu_1101_p1;
wire  signed [15:0] tmp_40_fu_1105_p1;
wire    ap_CS_fsm_state13;
wire  signed [15:0] tmp_42_fu_1109_p1;
wire  signed [15:0] tmp_44_fu_1113_p1;
wire  signed [15:0] tmp_46_fu_1117_p1;
wire  signed [15:0] tmp_48_fu_1121_p1;
wire   [15:0] tmp_134_1_fu_1225_p2;
wire   [15:0] tmp_134_2_fu_1230_p2;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire   [4:0] tmp_cast_fu_411_p1;
wire   [4:0] sum_fu_415_p2;
wire   [0:0] tmp_i_fu_433_p2;
wire   [15:0] tmp_28_i_fu_439_p2;
wire   [0:0] tmp_12_fu_425_p3;
wire   [15:0] tmp_29_i_fu_445_p3;
wire   [15:0] smax_2_fu_453_p3;
wire   [0:0] tmp_s_fu_461_p2;
wire   [31:0] a_assign_1_fu_481_p3;
wire   [7:0] tmp_16_fu_511_p1;
wire   [31:0] a_lobit_i_cast_fu_503_p3;
wire   [23:0] tmp_15_fu_523_p3;
wire   [23:0] tmp_14_fu_515_p3;
wire   [31:0] a_assign_2_fu_531_p2;
wire   [15:0] tmp_17_fu_543_p4;
wire   [7:0] tmp_18_fu_559_p4;
wire   [23:0] p_i_cast72_cast_fu_537_p2;
wire   [7:0] tmp_14_i_cast_fu_584_p4;
wire   [7:0] tmp_18_i_cast_fu_599_p4;
wire   [23:0] tmp_19_fu_614_p4;
wire   [3:0] tmp_17_i_fu_634_p2;
wire   [3:0] tmp_21_i_fu_644_p2;
wire   [0:0] sel_tmp2_i_fu_654_p2;
wire   [0:0] sel_tmp6_i_fu_659_p2;
wire   [0:0] tmp13_fu_664_p2;
wire   [0:0] tmp14_fu_675_p2;
wire   [0:0] sel_tmp20_i_fu_685_p2;
wire   [4:0] tmp_i1_cast_fu_630_p1;
wire   [4:0] newSel_v_fu_690_p3;
wire   [4:0] newSel_fu_698_p2;
wire   [0:0] sel_tmp14_i_fu_680_p2;
wire   [0:0] sel_tmp7_i_fu_670_p2;
wire   [4:0] tmp_17_i_cast_fu_640_p1;
wire  signed [4:0] tmp_21_i_cast_fu_650_p1;
wire   [4:0] newSel1_fu_714_p3;
wire   [0:0] or_cond_fu_708_p2;
wire   [5:0] newSel_cast_fu_704_p1;
wire  signed [5:0] newSel68_cast_fu_722_p1;
wire   [5:0] newSel2_fu_726_p3;
wire   [5:0] sel_tmp21_i_op_fu_734_p2;
wire   [0:0] tmp_27_fu_758_p2;
wire   [3:0] sum2_1_fu_774_p2;
wire   [2:0] tmp_28_fu_784_p2;
wire   [14:0] tmp_60_cast_fu_789_p1;
wire   [14:0] tmp_29_fu_793_p2;
wire  signed [15:0] tmp_22_i_cast_fu_803_p0;
wire   [15:0] b_assign_fu_799_p1;
wire   [15:0] tmp15_fu_807_p2;
wire  signed [16:0] tmp_22_i_cast_fu_803_p1;
wire   [16:0] prod_fu_817_p2;
wire  signed [15:0] tmp_22_i2_cast_fu_833_p0;
wire  signed [16:0] tmp_22_i2_cast_fu_833_p1;
wire   [16:0] prod_1_fu_837_p2;
wire   [3:0] sum2_2_fu_853_p2;
wire   [3:0] sum2_3_fu_863_p2;
wire  signed [15:0] tmp_22_i8_cast_fu_873_p0;
wire  signed [16:0] tmp_22_i8_cast_fu_873_p1;
wire   [16:0] prod_2_fu_877_p2;
wire  signed [15:0] tmp_22_i14_cast_fu_892_p0;
wire  signed [16:0] tmp_22_i14_cast_fu_892_p1;
wire   [16:0] prod_3_fu_896_p2;
wire   [3:0] sum2_4_fu_911_p2;
wire   [3:0] sum2_5_fu_921_p2;
wire  signed [15:0] tmp_22_i20_cast_fu_931_p0;
wire  signed [16:0] tmp_22_i20_cast_fu_931_p1;
wire   [16:0] prod_4_fu_935_p2;
wire  signed [15:0] tmp_22_i26_cast_fu_950_p0;
wire  signed [16:0] tmp_22_i26_cast_fu_950_p1;
wire   [16:0] prod_5_fu_954_p2;
wire   [4:0] sum2_6_fu_969_p2;
wire   [4:0] sum2_7_fu_979_p2;
wire  signed [15:0] tmp_22_i32_cast_fu_989_p0;
wire  signed [16:0] tmp_22_i32_cast_fu_989_p1;
wire   [16:0] prod_6_fu_993_p2;
wire  signed [15:0] tmp_22_i38_cast_fu_1008_p0;
wire  signed [16:0] tmp_22_i38_cast_fu_1008_p1;
wire   [16:0] prod_7_fu_1012_p2;
wire   [4:0] sum2_8_fu_1027_p2;
wire   [4:0] sum2_9_fu_1037_p2;
wire  signed [15:0] tmp_22_i44_cast_fu_1055_p0;
wire  signed [16:0] tmp_22_i44_cast_fu_1055_p1;
wire   [16:0] prod_8_fu_1059_p2;
wire  signed [15:0] tmp_22_i50_cast_fu_1074_p0;
wire  signed [16:0] tmp_22_i50_cast_fu_1074_p1;
wire   [16:0] prod_9_fu_1078_p2;
wire   [3:0] sum4_1_fu_1125_p2;
wire   [3:0] sum4_2_fu_1135_p2;
wire   [3:0] sum4_3_fu_1145_p2;
wire   [3:0] sum4_4_fu_1155_p2;
wire   [3:0] sum4_5_fu_1165_p2;
wire   [4:0] sum4_6_fu_1175_p2;
wire   [4:0] sum4_7_fu_1185_p2;
wire   [4:0] sum4_8_fu_1195_p2;
wire   [4:0] sum4_s_fu_1205_p2;
wire   [4:0] sum4_9_fu_1215_p2;
reg   [23:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Autocorrelation_bcud #(
    .DataWidth( 4 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
bitoff_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bitoff_address0),
    .ce0(bitoff_ce0),
    .q0(bitoff_q0),
    .address1(bitoff_address1),
    .ce1(bitoff_ce1),
    .q1(bitoff_q1),
    .address2(bitoff_address2),
    .ce2(bitoff_ce2),
    .q2(bitoff_q2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_399_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_359 <= k_1_fu_405_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_359 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_fu_475_p2 == 1'd1))) begin
        n_reg_370 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (tmp_reg_1317 == 1'd0))) begin
        n_reg_370 <= scalauto_fu_740_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_1298 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        smax_reg_347 <= temp_0_smax_fu_467_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        smax_reg_347 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond2_reg_1298 <= exitcond2_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (tmp_fu_475_p2 == 1'd0))) begin
        icmp1_reg_1338 <= icmp1_fu_569_p2;
        icmp2_reg_1358 <= icmp2_fu_624_p2;
        icmp_reg_1332 <= icmp_fu_553_p2;
        tmp_13_reg_1327 <= smax_reg_347[32'd15];
        tmp_1_i_reg_1321 <= tmp_1_i_fu_489_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        n_cast_reg_1363 <= n_cast_fu_748_p1;
        or_cond_41_reg_1381 <= or_cond_41_fu_764_p2;
        tmp_26_reg_1377 <= tmp_26_fu_752_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_381 <= s_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        s_addr_10_reg_1489 <= sum2_9_cast_fu_1042_p1;
        s_addr_9_reg_1484 <= sum2_8_cast_fu_1032_p1;
        tmp_41_reg_1474 <= {{prod_6_fu_993_p2[16:15]}};
        tmp_43_reg_1479 <= {{prod_7_fu_1012_p2[16:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_26_reg_1377 == 1'd1))) begin
        s_addr_11_reg_1504[3 : 0] <= s_offset_cast1_reg_1278[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        s_addr_12_reg_1509[3 : 0] <= sum4_1_cast_fu_1130_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        s_addr_13_reg_1520[3 : 0] <= sum4_2_cast_fu_1140_p1[3 : 0];
        s_addr_14_reg_1526[3 : 0] <= sum4_3_cast_fu_1150_p1[3 : 0];
        s_load_11_reg_1515 <= s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        s_addr_15_reg_1542[3 : 0] <= sum4_4_cast_fu_1160_p1[3 : 0];
        s_addr_16_reg_1548[3 : 0] <= sum4_5_cast_fu_1170_p1[3 : 0];
        s_load_12_reg_1532 <= s_q1;
        s_load_13_reg_1537 <= s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        s_addr_17_reg_1564 <= sum4_6_cast_fu_1180_p1;
        s_addr_18_reg_1570 <= sum4_7_cast_fu_1190_p1;
        s_load_14_reg_1554 <= s_q1;
        s_load_15_reg_1559 <= s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        s_addr_19_reg_1586 <= sum4_8_cast_fu_1200_p1;
        s_addr_21_reg_1591 <= sum4_cast_fu_1210_p1;
        s_load_16_reg_1576 <= s_q1;
        s_load_17_reg_1581 <= s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (or_cond_41_fu_764_p2 == 1'd1))) begin
        s_addr_1_reg_1390[3 : 0] <= s_offset_cast1_reg_1278[3 : 0];
        s_addr_2_reg_1396[3 : 0] <= sum2_1_cast_fu_779_p1[3 : 0];
        tmp_20_reg_1385 <= tmp_20_fu_770_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        s_addr_20_reg_1596 <= sum4_9_cast_fu_1220_p1;
        s_load_20_reg_1601 <= s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        s_addr_3_reg_1424[3 : 0] <= sum2_2_cast_fu_858_p1[3 : 0];
        s_addr_4_reg_1429[3 : 0] <= sum2_3_cast_fu_868_p1[3 : 0];
        tmp58_cast_reg_1402[15 : 0] <= tmp58_cast_fu_813_p1[15 : 0];
        tmp_22_reg_1414 <= {{prod_fu_817_p2[16:15]}};
        tmp_30_reg_1419 <= {{prod_1_fu_837_p2[16:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        s_addr_5_reg_1444[3 : 0] <= sum2_4_cast_fu_916_p1[3 : 0];
        s_addr_6_reg_1449[3 : 0] <= sum2_5_cast_fu_926_p1[3 : 0];
        tmp_32_reg_1434 <= {{prod_2_fu_877_p2[16:15]}};
        tmp_35_reg_1439 <= {{prod_3_fu_896_p2[16:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        s_addr_7_reg_1464 <= sum2_6_cast_fu_974_p1;
        s_addr_8_reg_1469 <= sum2_7_cast_fu_984_p1;
        tmp_37_reg_1454 <= {{prod_4_fu_935_p2[16:15]}};
        tmp_39_reg_1459 <= {{prod_5_fu_954_p2[16:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        s_offset_cast1_reg_1278[3 : 0] <= s_offset_cast1_fu_391_p1[3 : 0];
        s_offset_cast_reg_1284[3 : 0] <= s_offset_cast_fu_395_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_134_3_reg_1606 <= tmp_134_3_fu_1235_p2;
        tmp_134_4_reg_1611 <= tmp_134_4_fu_1239_p2;
        tmp_134_5_reg_1616 <= tmp_134_5_fu_1243_p2;
        tmp_134_6_reg_1621 <= tmp_134_6_fu_1247_p2;
        tmp_134_7_reg_1626 <= tmp_134_7_fu_1251_p2;
        tmp_134_8_reg_1631 <= grp_fu_385_p2;
        tmp_134_9_reg_1636 <= tmp_134_9_fu_1255_p2;
        tmp_134_s_reg_1641 <= tmp_134_s_fu_1260_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_45_reg_1494 <= {{prod_8_fu_1059_p2[16:15]}};
        tmp_47_reg_1499 <= {{prod_9_fu_1078_p2[16:15]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_reg_1317 <= tmp_fu_475_p2;
    end
end

always @ (*) begin
    if ((exitcond2_fu_399_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_reg_1317 == 1'd0))) begin
        ap_phi_mux_n_phi_fu_374_p4 = scalauto_fu_740_p3;
    end else begin
        ap_phi_mux_n_phi_fu_374_p4 = n_reg_370;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bitoff_ce0 = 1'b1;
    end else begin
        bitoff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bitoff_ce1 = 1'b1;
    end else begin
        bitoff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bitoff_ce2 = 1'b1;
    end else begin
        bitoff_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        s_address0 = s_addr_20_reg_1596;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        s_address0 = s_addr_21_reg_1591;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        s_address0 = s_addr_17_reg_1564;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        s_address0 = s_addr_15_reg_1542;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        s_address0 = s_addr_13_reg_1520;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        s_address0 = sum4_9_cast_fu_1220_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        s_address0 = sum4_cast_fu_1210_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        s_address0 = sum4_7_cast_fu_1190_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        s_address0 = sum4_5_cast_fu_1170_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        s_address0 = sum4_3_cast_fu_1150_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        s_address0 = sum4_1_cast_fu_1130_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s_address0 = s_addr_10_reg_1489;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        s_address0 = s_addr_8_reg_1469;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        s_address0 = s_addr_6_reg_1449;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        s_address0 = s_addr_4_reg_1429;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        s_address0 = s_addr_2_reg_1396;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_address0 = sum2_9_cast_fu_1042_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address0 = sum2_7_cast_fu_984_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address0 = sum2_5_cast_fu_926_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        s_address0 = sum2_3_cast_fu_868_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address0 = s_offset_cast1_reg_1278;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_address0 = sum_cast_fu_420_p1;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        s_address1 = s_addr_19_reg_1586;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        s_address1 = s_addr_18_reg_1570;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        s_address1 = s_addr_16_reg_1548;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        s_address1 = s_addr_14_reg_1526;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        s_address1 = s_addr_12_reg_1509;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        s_address1 = sum4_8_cast_fu_1200_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        s_address1 = sum4_6_cast_fu_1180_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        s_address1 = sum4_4_cast_fu_1160_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        s_address1 = sum4_2_cast_fu_1140_p1;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state15))) begin
        s_address1 = s_addr_11_reg_1504;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s_address1 = s_addr_9_reg_1484;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        s_address1 = s_addr_7_reg_1464;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        s_address1 = s_addr_5_reg_1444;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        s_address1 = s_addr_3_reg_1424;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        s_address1 = s_addr_1_reg_1390;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_address1 = sum2_8_cast_fu_1032_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address1 = sum2_6_cast_fu_974_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address1 = sum2_4_cast_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        s_address1 = sum2_2_cast_fu_858_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address1 = sum2_1_cast_fu_779_p1;
    end else begin
        s_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        s_ce0 = 1'b1;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        s_ce1 = 1'b1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        s_d0 = tmp_134_9_reg_1636;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        s_d0 = tmp_134_s_reg_1641;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        s_d0 = tmp_134_6_reg_1621;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        s_d0 = tmp_134_4_reg_1611;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        s_d0 = tmp_134_2_fu_1230_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s_d0 = tmp_48_fu_1121_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        s_d0 = tmp_44_fu_1113_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        s_d0 = tmp_40_fu_1105_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        s_d0 = tmp_36_fu_1097_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        s_d0 = tmp_31_fu_1051_p1;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        s_d1 = tmp_134_8_reg_1631;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        s_d1 = tmp_134_7_reg_1626;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        s_d1 = tmp_134_5_reg_1616;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        s_d1 = tmp_134_3_reg_1606;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        s_d1 = tmp_134_1_fu_1225_p2;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        s_d1 = grp_fu_385_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s_d1 = tmp_46_fu_1117_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        s_d1 = tmp_42_fu_1109_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        s_d1 = tmp_38_fu_1101_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        s_d1 = tmp_34_fu_1093_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        s_d1 = tmp_24_fu_1047_p1;
    end else begin
        s_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state25) & (tmp_26_reg_1377 == 1'd1)) | ((1'b1 == ap_CS_fsm_state14) & (or_cond_41_reg_1381 == 1'd1)))) begin
        s_we0 = 1'b1;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state10) | ((1'b1 == ap_CS_fsm_state25) & (tmp_26_reg_1377 == 1'd1)) | ((1'b1 == ap_CS_fsm_state14) & (or_cond_41_reg_1381 == 1'd1)))) begin
        s_we1 = 1'b1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond2_fu_399_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond2_fu_399_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (or_cond_41_fu_764_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (tmp_26_reg_1377 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_1_fu_481_p3 = {{smax_reg_347}, {16'd0}};

assign a_assign_2_fu_531_p2 = (a_lobit_i_cast_fu_503_p3 ^ a_assign_1_fu_481_p3);

assign a_lobit_i_cast_fu_503_p3 = ((tmp_13_fu_495_p3[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_assign_fu_799_p1 = tmp_29_fu_793_p2;

assign bitoff_address0 = tmp_9_i_cast_cast_fu_575_p3;

assign bitoff_address1 = tmp_15_i_cast_fu_594_p1;

assign bitoff_address2 = tmp_19_i_cast_fu_609_p1;

assign exitcond2_fu_399_p2 = ((k_reg_359 == 4'd10) ? 1'b1 : 1'b0);

assign grp_fu_385_p2 = reg_381 << n_cast_reg_1363;

assign icmp1_fu_569_p2 = ((tmp_18_fu_559_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp2_fu_624_p2 = ((tmp_19_fu_614_p4 == 24'd0) ? 1'b1 : 1'b0);

assign icmp_fu_553_p2 = ((tmp_17_fu_543_p4 == 16'd0) ? 1'b1 : 1'b0);

assign k_1_fu_405_p2 = (k_reg_359 + 4'd1);

assign n_cast_fu_748_p1 = ap_phi_mux_n_phi_fu_374_p4;

assign newSel1_fu_714_p3 = ((sel_tmp7_i_fu_670_p2[0:0] === 1'b1) ? tmp_17_i_cast_fu_640_p1 : tmp_21_i_cast_fu_650_p1);

assign newSel2_fu_726_p3 = ((or_cond_fu_708_p2[0:0] === 1'b1) ? newSel_cast_fu_704_p1 : newSel68_cast_fu_722_p1);

assign newSel68_cast_fu_722_p1 = $signed(newSel1_fu_714_p3);

assign newSel_cast_fu_704_p1 = newSel_fu_698_p2;

assign newSel_fu_698_p2 = (tmp_i1_cast_fu_630_p1 + newSel_v_fu_690_p3);

assign newSel_v_fu_690_p3 = ((sel_tmp20_i_fu_685_p2[0:0] === 1'b1) ? 5'd23 : 5'd15);

assign or_cond_41_fu_764_p2 = (tmp_27_fu_758_p2 & tmp_26_fu_752_p2);

assign or_cond_fu_708_p2 = (sel_tmp20_i_fu_685_p2 | sel_tmp14_i_fu_680_p2);

assign p_i_cast72_cast_fu_537_p2 = (tmp_15_fu_523_p3 ^ tmp_14_fu_515_p3);

assign prod_1_fu_837_p2 = ($signed(tmp_22_i2_cast_fu_833_p1) + $signed(tmp58_cast_fu_813_p1));

assign prod_2_fu_877_p2 = ($signed(tmp_22_i8_cast_fu_873_p1) + $signed(tmp58_cast_reg_1402));

assign prod_3_fu_896_p2 = ($signed(tmp_22_i14_cast_fu_892_p1) + $signed(tmp58_cast_reg_1402));

assign prod_4_fu_935_p2 = ($signed(tmp_22_i20_cast_fu_931_p1) + $signed(tmp58_cast_reg_1402));

assign prod_5_fu_954_p2 = ($signed(tmp_22_i26_cast_fu_950_p1) + $signed(tmp58_cast_reg_1402));

assign prod_6_fu_993_p2 = ($signed(tmp_22_i32_cast_fu_989_p1) + $signed(tmp58_cast_reg_1402));

assign prod_7_fu_1012_p2 = ($signed(tmp_22_i38_cast_fu_1008_p1) + $signed(tmp58_cast_reg_1402));

assign prod_8_fu_1059_p2 = ($signed(tmp_22_i44_cast_fu_1055_p1) + $signed(tmp58_cast_reg_1402));

assign prod_9_fu_1078_p2 = ($signed(tmp_22_i50_cast_fu_1074_p1) + $signed(tmp58_cast_reg_1402));

assign prod_fu_817_p2 = ($signed(tmp_22_i_cast_fu_803_p1) + $signed(tmp58_cast_fu_813_p1));

assign s_offset_cast1_fu_391_p1 = s_offset;

assign s_offset_cast_fu_395_p1 = s_offset;

assign scalauto_fu_740_p3 = ((tmp_1_i_reg_1321[0:0] === 1'b1) ? 6'd4 : sel_tmp21_i_op_fu_734_p2);

assign sel_tmp14_i_fu_680_p2 = (tmp14_fu_675_p2 & icmp_reg_1332);

assign sel_tmp20_i_fu_685_p2 = (sel_tmp6_i_fu_659_p2 & icmp2_reg_1358);

assign sel_tmp21_i_op_fu_734_p2 = (6'd4 - newSel2_fu_726_p3);

assign sel_tmp2_i_fu_654_p2 = (icmp_reg_1332 ^ 1'd1);

assign sel_tmp6_i_fu_659_p2 = (tmp_1_i_reg_1321 ^ 1'd1);

assign sel_tmp7_i_fu_670_p2 = (tmp13_fu_664_p2 & icmp1_reg_1338);

assign smax_2_fu_453_p3 = ((tmp_12_fu_425_p3[0:0] === 1'b1) ? tmp_29_i_fu_445_p3 : s_q0);

assign sum2_1_cast_fu_779_p1 = sum2_1_fu_774_p2;

assign sum2_1_fu_774_p2 = (4'd1 + s_offset);

assign sum2_2_cast_fu_858_p1 = sum2_2_fu_853_p2;

assign sum2_2_fu_853_p2 = (4'd2 + s_offset);

assign sum2_3_cast_fu_868_p1 = sum2_3_fu_863_p2;

assign sum2_3_fu_863_p2 = (4'd3 + s_offset);

assign sum2_4_cast_fu_916_p1 = sum2_4_fu_911_p2;

assign sum2_4_fu_911_p2 = (4'd4 + s_offset);

assign sum2_5_cast_fu_926_p1 = sum2_5_fu_921_p2;

assign sum2_5_fu_921_p2 = (4'd5 + s_offset);

assign sum2_6_cast_fu_974_p1 = sum2_6_fu_969_p2;

assign sum2_6_fu_969_p2 = (5'd6 + s_offset_cast_reg_1284);

assign sum2_7_cast_fu_984_p1 = sum2_7_fu_979_p2;

assign sum2_7_fu_979_p2 = (5'd7 + s_offset_cast_reg_1284);

assign sum2_8_cast_fu_1032_p1 = sum2_8_fu_1027_p2;

assign sum2_8_fu_1027_p2 = (5'd8 + s_offset_cast_reg_1284);

assign sum2_9_cast_fu_1042_p1 = sum2_9_fu_1037_p2;

assign sum2_9_fu_1037_p2 = (5'd9 + s_offset_cast_reg_1284);

assign sum4_1_cast_fu_1130_p1 = sum4_1_fu_1125_p2;

assign sum4_1_fu_1125_p2 = (s_offset + 4'd1);

assign sum4_2_cast_fu_1140_p1 = sum4_2_fu_1135_p2;

assign sum4_2_fu_1135_p2 = (s_offset + 4'd2);

assign sum4_3_cast_fu_1150_p1 = sum4_3_fu_1145_p2;

assign sum4_3_fu_1145_p2 = (s_offset + 4'd3);

assign sum4_4_cast_fu_1160_p1 = sum4_4_fu_1155_p2;

assign sum4_4_fu_1155_p2 = (s_offset + 4'd4);

assign sum4_5_cast_fu_1170_p1 = sum4_5_fu_1165_p2;

assign sum4_5_fu_1165_p2 = (s_offset + 4'd5);

assign sum4_6_cast_fu_1180_p1 = sum4_6_fu_1175_p2;

assign sum4_6_fu_1175_p2 = (s_offset_cast_reg_1284 + 5'd6);

assign sum4_7_cast_fu_1190_p1 = sum4_7_fu_1185_p2;

assign sum4_7_fu_1185_p2 = (s_offset_cast_reg_1284 + 5'd7);

assign sum4_8_cast_fu_1200_p1 = sum4_8_fu_1195_p2;

assign sum4_8_fu_1195_p2 = (s_offset_cast_reg_1284 + 5'd8);

assign sum4_9_cast_fu_1220_p1 = sum4_9_fu_1215_p2;

assign sum4_9_fu_1215_p2 = (s_offset_cast_reg_1284 + 5'd9);

assign sum4_cast_fu_1210_p1 = sum4_s_fu_1205_p2;

assign sum4_s_fu_1205_p2 = (s_offset_cast_reg_1284 + 5'd10);

assign sum_cast_fu_420_p1 = sum_fu_415_p2;

assign sum_fu_415_p2 = (tmp_cast_fu_411_p1 + s_offset_cast_reg_1284);

assign temp_0_smax_fu_467_p3 = ((tmp_s_fu_461_p2[0:0] === 1'b1) ? smax_2_fu_453_p3 : smax_reg_347);

assign tmp13_fu_664_p2 = (sel_tmp6_i_fu_659_p2 & sel_tmp2_i_fu_654_p2);

assign tmp14_fu_675_p2 = (tmp_13_reg_1327 & sel_tmp6_i_fu_659_p2);

assign tmp15_fu_807_p2 = (16'd16384 + b_assign_fu_799_p1);

assign tmp58_cast_fu_813_p1 = tmp15_fu_807_p2;

assign tmp_12_fu_425_p3 = s_q0[32'd15];

assign tmp_134_1_fu_1225_p2 = s_load_11_reg_1515 << n_cast_reg_1363;

assign tmp_134_2_fu_1230_p2 = s_load_12_reg_1532 << n_cast_reg_1363;

assign tmp_134_3_fu_1235_p2 = s_load_13_reg_1537 << n_cast_reg_1363;

assign tmp_134_4_fu_1239_p2 = s_load_14_reg_1554 << n_cast_reg_1363;

assign tmp_134_5_fu_1243_p2 = s_load_15_reg_1559 << n_cast_reg_1363;

assign tmp_134_6_fu_1247_p2 = s_load_16_reg_1576 << n_cast_reg_1363;

assign tmp_134_7_fu_1251_p2 = s_load_17_reg_1581 << n_cast_reg_1363;

assign tmp_134_9_fu_1255_p2 = s_q0 << n_cast_reg_1363;

assign tmp_134_s_fu_1260_p2 = s_load_20_reg_1601 << n_cast_reg_1363;

assign tmp_13_fu_495_p3 = smax_reg_347[32'd15];

assign tmp_14_fu_515_p3 = {{tmp_16_fu_511_p1}, {16'd0}};

assign tmp_14_i_cast_fu_584_p4 = {{p_i_cast72_cast_fu_537_p2[23:16]}};

assign tmp_15_fu_523_p3 = ((tmp_13_fu_495_p3[0:0] === 1'b1) ? 24'd16777215 : 24'd0);

assign tmp_15_i_cast_fu_594_p1 = tmp_14_i_cast_fu_584_p4;

assign tmp_16_fu_511_p1 = smax_reg_347[7:0];

assign tmp_17_fu_543_p4 = {{a_assign_2_fu_531_p2[31:16]}};

assign tmp_17_i_cast_fu_640_p1 = tmp_17_i_fu_634_p2;

assign tmp_17_i_fu_634_p2 = (4'd7 + bitoff_q1);

assign tmp_18_fu_559_p4 = {{a_assign_2_fu_531_p2[31:24]}};

assign tmp_18_i_cast_fu_599_p4 = {{a_assign_2_fu_531_p2[31:24]}};

assign tmp_19_fu_614_p4 = {{a_assign_2_fu_531_p2[31:8]}};

assign tmp_19_i_cast_fu_609_p1 = tmp_18_i_cast_fu_599_p4;

assign tmp_1_i_fu_489_p2 = (($signed(a_assign_1_fu_481_p3) < $signed(32'd3221225473)) ? 1'b1 : 1'b0);

assign tmp_20_fu_770_p1 = ap_phi_mux_n_phi_fu_374_p4[2:0];

assign tmp_21_i_cast_fu_650_p1 = $signed(tmp_21_i_fu_644_p2);

assign tmp_21_i_fu_644_p2 = ($signed(4'd15) + $signed(bitoff_q2));

assign tmp_22_i14_cast_fu_892_p0 = s_q0;

assign tmp_22_i14_cast_fu_892_p1 = tmp_22_i14_cast_fu_892_p0;

assign tmp_22_i20_cast_fu_931_p0 = s_q1;

assign tmp_22_i20_cast_fu_931_p1 = tmp_22_i20_cast_fu_931_p0;

assign tmp_22_i26_cast_fu_950_p0 = s_q0;

assign tmp_22_i26_cast_fu_950_p1 = tmp_22_i26_cast_fu_950_p0;

assign tmp_22_i2_cast_fu_833_p0 = s_q1;

assign tmp_22_i2_cast_fu_833_p1 = tmp_22_i2_cast_fu_833_p0;

assign tmp_22_i32_cast_fu_989_p0 = s_q1;

assign tmp_22_i32_cast_fu_989_p1 = tmp_22_i32_cast_fu_989_p0;

assign tmp_22_i38_cast_fu_1008_p0 = s_q0;

assign tmp_22_i38_cast_fu_1008_p1 = tmp_22_i38_cast_fu_1008_p0;

assign tmp_22_i44_cast_fu_1055_p0 = s_q1;

assign tmp_22_i44_cast_fu_1055_p1 = tmp_22_i44_cast_fu_1055_p0;

assign tmp_22_i50_cast_fu_1074_p0 = s_q0;

assign tmp_22_i50_cast_fu_1074_p1 = tmp_22_i50_cast_fu_1074_p0;

assign tmp_22_i8_cast_fu_873_p0 = s_q1;

assign tmp_22_i8_cast_fu_873_p1 = tmp_22_i8_cast_fu_873_p0;

assign tmp_22_i_cast_fu_803_p0 = s_q0;

assign tmp_22_i_cast_fu_803_p1 = tmp_22_i_cast_fu_803_p0;

assign tmp_24_fu_1047_p1 = $signed(tmp_22_reg_1414);

assign tmp_26_fu_752_p2 = (($signed(ap_phi_mux_n_phi_fu_374_p4) > $signed(6'd0)) ? 1'b1 : 1'b0);

assign tmp_27_fu_758_p2 = (($signed(ap_phi_mux_n_phi_fu_374_p4) < $signed(6'd5)) ? 1'b1 : 1'b0);

assign tmp_28_fu_784_p2 = ($signed(3'd7) + $signed(tmp_20_reg_1385));

assign tmp_28_i_fu_439_p2 = (16'd0 - s_q0);

assign tmp_29_fu_793_p2 = 15'd16384 >> tmp_60_cast_fu_789_p1;

assign tmp_29_i_fu_445_p3 = ((tmp_i_fu_433_p2[0:0] === 1'b1) ? 16'd32767 : tmp_28_i_fu_439_p2);

assign tmp_31_fu_1051_p1 = $signed(tmp_30_reg_1419);

assign tmp_34_fu_1093_p1 = $signed(tmp_32_reg_1434);

assign tmp_36_fu_1097_p1 = $signed(tmp_35_reg_1439);

assign tmp_38_fu_1101_p1 = $signed(tmp_37_reg_1454);

assign tmp_40_fu_1105_p1 = $signed(tmp_39_reg_1459);

assign tmp_42_fu_1109_p1 = $signed(tmp_41_reg_1474);

assign tmp_44_fu_1113_p1 = $signed(tmp_43_reg_1479);

assign tmp_46_fu_1117_p1 = $signed(tmp_45_reg_1494);

assign tmp_48_fu_1121_p1 = $signed(tmp_47_reg_1499);

assign tmp_60_cast_fu_789_p1 = tmp_28_fu_784_p2;

assign tmp_9_i_cast_cast_fu_575_p3 = ((tmp_13_fu_495_p3[0:0] === 1'b1) ? 64'd255 : 64'd0);

assign tmp_cast_fu_411_p1 = k_reg_359;

assign tmp_fu_475_p2 = ((smax_reg_347 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_i1_cast_fu_630_p1 = bitoff_q0;

assign tmp_i_fu_433_p2 = ((s_q0 == 16'd32768) ? 1'b1 : 1'b0);

assign tmp_s_fu_461_p2 = (($signed(smax_2_fu_453_p3) > $signed(smax_reg_347)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    s_offset_cast1_reg_1278[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    s_offset_cast_reg_1284[4] <= 1'b0;
    s_addr_1_reg_1390[4] <= 1'b0;
    s_addr_2_reg_1396[4] <= 1'b0;
    tmp58_cast_reg_1402[16] <= 1'b0;
    s_addr_3_reg_1424[4] <= 1'b0;
    s_addr_4_reg_1429[4] <= 1'b0;
    s_addr_5_reg_1444[4] <= 1'b0;
    s_addr_6_reg_1449[4] <= 1'b0;
    s_addr_11_reg_1504[4] <= 1'b0;
    s_addr_12_reg_1509[4] <= 1'b0;
    s_addr_13_reg_1520[4] <= 1'b0;
    s_addr_14_reg_1526[4] <= 1'b0;
    s_addr_15_reg_1542[4] <= 1'b0;
    s_addr_16_reg_1548[4] <= 1'b0;
end

endmodule //Autocorrelation
