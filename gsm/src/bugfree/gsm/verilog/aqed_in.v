// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aqed_in (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bmc_in_address0,
        bmc_in_ce0,
        bmc_in_q0,
        bmc_in_address1,
        bmc_in_ce1,
        bmc_in_q1,
        bmc_in_offset,
        orig,
        dup,
        state_orig_issued_i,
        state_orig_issued_o,
        state_orig_issued_o_ap_vld,
        state_dup_issued_i,
        state_dup_issued_o,
        state_dup_issued_o_ap_vld,
        state_orig_in,
        state_orig_in_ap_vld,
        state_dup_in,
        state_dup_in_ap_vld
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] bmc_in_address0;
output   bmc_in_ce0;
input  [15:0] bmc_in_q0;
output  [4:0] bmc_in_address1;
output   bmc_in_ce1;
input  [15:0] bmc_in_q1;
input  [3:0] bmc_in_offset;
input   orig;
input   dup;
input  [0:0] state_orig_issued_i;
output  [0:0] state_orig_issued_o;
output   state_orig_issued_o_ap_vld;
input  [0:0] state_dup_issued_i;
output  [0:0] state_dup_issued_o;
output   state_dup_issued_o_ap_vld;
output  [15:0] state_orig_in;
output   state_orig_in_ap_vld;
output  [15:0] state_dup_in;
output   state_dup_in_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] bmc_in_address0;
reg bmc_in_ce0;
reg[4:0] bmc_in_address1;
reg bmc_in_ce1;
reg[0:0] state_orig_issued_o;
reg state_orig_issued_o_ap_vld;
reg[0:0] state_dup_issued_o;
reg state_dup_issued_o_ap_vld;
reg state_orig_in_ap_vld;
reg state_dup_in_ap_vld;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] state_in_count;
reg   [3:0] state_orig_val_address0;
reg    state_orig_val_ce0;
reg    state_orig_val_we0;
wire   [15:0] state_orig_val_q0;
reg   [3:0] state_orig_val_address1;
reg    state_orig_val_ce1;
reg    state_orig_val_we1;
wire   [15:0] state_orig_val_q1;
reg   [4:0] bmc_in_addr_reg_707;
wire   [0:0] issue_orig_fu_321_p2;
reg   [0:0] issue_orig_reg_712;
wire   [0:0] issue_dup_fu_343_p2;
reg   [0:0] issue_dup_reg_716;
reg   [15:0] state_in_count_load_reg_720;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire   [4:0] bmc_in_offset_cast2_fu_390_p1;
reg   [4:0] bmc_in_offset_cast2_reg_751;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state7;
wire   [0:0] grp_fu_294_p2;
reg   [0:0] tmp_s_reg_782;
wire    ap_CS_fsm_state8;
wire   [0:0] grp_fu_300_p2;
reg   [0:0] tmp_15_reg_789;
wire    ap_CS_fsm_state9;
wire   [0:0] sel_tmp3_fu_470_p2;
reg   [0:0] sel_tmp3_reg_815;
wire   [0:0] tmp5_fu_516_p2;
reg   [0:0] tmp5_reg_821;
reg   [0:0] tmp_18_reg_826;
wire    ap_CS_fsm_state10;
reg   [0:0] tmp_19_reg_832;
wire   [4:0] bmc_in_offset_cast6_fu_522_p1;
reg   [4:0] bmc_in_offset_cast6_reg_838;
reg   [0:0] tmp_21_reg_854;
wire    ap_CS_fsm_state11;
wire   [0:0] sel_tmp6_fu_576_p2;
reg   [0:0] sel_tmp6_reg_870;
wire   [0:0] tmp3_fu_621_p2;
reg   [0:0] tmp3_reg_876;
wire   [63:0] bmc_in_offset_cast1_fu_306_p1;
wire   [63:0] sum_cast_fu_365_p1;
wire   [63:0] sum2_cast_fu_370_p1;
wire   [63:0] sum9_cast_fu_375_p1;
wire   [63:0] sum8_cast_fu_380_p1;
wire   [63:0] sum1_cast_fu_385_p1;
wire   [63:0] sum3_cast_fu_399_p1;
wire   [63:0] sum4_cast_fu_410_p1;
wire   [63:0] sum5_cast_fu_420_p1;
wire   [63:0] sum6_cast_fu_430_p1;
wire   [63:0] sum7_cast_fu_435_p1;
wire   [63:0] sum10_cast_fu_440_p1;
wire   [63:0] sum11_cast_fu_445_p1;
wire   [63:0] sum12_cast_fu_450_p1;
wire   [63:0] sum13_cast_fu_455_p1;
wire   [63:0] sum14_cast_fu_531_p1;
wire   [63:0] sum15_cast_fu_542_p1;
wire   [63:0] sum16_cast_fu_552_p1;
wire   [63:0] sum17_cast_fu_562_p1;
wire   [15:0] tmp_25_fu_685_p2;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_24_fu_668_p2;
wire    ap_CS_fsm_state6;
wire   [0:0] issue_orig_fu_321_p0;
wire   [0:0] tmp_fu_315_p2;
wire   [0:0] tmp1_fu_337_p0;
wire   [0:0] not_state_dup_issued_fu_331_p2;
wire   [0:0] tmp1_fu_337_p2;
wire   [3:0] grp_fu_268_p2;
wire   [3:0] grp_fu_274_p2;
wire   [3:0] grp_fu_279_p2;
wire   [3:0] grp_fu_284_p2;
wire   [3:0] grp_fu_289_p2;
wire   [4:0] sum3_fu_393_p2;
wire   [4:0] sum4_fu_404_p2;
wire   [4:0] sum5_fu_415_p2;
wire   [4:0] sum6_fu_425_p2;
wire   [0:0] sel_tmp_fu_460_p2;
wire   [0:0] sel_tmp2_fu_464_p2;
wire   [0:0] tmp_not_fu_476_p2;
wire   [0:0] sel_tmp15_not_fu_486_p2;
wire   [0:0] sel_tmp20_not_fu_498_p2;
wire   [0:0] not_sel_tmp2_fu_504_p2;
wire   [0:0] not_sel_tmp1_fu_492_p2;
wire   [0:0] tmp4_fu_510_p2;
wire   [0:0] not_sel_tmp_fu_481_p2;
wire   [4:0] sum14_fu_525_p2;
wire   [4:0] sum15_fu_536_p2;
wire   [4:0] sum16_fu_547_p2;
wire   [4:0] sum17_fu_557_p2;
wire   [0:0] sel_tmp4_fu_567_p2;
wire   [0:0] sel_tmp5_fu_571_p2;
wire   [0:0] sel_tmp26_not_fu_582_p2;
wire   [0:0] sel_tmp33_not_fu_592_p2;
wire   [0:0] sel_tmp41_not_fu_603_p2;
wire   [0:0] not_sel_tmp5_fu_609_p2;
wire   [0:0] not_sel_tmp3_fu_587_p2;
wire   [0:0] tmp2_fu_615_p2;
wire   [0:0] not_sel_tmp4_fu_598_p2;
wire   [0:0] sel_tmp50_not_fu_627_p2;
wire   [0:0] tmp7_fu_641_p2;
wire   [0:0] not_sel_tmp6_fu_632_p2;
wire   [0:0] tmp9_fu_651_p2;
wire   [0:0] tmp10_fu_657_p2;
wire   [0:0] tmp8_fu_646_p2;
wire   [0:0] tmp11_fu_662_p2;
wire   [0:0] tmp6_fu_637_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 state_in_count = 16'd0;
end

aqed_in_state_oribkb #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
state_orig_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(state_orig_val_address0),
    .ce0(state_orig_val_ce0),
    .we0(state_orig_val_we0),
    .d0(bmc_in_q0),
    .q0(state_orig_val_q0),
    .address1(state_orig_val_address1),
    .ce1(state_orig_val_ce1),
    .we1(state_orig_val_we1),
    .d1(bmc_in_q1),
    .q1(state_orig_val_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bmc_in_addr_reg_707[3 : 0] <= bmc_in_offset_cast1_fu_306_p1[3 : 0];
        issue_dup_reg_716 <= issue_dup_fu_343_p2;
        issue_orig_reg_712 <= issue_orig_fu_321_p2;
        state_in_count_load_reg_720 <= state_in_count;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bmc_in_offset_cast2_reg_751[3 : 0] <= bmc_in_offset_cast2_fu_390_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bmc_in_offset_cast6_reg_838[3 : 0] <= bmc_in_offset_cast6_fu_522_p1[3 : 0];
        tmp_18_reg_826 <= grp_fu_294_p2;
        tmp_19_reg_832 <= grp_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sel_tmp3_reg_815 <= sel_tmp3_fu_470_p2;
        tmp5_reg_821 <= tmp5_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sel_tmp6_reg_870 <= sel_tmp6_fu_576_p2;
        tmp3_reg_876 <= tmp3_fu_621_p2;
        tmp_21_reg_854 <= grp_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if(ap_rst) begin
	state_in_count <= 0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_in_count <= tmp_25_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_15_reg_789 <= grp_fu_300_p2;
        tmp_s_reg_782 <= grp_fu_294_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bmc_in_address0 = sum16_cast_fu_552_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        bmc_in_address0 = sum14_cast_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        bmc_in_address0 = sum12_cast_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        bmc_in_address0 = sum10_cast_fu_440_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        bmc_in_address0 = bmc_in_addr_reg_707;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bmc_in_address0 = sum5_cast_fu_420_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bmc_in_address0 = sum3_cast_fu_399_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        bmc_in_address0 = sum8_cast_fu_380_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bmc_in_address0 = sum2_cast_fu_370_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        bmc_in_address0 = bmc_in_offset_cast1_fu_306_p1;
    end else begin
        bmc_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bmc_in_address1 = sum17_cast_fu_562_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        bmc_in_address1 = sum15_cast_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        bmc_in_address1 = sum13_cast_fu_455_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        bmc_in_address1 = sum11_cast_fu_445_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        bmc_in_address1 = sum7_cast_fu_435_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        bmc_in_address1 = sum6_cast_fu_430_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bmc_in_address1 = sum4_cast_fu_410_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        bmc_in_address1 = sum1_cast_fu_385_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        bmc_in_address1 = sum9_cast_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        bmc_in_address1 = sum_cast_fu_365_p1;
    end else begin
        bmc_in_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        bmc_in_ce0 = 1'b1;
    end else begin
        bmc_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        bmc_in_ce1 = 1'b1;
    end else begin
        bmc_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_24_fu_668_p2 == 1'd1) & (issue_dup_reg_716 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        state_dup_in_ap_vld = 1'b1;
    end else begin
        state_dup_in_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((issue_dup_reg_716 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        state_dup_issued_o = tmp_24_fu_668_p2;
    end else begin
        state_dup_issued_o = state_dup_issued_i;
    end
end

always @ (*) begin
    if (((issue_dup_reg_716 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        state_dup_issued_o_ap_vld = 1'b1;
    end else begin
        state_dup_issued_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((issue_orig_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_orig_in_ap_vld = 1'b1;
    end else begin
        state_orig_in_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((issue_orig_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_orig_issued_o = 1'd1;
    end else begin
        state_orig_issued_o = state_orig_issued_i;
    end
end

always @ (*) begin
    if (((issue_orig_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        state_orig_issued_o_ap_vld = 1'b1;
    end else begin
        state_orig_issued_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11))) begin
        state_orig_val_address0 = 4'd8;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        state_orig_val_address0 = 4'd6;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        state_orig_val_address0 = 4'd4;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        state_orig_val_address0 = 4'd2;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        state_orig_val_address0 = 4'd0;
    end else begin
        state_orig_val_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11))) begin
        state_orig_val_address1 = 4'd9;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state5))) begin
        state_orig_val_address1 = 4'd7;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4))) begin
        state_orig_val_address1 = 4'd5;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        state_orig_val_address1 = 4'd3;
    end else if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7))) begin
        state_orig_val_address1 = 4'd1;
    end else begin
        state_orig_val_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_orig_val_ce0 = 1'b1;
    end else begin
        state_orig_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_orig_val_ce1 = 1'b1;
    end else begin
        state_orig_val_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((issue_orig_reg_712 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        state_orig_val_we0 = 1'b1;
    end else begin
        state_orig_val_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((issue_orig_reg_712 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        state_orig_val_we1 = 1'b1;
    end else begin
        state_orig_val_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((issue_orig_fu_321_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((issue_orig_fu_321_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((issue_dup_reg_716 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bmc_in_offset_cast1_fu_306_p1 = bmc_in_offset;

assign bmc_in_offset_cast2_fu_390_p1 = bmc_in_offset;

assign bmc_in_offset_cast6_fu_522_p1 = bmc_in_offset;

assign grp_fu_268_p2 = (bmc_in_offset + 4'd1);

assign grp_fu_274_p2 = (bmc_in_offset + 4'd2);

assign grp_fu_279_p2 = (bmc_in_offset + 4'd3);

assign grp_fu_284_p2 = (bmc_in_offset + 4'd4);

assign grp_fu_289_p2 = (bmc_in_offset + 4'd5);

assign grp_fu_294_p2 = ((state_orig_val_q0 == bmc_in_q0) ? 1'b1 : 1'b0);

assign grp_fu_300_p2 = ((state_orig_val_q1 == bmc_in_q1) ? 1'b1 : 1'b0);

assign issue_dup_fu_343_p2 = (tmp1_fu_337_p2 & state_orig_issued_i);

assign issue_orig_fu_321_p0 = orig;

assign issue_orig_fu_321_p2 = (tmp_fu_315_p2 & issue_orig_fu_321_p0);

assign not_sel_tmp1_fu_492_p2 = (sel_tmp15_not_fu_486_p2 | grp_fu_294_p2);

assign not_sel_tmp2_fu_504_p2 = (sel_tmp20_not_fu_498_p2 | grp_fu_300_p2);

assign not_sel_tmp3_fu_587_p2 = (tmp_18_reg_826 | sel_tmp26_not_fu_582_p2);

assign not_sel_tmp4_fu_598_p2 = (tmp_19_reg_832 | sel_tmp33_not_fu_592_p2);

assign not_sel_tmp5_fu_609_p2 = (sel_tmp41_not_fu_603_p2 | grp_fu_294_p2);

assign not_sel_tmp6_fu_632_p2 = (tmp_21_reg_854 | sel_tmp50_not_fu_627_p2);

assign not_sel_tmp_fu_481_p2 = (tmp_not_fu_476_p2 | tmp_15_reg_789);

assign not_state_dup_issued_fu_331_p2 = (state_dup_issued_i ^ 1'd1);

assign sel_tmp15_not_fu_486_p2 = (sel_tmp_fu_460_p2 ^ 1'd1);

assign sel_tmp20_not_fu_498_p2 = (sel_tmp2_fu_464_p2 ^ 1'd1);

assign sel_tmp26_not_fu_582_p2 = (sel_tmp3_reg_815 ^ 1'd1);

assign sel_tmp2_fu_464_p2 = (sel_tmp_fu_460_p2 & grp_fu_294_p2);

assign sel_tmp33_not_fu_592_p2 = (sel_tmp4_fu_567_p2 ^ 1'd1);

assign sel_tmp3_fu_470_p2 = (sel_tmp2_fu_464_p2 & grp_fu_300_p2);

assign sel_tmp41_not_fu_603_p2 = (sel_tmp5_fu_571_p2 ^ 1'd1);

assign sel_tmp4_fu_567_p2 = (tmp_18_reg_826 & sel_tmp3_reg_815);

assign sel_tmp50_not_fu_627_p2 = (sel_tmp6_reg_870 ^ 1'd1);

assign sel_tmp5_fu_571_p2 = (tmp_19_reg_832 & sel_tmp4_fu_567_p2);

assign sel_tmp6_fu_576_p2 = (sel_tmp5_fu_571_p2 & grp_fu_294_p2);

assign sel_tmp_fu_460_p2 = (tmp_s_reg_782 & tmp_15_reg_789);

assign state_dup_in = state_in_count_load_reg_720;

assign state_orig_in = state_in_count;

assign sum10_cast_fu_440_p1 = grp_fu_274_p2;

assign sum11_cast_fu_445_p1 = grp_fu_279_p2;

assign sum12_cast_fu_450_p1 = grp_fu_284_p2;

assign sum13_cast_fu_455_p1 = grp_fu_289_p2;

assign sum14_cast_fu_531_p1 = sum14_fu_525_p2;

assign sum14_fu_525_p2 = (bmc_in_offset_cast6_fu_522_p1 + 5'd6);

assign sum15_cast_fu_542_p1 = sum15_fu_536_p2;

assign sum15_fu_536_p2 = (bmc_in_offset_cast6_fu_522_p1 + 5'd7);

assign sum16_cast_fu_552_p1 = sum16_fu_547_p2;

assign sum16_fu_547_p2 = (bmc_in_offset_cast6_reg_838 + 5'd8);

assign sum17_cast_fu_562_p1 = sum17_fu_557_p2;

assign sum17_fu_557_p2 = (bmc_in_offset_cast6_reg_838 + 5'd9);

assign sum1_cast_fu_385_p1 = grp_fu_289_p2;

assign sum2_cast_fu_370_p1 = grp_fu_274_p2;

assign sum3_cast_fu_399_p1 = sum3_fu_393_p2;

assign sum3_fu_393_p2 = (bmc_in_offset_cast2_fu_390_p1 + 5'd6);

assign sum4_cast_fu_410_p1 = sum4_fu_404_p2;

assign sum4_fu_404_p2 = (bmc_in_offset_cast2_fu_390_p1 + 5'd7);

assign sum5_cast_fu_420_p1 = sum5_fu_415_p2;

assign sum5_fu_415_p2 = (bmc_in_offset_cast2_reg_751 + 5'd8);

assign sum6_cast_fu_430_p1 = sum6_fu_425_p2;

assign sum6_fu_425_p2 = (bmc_in_offset_cast2_reg_751 + 5'd9);

assign sum7_cast_fu_435_p1 = grp_fu_268_p2;

assign sum8_cast_fu_380_p1 = grp_fu_284_p2;

assign sum9_cast_fu_375_p1 = grp_fu_279_p2;

assign sum_cast_fu_365_p1 = grp_fu_268_p2;

assign tmp10_fu_657_p2 = (tmp_s_reg_782 & tmp9_fu_651_p2);

assign tmp11_fu_662_p2 = (tmp8_fu_646_p2 & tmp10_fu_657_p2);

assign tmp1_fu_337_p0 = dup;

assign tmp1_fu_337_p2 = (tmp1_fu_337_p0 & not_state_dup_issued_fu_331_p2);

assign tmp2_fu_615_p2 = (not_sel_tmp5_fu_609_p2 & not_sel_tmp3_fu_587_p2);

assign tmp3_fu_621_p2 = (tmp2_fu_615_p2 & not_sel_tmp4_fu_598_p2);

assign tmp4_fu_510_p2 = (not_sel_tmp2_fu_504_p2 & not_sel_tmp1_fu_492_p2);

assign tmp5_fu_516_p2 = (tmp4_fu_510_p2 & not_sel_tmp_fu_481_p2);

assign tmp6_fu_637_p2 = (tmp5_reg_821 & tmp3_reg_876);

assign tmp7_fu_641_p2 = (sel_tmp6_reg_870 & grp_fu_294_p2);

assign tmp8_fu_646_p2 = (tmp_21_reg_854 & tmp7_fu_641_p2);

assign tmp9_fu_651_p2 = (not_sel_tmp6_fu_632_p2 & grp_fu_300_p2);

assign tmp_24_fu_668_p2 = (tmp6_fu_637_p2 & tmp11_fu_662_p2);

assign tmp_25_fu_685_p2 = (state_in_count_load_reg_720 + 16'd1);

assign tmp_fu_315_p2 = (state_orig_issued_i ^ 1'd1);

assign tmp_not_fu_476_p2 = (tmp_s_reg_782 ^ 1'd1);

always @ (posedge ap_clk) begin
    bmc_in_addr_reg_707[4] <= 1'b0;
    bmc_in_offset_cast2_reg_751[4] <= 1'b0;
    bmc_in_offset_cast6_reg_838[4] <= 1'b0;
end

endmodule //aqed_in
